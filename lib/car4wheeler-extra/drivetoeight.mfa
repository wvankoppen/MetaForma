package FourWheeler

debug {
	show [Consensus]
}

sequence Strategy {
	do {
		if (meta.type==NONE)	execute AssignCar;	
		if (meta.type==CAR)		execute Drive;
		if (meta.type==EIGHT)	execute Eight2Snake;
	}
}
 
sequence Drive {
	when (module.id == @Axle.Front && module.proximity() > PROX_TRIGGER) {			
		execute Car2EightModRefs;
	}
	
	do {
		meta.drive(FORWARD,FORWARD);
	} wait (false);
}
 
sequence AssignCar {
	module.storeID();
	do { 
		if (#(connOwn:SOUTH&EAST&FEMALE, connNb:EAST)>0)								module.group = @LeftWheel;
		if (#(connOwn:SOUTH&EAST&FEMALE, connNb:WEST)>0)								module.group = @RightWheel;
		if ((#(@RightWheel)>0 || #(@LeftWheel)>0) && #(connOwn: NORTH&EAST&FEMALE)==0)	module.id = @Axle.Front;
		if ((#(@RightWheel)>0 || #(@LeftWheel)>0) && #(connOwn: NORTH&EAST&FEMALE)==1)	module.id = @Axle.Back;
		if (#()==2) 																	module.id = @Axle.Driver;				
	} until (config.assignTime);
	meta.type = CAR;	
} // CANNOT BE MOVED TO META FUNC 

sequence Car2EightModRefs {
	do {
		stop(@LeftWheel);
		stop(@RightWheel);
	}
	module.restoreID();
	
	
	rotate(@Eight[1],-90);
	do{	connect(@Eight[3],@Eight[5]);
		connect(@Eight[3],@Eight[2]);
	}
	disconnect(@Eight[1],@Eight[3]);
	do{	rotate(@Eight[1],-90);
		rotate(@Eight[3],-90);
	}
	connect(@Eight[3],@Eight[1]);
	connect(@Eight[4],@Eight[3]);
	do{	disconnect(@Eight[5],@Eight[6]);
		disconnect(@Eight[2],@Eight[6]);
		disconnect(@Eight[1],@Eight[4]);
	}
	rotate(@Eight[0],-90);
	do{	rotate(@Eight[0],90);
		rotate(@Eight[1],-90);
	}
	connect(@Eight[6],@Eight[4]);
	disconnect(@Eight[0],@Eight[6]);
	do{	rotate(@Eight[4],-90);
		rotate(@Eight[6],-90);
	}
	do{	rotate(@Eight[1],90);
		connect(@Eight[6],@Eight[5]);
	}
	disconnect(@Eight[4],@Eight[3]);
	do{	rotate(@Eight[3],90);
		rotate(@Eight[4],90);
	}
	do{	connect(@Eight[0],@Eight[2]);
		connect(@Eight[3],@Eight[4]);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}

// check whether this is proper reverse!
sequence Car2EightConNrs {
	do {
		stop(@LeftWheel);
		stop(@LeftWheel);
	}
	module.restoreID();
	
	rotate(@Eight[1],-QUART); 
	
	do {extend(@Eight[3],0);
		extend(@Eight[3],2);
	}
	
	retract(@Eight[1],6);
	
	do {rotate(@Eight[1],-QUART);
		rotate(@Eight[3],-QUART);
	}
	
	extend(@Eight[3],6);
	extend(@Eight[4],6);
	
	do {retract(@Eight[5],4);
		retract(@Eight[2],4);
		retract(@Eight[1],4);
	}
	
	rotate(@Eight[0],-QUART);
	
	do {rotate(@Eight[0],QUART);
		rotate(@Eight[1],-QUART);
	}
	
	extend(@Eight[6],6);
	retract(@Eight[0],0);
	
	do {rotate(@Eight[4],-QUART);
		rotate(@Eight[6],-QUART); }
	
	do {retract(@Eight[4],6);
		rotate(@Eight[1],QUART);
		}
	
	extend(@Eight[6],2);
	
	rotate(@Eight[4],QUART);
	rotate(@Eight[3],QUART);
	
	
	do {extend(@Eight[0],0);
		extend(@Eight[3],4); 
	}
	
}

sequence Eight2Snake {
	// retractSet(@Eight[3], MALE&EAST&NORTH | MALE&WEST&SOUTH);
	do{ disconnect(@Eight[3],@Eight[2]);
		disconnect(@Eight[3],@Eight[4]);
	}
	
	do {
		rotate(@Eight[0],-HALF);
		rotate(@Eight[6],-HALF);
	}
	meta.type = SNAKE;
}

sequence Crawl {
	do {
		rotating (@Eight[1],1);
		rotating (@Eight[5],1);	
	} until (TIME_CRAWL);
	
	do {
		stop(@Eight[1]);
		stop(@Eight[5]);
	}
	
	do {
		rotateAbsolute(@Eight[1],0);
		rotateAbsolute(@Eight[5],0);
	}
}
