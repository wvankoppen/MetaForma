definition
module lexical/MetaformaLang-Identifiers
imports MetaformaLang

exports
	sorts Id String Time Obj
	
lexical syntax
	[a-zA-Z][a-zA-Z0-9\_]* -> ID
    [0-9]+          -> INT
	~[\"]*	-> String
	
lexical restrictions
	ID -/- [a-zA-Z0-9\_]
	"var" -/- [a-zA-Z0-9\_]
	String -/- ~[\"]
	
	

lexical syntax
	
	"if"			-> ID {reject}
	"else"			-> ID {reject}
	"for"			-> ID {reject}
	"while"			-> ID {reject}
	"wait"			-> ID {reject}
	"until"			-> ID {reject}
	"consensus"		-> ID {reject}
	
	
	 
	 "red"			-> Color
	 "blue"			-> Color
	 "green"		-> Color
	 "yellow"		-> Color
	 "cyan"		-> Color
	
	
	
	"false"			-> Bool
	"true"			-> Bool
	
	"MALE"			-> ConstLan
	"FEMALE"		-> ConstLan
	"WEST"			-> ConstLan
	"EAST"			-> ConstLan
	"NORTH"			-> ConstLan
	"SOUTH"			-> ConstLan
	"MAX_BYTE"		-> Const
	"null"			-> Const

	
	
	
	
	
	"connect"		-> Core
	"disconnect"	-> Core
	"rotate"		-> Core
	"stop"			-> Core
	"rotate_continuous"	-> Core
	"disconnect_part"	-> Core
	"connect_part"	-> Core
	
	
	
	
	
	context-free syntax
	"boolean"		-> Type{cons("Boolean")}
	"byte"			-> Type{cons("Byte")}
	"void"			-> Type{cons("Void")}
	"byte" "[" "]"	-> Type{cons("ByteArr")}
	
	"meta"			-> Obj{cons("Meta")}
	"module"		-> Obj{cons("Module")}
	"region"		-> Obj{cons("Region")}
	"debug"			-> Obj{cons("Debug")}
	"config"		-> Obj{cons("Config")}
	"config"		-> Obj{cons("Config")}
	
	 Const			-> ID {reject}
	 ConstLan			-> ID {reject}
	 Bool			-> ID {reject}
	 Obj			-> ID {reject}
	 Core			-> ID {reject}

module Exp

imports Common
imports MetaformaLang
imports lexical/MetaformaLang-Identifiers

exports


  context-free syntax
	Ref		 				-> Exp
	"#(" NbsOp ")"			-> Exp{cons("NbsCount")}
	"$(" NbsOp ")"			-> Exp{cons("Nbs")}
%%	"!$(" NbsOp ")"			-> Exp{"NbsNone"}
	ConnFilter "," {NbsFilter ","}+	-> NbsOp{cons("NbsOp")}
	ConnFilter						-> NbsOp{cons("NbsOp")}
	Exp 					-> ConnFilter{cons("ConnFilter")}
	Exp "->" Exp			-> ConnFilter{cons("ConnFilter")}
	
	"module.metaPart" "==" MetaPart			-> NbsFilter{cons("metaPart")}
	"connected" ":" Exp				-> NbsFilter{cons("connected")}
	"inRegion" ":" Exp				-> NbsFilter{cons("inRegion")}
	"module.metaID" "==" Exp			-> NbsFilter{cons("withMetaID")}
	"connDest" ":" Exp				-> NbsFilter{cons("connDest")}
	"connSource" ":" Exp			-> NbsFilter{cons("connSource")}
	ModHolderRef					-> NbsFilter{cons("in")}
	
	ID 						-> MetaPart{cons("MetaPart")}
	INT						-> Exp{cons("Int")}
	Const					-> Exp{cons("Const")}
	ConstLan					-> Exp{cons("Const")}
	Bool					-> Exp{cons("Bool")}
	ModHolderRef				-> Exp
	"(" Exp ")"			    -> Exp{cons("Par")}
	"[" {Exp ","}* "]"		-> Exp{cons("ByteArr")}
	STRING					-> Exp{cons("String")}
	
	 
	
	Exp "%"	Exp					-> Exp{left,cons("Mod")}
	"!" Exp 					-> Exp{right,cons("Not")}
	"-" Exp 					-> Exp{right,cons("Min")}
	Exp "-" Exp 				-> Exp{right,cons("Min")}
	Exp "*" Exp					-> Exp{left,cons("Mul")}
	Exp "/" Exp					-> Exp{left,cons("Div")}
	Exp "+" Exp					-> Exp{left,cons("Plus")}
	Exp "-" Exp					-> Exp{left,cons("Min")}
	Exp "<" Exp					-> Exp{left,cons("Lt")} 
    Exp ">" Exp					-> Exp{left,cons("Gt")}
    Exp "<=" Exp				-> Exp{left,cons("LtEq")}
    Exp ">=" Exp				-> Exp{left,cons("GtEq")}
    Exp "==" Exp				-> Exp{left,cons("Eq")} 
    Exp "!=" Exp				-> Exp{left,cons("Neq")} 
	Exp "&&" Exp				-> Exp{left,cons("And")}
	Exp "||" Exp				-> Exp{left,cons("Or")}
	Exp "&" Exp					-> Exp{left,cons("AndBit")}
	Exp "|" Exp					-> Exp{left,cons("OrBit")}
	
	context-free priorities
	{
		Exp "%"	Exp					-> Exp
	} > {right:
		"!" Exp 					-> Exp
	} > { left:
		Exp "*" Exp					-> Exp
		Exp "/" Exp					-> Exp
	} > { left:
		Exp "+" Exp					-> Exp
		Exp "-" Exp					-> Exp
	} > { non-assoc:
    	Exp "<" Exp					-> Exp
    	Exp ">" Exp					-> Exp
    	Exp "<=" Exp				-> Exp
    	Exp ">=" Exp				-> Exp
    	Exp "==" Exp				-> Exp
    	Exp "!=" Exp				-> Exp
	} > {left:
		Exp "&&" Exp				-> Exp
	} > {left:
		Exp "||" Exp				-> Exp
	} > {left:
		Exp "&" Exp					-> Exp
	} > {left:	
		Exp "|" Exp					-> Exp
	}

module MetaformaLang

imports 
	Common
	Exp
	lexical/MetaformaLang-Identifiers

exports

sorts	Group MetaClass

  context-free start-symbols
  
    Start
 
  context-free syntax
  %% Definition:  INDIRECT code generation
  %% Declaration: DIRECT code generation
  
   "program" ID Visualize? Definition* Declaration*						-> Start {cons("Program")}
   %%ModuleDef GroupDef* Definition 						-> Start {"Start", scope(Include)}
    
    %% Declaration -> Definition
    
    "visualize" "{" VisGroup*"}" -> Visualize {cons("Visualize")}
    ID "{" VisItem* "}" 		 -> VisGroup{cons("VisGroup")}
	
	ModHolderOrStateRef ":" Color [0-9] ";" -> VisItem{cons("VisItem")}
    
    ModHolderRef -> ModHolderOrStateRef
    StateRef -> ModHolderOrStateRef
    
	GroupDef 										-> Definition
	Meta "{" FieldOrPartDecl* FuncDecl* "}" 	-> Definition{cons("Class")}
	Module "{" FieldDecl* FuncDecl* "}" 			-> Definition{cons("Class")}
	
	"meta" 							-> Meta{cons("Meta")}
	"module"						-> Module{cons("Module")}
	
	"void" ID "(" {ParamListElem ","}* ")" "{" Declaration* Stmt* "}"					-> FuncDecl{cons("FuncDecl")}
	Type ID "(" {ParamListElem ","}* ")" "{" Declaration* Stmt* "return" Exp ";" "}"	-> FuncDecl{cons("FuncDecl")}
	
	Type ID 			-> ParamListElem{cons("Param")}
	ID					-> Type{avoid}
	
	"packet" ID "{" PayloadDecl* "}" 					-> Declaration{cons("Packet")}
	FuncDecl -> Declaration

	
	%%Type {ID ","}+ ";" -> VarDecl{"VarDecl"}
	Type ID ";" -> VarDecl{cons("VarDecl")}
	Type ID ";" -> FieldDecl{cons("FieldDecl")}
	Type ID ";" -> PayloadDecl{cons("PayloadDecl")}
	
	FieldDecl -> FieldOrPartDecl
	"part" "[" {MetaPart ","}* "]" ";" -> FieldOrPartDecl{cons("MetaPartDecl")}
	ID 		-> MetaPart{cons("MetaPart")}
	
	ID 					-> Ref{cons("VarRef")}
	ID 					-> PayloadRef{cons("PayloadRef")}
	
	PayloadRef "=" ID			-> AssignElem{cons("AssignElem")}
	{AssignElem ","}*				-> AssignList{cons("AssignList")}
	
	"sequence" ID "{" VarDecl* FuncDecl* Instr* "}" -> Declaration{cons("State")}
	%% "state" ID "{" EvHdlr* TryReg* "}" -> Definition{"State"}
	
	
	EvHdlr										 -> Definition
	"when" "(" Event ")" "{" VarDecl* Stmt* "}" -> EvHdlr{cons("EvHdlr")}
	
	EvHdlr -> Stmt
	
	ID								-> PacketRef {cons("PacketRef")}
	
	"receive" "(" PacketRef ID ")" 	-> Event{cons("Receive")}
	Exp 							-> Event{cons("Event")}
	"rate" Ref						-> Rate{cons("Rate")}
	
	
	"to" "meta-module" -> DestSingle{cons("Meta")}
	"on" "connector" -> DestSingle{cons("Conn")}
	"to" "meta-modules" -> DestMulti{cons("Meta")}
	"on" "connectors" -> DestMulti{cons("Conn")}
	
	"send" PacketRef "(" AssignList ")"	DestSingle Exp Rate? ";"		-> Stmt{cons("Send")}
	"unicast" PacketRef "(" AssignList ")" DestMulti  Exp  Rate? ";" -> Stmt{cons("Unicast")}
	"broadcast" PacketRef "(" AssignList ")" Rate? ";" -> Stmt{cons("Broadcast")}
	
	
	Ref "=" Exp ";" -> Stmt{cons("Assign")}
	
	

	Stmt							-> Block{cons("Block")}
	"{" Stmt* "}" 							-> Block{cons("Block")}
		
	"if" "(" Exp ")" Block "else" Block 		-> Stmt{cons("IfElse")}
	
	"if" "(" Exp ")" Block 					-> Stmt{cons("If")}
		
	ID 										-> StateRef{cons("StateRef")}
	ID 										-> OrientRef{cons("OrientRef")}	
		
	Stmt -> Instr
	"goto" StateRef ";"							-> Stmt{cons("Goto")}
	"goto" ID "orientating" ID ";"			-> Stmt{cons("Goto")}
	
	"group" ID "[" {Mod ","}* "]" 			-> GroupDef{cons("Group")}
	"group" ID							-> GroupDef{cons("GroupNum")}
	
	ID 								-> Mod{cons("Mod")}
	
	"try" "region" StateRef "orientating" OrientRef "from" ByteList "excluding" ByteList ";" -> Stmt{cons("TryRegion")}
	
	 {Exp ","}* 				-> ByteList {cons("ByteArr")}
	
	"disconnect" "(" ModHolderRef "," ModHolderRef ")" ";"			-> Stmt{cons("Disconnect")}
	"connect" "(" ModHolderRef "," ModHolderRef ")" ";"			-> Stmt{cons("Connect")}
	"rotate" "(" ModHolderRef "," Exp ")" ";"			-> Stmt{cons("Rotate")}
	"rotate_continuous" "(" ModHolderRef "," Exp ")" ";"			-> Stmt{cons("RotateCont")}
	"disconnect_part" "(" ModHolderRef "," Exp ")" ";"			-> Stmt{cons("DisconnectPart")}
	"connect_part" "(" ModHolderRef "," Exp ")" ";"			-> Stmt{cons("ConnectPart")}
	
	"stop" "(" ModHolderRef ")" ";"			-> Stmt{cons("Stop")}
	
	"for" "(" Type ID ":" ID")" Block				-> Stmt{cons("For")}
	
	
	
	
	"wait" "(" Stop ")" ";" -> StopCondition {cons("Wait")}
	"until" "(" Stop ")" ";" -> StopCondition{cons("Until")}
	
	"consensus" "(" ")" 	-> Stop {cons("Consensus")}
	Exp						-> Stop	
	
	
	ID -> FuncRef{cons("FuncRef")}
	
	Obj "." ID -> MethodRef{cons("MethodRef")}
	
	
	"orientation" "matches" {OrientRef ","}* -> Exp{cons("OrientMatch")}
	
	
	context-free priorities
	{
	Obj "." ID 			-> Ref{cons("FieldRef")}
	} > {
	ID "." ID 			-> Ref{cons("FieldRef")}
	}
	
	context-free priorities
	{
	"@" ID										-> ModHolderRef{cons("ModHolderRef")}
	} > {
	ID "@" ID									-> ModHolderRef{cons("ModHolderRef")}
	}
	
	
	context-free priorities
	{
	"do" "{" Declaration* Stmt* "}" StopCondition  -> Instr{cons("Instr")}
	} > {
	"do" "{" Declaration* Stmt* "}" -> Instr{cons("Instr")}
	}
	
	
	context-free priorities
	{
	MethodRef	"(" {Exp "," }* ")" ";"  -> Stmt{cons("FuncCall")}
	MethodRef 	"(" {Exp "," }* ")" 	 -> Exp{cons("FuncCall")}
	} > {
	FuncRef  "(" {Exp "," }* ")"   			-> Exp{cons("FuncCall")}
	FuncRef  "(" {Exp "," }* ")" ";"			-> Stmt{cons("FuncCall")}
	}

module Common
imports MetaformaLang

exports

  lexical syntax
  
  	[0-9]+ "ms"			-> TIME
  
    
    
    "\"" StringChar* "\"" -> STRING
    ~[\"\n]               -> StringChar
    "\\\""                -> StringChar
    BackSlashChar         -> StringChar
    "\\"                  -> BackSlashChar
    
    [\ \t\n\r] -> LAYOUT
    
    [\*]                             -> CommentChar
    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
    
    -> EOF
  
  lexical restrictions
  
    %% Ensure greedy matching for lexicals
  
    CommentChar   -/- [\/]
    INT           -/- [0-9]
    ID            -/- [a-zA-Z0-9\_]
    
    %% EOF may not be followed by any char
    
    EOF           -/- ~[]

    %% Backslash chars in strings may not be followed by " 
    
    BackSlashChar -/- [\"]

  context-free restrictions
  
    %% Ensure greedy matching for comments

    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    LAYOUT? -/- [\/].[\*]

module MetaformaLang

imports 
	Common
	Exp
	lexical/MetaformaLang-Identifiers

exports

sorts	Group MetaClass

  context-free start-symbols
  
    Start
 
  context-free syntax
  %% Definition:  INDIRECT code generation
  %% Declaration: DIRECT code generation
  
   "program" ID Visualize? Definition* Declaration*						-> Start {cons("Program")}
   %%ModuleDef GroupDef* Definition 						-> Start {"Start", scope(Include)}
    
    %% Declaration -> Definition
    
    "visualize" "{" VisGroup*"}" -> Visualize {cons("Visualize")}
    ID "{" VisItem* "}" 		 -> VisGroup{cons("VisGroup")}
	
	ModHolderOrStateRef ":" Color [0-9] ";" -> VisItem{cons("VisItem")}
    
    ModHolderRef -> ModHolderOrStateRef
    StateRef -> ModHolderOrStateRef
    
	GroupDef 										-> Definition
	Meta "{" FieldOrPartDecl* FuncDecl* "}" 	-> Definition{cons("Class")}
	Module "{" FieldDecl* FuncDecl* "}" 			-> Definition{cons("Class")}
	
	"meta" 							-> Meta{cons("Meta")}
	"module"						-> Module{cons("Module")}
	
	"void" ID "(" {ParamListElem ","}* ")" "{" Declaration* Stmt* "}"					-> FuncDecl{cons("FuncDecl")}
	Type ID "(" {ParamListElem ","}* ")" "{" Declaration* Stmt* "return" Exp ";" "}"	-> FuncDecl{cons("FuncDecl")}
	
	Type ID 			-> ParamListElem{cons("Param")}
	ID					-> Type{avoid}
	
	"packet" ID "{" PayloadDecl* "}" 					-> Declaration{cons("Packet")}
	FuncDecl -> Declaration

	
	%%Type {ID ","}+ ";" -> VarDecl{"VarDecl"}
	Type ID ";" -> VarDecl{cons("VarDecl")}
	Type ID ";" -> FieldDecl{cons("FieldDecl")}
	Type ID ";" -> PayloadDecl{cons("PayloadDecl")}
	
	FieldDecl -> FieldOrPartDecl
	"part" "[" {MetaPart ","}* "]" ";" -> FieldOrPartDecl{cons("MetaPartDecl")}
	ID 		-> MetaPart{cons("MetaPart")}
	
	ID 					-> Ref{cons("VarRef")}
	ID 					-> PayloadRef{cons("PayloadRef")}
	
	PayloadRef "=" ID			-> AssignElem{cons("AssignElem")}
	{AssignElem ","}*				-> AssignList{cons("AssignList")}
	
	"sequence" ID "{" VarDecl* FuncDecl* Instr* "}" -> Declaration{cons("State")}
	%% "state" ID "{" EvHdlr* TryReg* "}" -> Definition{"State"}
	
	
	EvHdlr										 -> Definition
	"when" "(" Event ")" "{" VarDecl* Stmt* "}" -> EvHdlr{cons("EvHdlr")}
	
	EvHdlr -> Stmt
	
	ID								-> PacketRef {cons("PacketRef")}
	
	"receive" "(" PacketRef ID ")" 	-> Event{cons("Receive")}
	Exp 							-> Event{cons("Event")}
	"rate" Ref						-> Rate{cons("Rate")}
	
	
	"to" "meta-module" -> DestSingle{cons("Meta")}
	"on" "connector" -> DestSingle{cons("Conn")}
	"to" "meta-modules" -> DestMulti{cons("Meta")}
	"on" "connectors" -> DestMulti{cons("Conn")}
	
	"send" PacketRef "(" AssignList ")"	DestSingle Exp Rate? ";"		-> Stmt{cons("Send")}
	"unicast" PacketRef "(" AssignList ")" DestMulti  Exp  Rate? ";" -> Stmt{cons("Unicast")}
	"broadcast" PacketRef "(" AssignList ")" Rate? ";" -> Stmt{cons("Broadcast")}
	
	
	Ref "=" Exp ";" -> Stmt{cons("Assign")}
	
	

	Stmt							-> Block{cons("Block")}
	"{" Stmt* "}" 							-> Block{cons("Block")}
		
	"if" "(" Exp ")" Block "else" Block 		-> Stmt{cons("IfElse")}
	
	"if" "(" Exp ")" Block 					-> Stmt{cons("If")}
		
	ID 										-> StateRef{cons("StateRef")}
	ID 										-> OrientRef{cons("OrientRef")}	
		
	Stmt -> Instr
	"goto" StateRef ";"							-> Stmt{cons("Goto")}
	"goto" ID "orientating" ID ";"			-> Stmt{cons("Goto")}
	
	"group" ID "[" {Mod ","}* "]" 			-> GroupDef{cons("Group")}
	"group" ID							-> GroupDef{cons("GroupNum")}
	
	ID 								-> Mod{cons("Mod")}
	
	"try" "region" StateRef "orientating" OrientRef "from" ByteList "excluding" ByteList ";" -> Stmt{cons("TryRegion")}
	
	 {Exp ","}* 				-> ByteList {cons("ByteArr")}
	
	"disconnect" "(" ModHolderRef "," ModHolderRef ")" ";"			-> Stmt{cons("Disconnect")}
	"connect" "(" ModHolderRef "," ModHolderRef ")" ";"			-> Stmt{cons("Connect")}
	"rotate" "(" ModHolderRef "," Exp ")" ";"			-> Stmt{cons("Rotate")}
	"rotate_continuous" "(" ModHolderRef "," Exp ")" ";"			-> Stmt{cons("RotateCont")}
	"disconnect_part" "(" ModHolderRef "," Exp ")" ";"			-> Stmt{cons("DisconnectPart")}
	"connect_part" "(" ModHolderRef "," Exp ")" ";"			-> Stmt{cons("ConnectPart")}
	
	"stop" "(" ModHolderRef ")" ";"			-> Stmt{cons("Stop")}
	
	"for" "(" Type ID ":" ID")" Block				-> Stmt{cons("For")}
	
	
	
	
	"wait" "(" Stop ")" ";" -> StopCondition {cons("Wait")}
	"until" "(" Stop ")" ";" -> StopCondition{cons("Until")}
	
	"consensus" "(" ")" 	-> Stop {cons("Consensus")}
	Exp						-> Stop	
	
	
	ID -> FuncRef{cons("FuncRef")}
	
	Obj "." ID -> MethodRef{cons("MethodRef")}
	
	
	"orientation" "matches" {OrientRef ","}* -> Exp{cons("OrientMatch")}
	
	
	context-free priorities
	{
	Obj "." ID 			-> Ref{cons("FieldRef")}
	} > {
	ID "." ID 			-> Ref{cons("FieldRef")}
	}
	
	context-free priorities
	{
	"@" ID										-> ModHolderRef{cons("ModHolderRef")}
	} > {
	ID "@" ID									-> ModHolderRef{cons("ModHolderRef")}
	}
	
	
	context-free priorities
	{
	"do" "{" Declaration* Stmt* "}" StopCondition  -> Instr{cons("Instr")}
	} > {
	"do" "{" Declaration* Stmt* "}" -> Instr{cons("Instr")}
	}
	
	
	context-free priorities
	{
	MethodRef	"(" {Exp "," }* ")" ";"  -> Stmt{cons("FuncCall")}
	MethodRef 	"(" {Exp "," }* ")" 	 -> Exp{cons("FuncCall")}
	} > {
	FuncRef  "(" {Exp "," }* ")"   			-> Exp{cons("FuncCall")}
	FuncRef  "(" {Exp "," }* ")" ";"			-> Stmt{cons("FuncCall")}
	}