module MetaformaLang

signature
  constructors
    ModHolderRef   : ID * ID -> ModHolderRef
    ModHolderRef   : ID -> ModHolderRef
                   : String -> STRING
    MethodRef      : Obj * ID -> MethodRef
                   : Exp -> Stop
    Consensus      : Stop
    Until          : Stop -> StopCondition
    Wait           : Stop -> StopCondition
    TryRegion      : ID * ID * List(ID) * List(ID) -> TryReg
    Mod            : ID -> Mod
    GroupNum       : ID -> GroupDef
    Group          : ID * List(Mod) -> GroupDef
    Instr          : List(Decl) * List(Stmt) -> Instr
    Instr          : List(Decl) * List(Stmt) * StopCondition -> Instr
                   : Stmt -> Instr
    StateRef       : ID -> StateRef
    Block          : List(Stmt) -> Block
    Block          : Stmt -> Block
    Rate           : Ref -> Rate
    Event          : Exp -> Event
    Receive        : PacketRef * ID -> Event
    PacketRef      : ID -> PacketRef
    FuncCall       : ID * List(Exp) -> Stmt
    FuncCall       : MethodRef * List(Exp) -> Stmt
    For            : Type * ID * ID * Block -> Stmt
    Stop           : ModHolderRef -> Stmt
    ConnectPart    : ModHolderRef * Exp -> Stmt
    DisconnectPart : ModHolderRef * Exp -> Stmt
    RotateCont     : ModHolderRef * Exp -> Stmt
    Rotate         : ModHolderRef * Exp -> Stmt
    Connect        : ModHolderRef * ModHolderRef -> Stmt
    Disconnect     : ModHolderRef * ModHolderRef -> Stmt
    Goto           : ID * ID -> Stmt
    Goto           : StateRef -> Stmt
    If             : Exp * Block -> Stmt
    IfElse         : Exp * Block * Block -> Stmt
    Assign         : Ref * Exp -> Stmt
    Send           : PacketRef * List(Assign) * Exp -> Stmt
    Broadcast      : PacketRef * AssignLst * Option(Rate) -> Stmt
    Unicast        : PacketRef * AssignLst * Exp * Option(Rate) -> Stmt
                   : EvHdlr -> Stmt
    EvHdlr         : Event * List(VarDecl) * List(Stmt) -> EvHdlr
    AssignList     : List(Assign) -> AssignLst
    Assign         : PayloadRef * Exp -> Assign
    PayloadRef     : ID -> PayloadRef
    FieldRef       : ID * ID -> Ref
    FieldRef       : Obj * ID -> Ref
    VarRef         : ID -> Ref
    MetaPartDecl   : List(ID) -> PartDecl
    PayloadDecl    : Type * ID -> PayloadDecl
    FieldDecl      : Type * ID -> FieldDecl
    VarDecl        : Type * ID -> VarDecl
                   : FuncDecl -> Decl
    Packet         : ID * List(PayloadDecl) -> Decl
    Param          : Type * ID -> ParamListElem
    FuncDecl       : Type * ID * List(ParamListElem) * List(Decl) * List(Stmt) * Exp -> FuncDecl
    FuncDecl       : ID * List(ParamListElem) * List(Decl) * List(Stmt) -> FuncDecl
    Module         : Module
    Meta           : Meta
                   : EvHdlr -> Definition
    State          : ID * List(EvHdlr) * List(TryReg) -> Definition
    State          : ID * List(VarDecl) * List(FuncDecl) * List(Instr) -> Definition
    Class          : Module * List(FieldDecl) * List(FuncDecl) -> Definition
    Class          : Meta * List(PartDecl) * List(FieldDecl) * List(FuncDecl) -> Definition
                   : GroupDef -> Definition
    Program        : ID * List(Definition) * List(Decl) -> Start
    MetaPart       : ID -> MetaPart
    'in            : ModHolderRef -> NbsFilter
    connSource     : Exp -> NbsFilter
    connDest       : Exp -> NbsFilter
    withMetaID     : Exp -> NbsFilter
    inRegion       : Exp -> NbsFilter
    connected      : Exp -> NbsFilter
    metaPart       : MetaPart -> NbsFilter
    ConnFilter     : Exp * Exp -> ConnFilter
    ConnFilter     : Exp -> ConnFilter
    NbsOp          : ConnFilter -> NbsOp
    NbsOp          : ConnFilter * List(NbsFilter) -> NbsOp
    FuncCall       : MethodRef * List(Exp) -> Exp
    FuncCall       : ID * List(Exp) -> Exp
    OrBit          : Exp * Exp -> Exp
    AndBit         : Exp * Exp -> Exp
    Or             : Exp * Exp -> Exp
    And            : Exp * Exp -> Exp
    Neq            : Exp * Exp -> Exp
    Eq             : Exp * Exp -> Exp
    GtEq           : Exp * Exp -> Exp
    LtEq           : Exp * Exp -> Exp
    Gt             : Exp * Exp -> Exp
    Lt             : Exp * Exp -> Exp
    Plus           : Exp * Exp -> Exp
    Div            : Exp * Exp -> Exp
    Mul            : Exp * Exp -> Exp
    Min            : Exp * Exp -> Exp
    Min            : Exp -> Exp
    Not            : Exp -> Exp
    Mod            : Exp * Exp -> Exp
    String         : STRING -> Exp
    ByteArr        : List(Exp) -> Exp
    Par            : Exp -> Exp
                   : ModHolderRef -> Exp
    Bool           : Bool -> Exp
    Const          : Const -> Exp
    Int            : INT -> Exp
    Nbs            : NbsOp -> Exp
    NbsCount       : NbsOp -> Exp
                   : Ref -> Exp
    Config         : Obj
    Debug          : Obj
    Region         : Obj
    Module         : Obj
    Meta           : Obj
                   : ID -> Type
    ByteArr        : Type
    Void           : Type
    Byte           : Type
    Boolean        : Type
                   : String -> Const
                   : String -> Bool
                   : String -> INT
                   : String -> ID


signature
  constructors
    Some : a -> Option(a)
    None : Option(a)


signature
  constructors
    Cons : a * List(a) -> List(a)
    Nil  : List(a)
    Conc : List(a) * List(a) -> List(a)
