package FourWheeler
 
debug {
	show [Discover,Packet,Symmetry, Consensus]
	
	visualize {
		north {
			@LeftWheel: green;
			@RightWheel: yellow;
			@Axis: magenta;
		}
		south {
			Main: black;
			Car2Eight: gray;
			Drive: red;
			Turn: black;
		}
	} 
	
}


// Define identification for the Car
group Axis [Driver,Front,Back]
group LeftWheel
group RightWheel
group Eight

 
packet Gradient {
	byte pri;
	byte sec;
} 
 
module {
	byte gradPri;
	byte gradSec;
	
	boolean sourcePri;
	boolean sourceSec;
	
	void gradientPropagate () {		 
		if (sourcePri){
			gradPri = 0;
		} 
		
		if (sourceSec) {
			gradSec = 0;
		}
		  unicast Gradient(pri=gradPri, sec=gradSec) to $();
	}
 	

	void gradientInit() {
		sourcePri = #(connSource: MALE&WEST)==2 && #()==2;
		sourceSec = #(connSource: FEMALE&EAST)==2 && #()==2;
		
		gradPri = MAX_BYTE;
		gradSec = MAX_BYTE;			
	}
	
	void gradientAssignEight () {
		byte nr = (gradPri/2)*3;
		if (gradSec%2==0) {
			nr = nr + gradSec/2 + 1;
		}
		
		module.id = @Eight[nr];
		module.backupID();
	}
} 


meta {
	byte type;
		
	void steer (int degrees) {
		rotate(@Axis.Front,degrees);
		rotate(@Axis.Back,-degrees);
	}
	
	void drive (float dirLeft, float dirRight) {
		rotating(@LeftWheel,-dirLeft);
		rotating(@RightWheel,dirRight);
	}
	
	void halt () {
		stop(@LeftWheel);
		stop(@RightWheel);
	}
	
	void createCar () {
		if (module.tiltZ() > 50 && #(connSource:MALE)>=2 && #()==3) module.id = @Axis.Front;
		if (module.tiltZ() > 50 && #(connSource:FEMALE)>=2 && #()==3) module.id = @Axis.Back;
		if (module.tiltZ() < 40 && #(connDest:MALE&EAST|FEMALE&WEST)==1) module.group = @LeftWheel;
		if (module.tiltZ() < 40 && #(connDest:FEMALE&EAST|MALE&WEST)==1) module.group = @RightWheel;
		if (#(@Axis)==2) module.id = @Axis.Driver;
		meta.type=CAR;
	}
			
	void createCarAfterSnake () {
		if (#()==3 && #(connSource:SOUTH&FEMALE)==2)		module.id = @Axis.Front;
		if (#()==3 && #(connSource:SOUTH&MALE)==2)			module.id = @Axis.Back;
		if (#()==1 && #(connDest:WEST&FEMALE|EAST&MALE)==1)	module.group = @LeftWheel;
		if (#()==1 && #(connDest:WEST&MALE|EAST&FEMALE)==1)	module.group = @RightWheel;
		if (#(@Axis)==2) 									module.id = @Axis.Driver;
		
		meta.type=CAR;
		// case #(connSource:SOUTH&EAST&FEMALE, connDest:EAST)>0:								module.group = @LeftWheel;
			// case #(connSource:SOUTH&EAST&FEMALE, connDest:WEST)>0:								module.group = @RightWheel;
			// case (#(@RightWheel)>0 || #(@LeftWheel)>0) && #(connSource: NORTH&EAST&FEMALE)==0:	module.id = @Axis.Front;
			// case (#(@RightWheel)>0 || #(@LeftWheel)>0) && #(connSource: NORTH&EAST&FEMALE)==1:	module.id = @Axis.Back;
			// case #()==2: 																		module.id = @Axis.Driver;
	}
	
}

when (receive (Gradient p)) {
	if (p.pri + 1 < module.gradPri || p.sec + 1 < module.gradSec) {
		module.gradPri = min (p.pri + 1,module.gradPri);
		module.gradSec = min (p.sec + 1,module.gradSec);
		module.gradientPropagate();
	}	
}

  
sequence Main {	
	do {
		meta.sizeExtra = 7;
		meta.enable();	
	}
}



sequence GetUp {
	rotate(@Eight[0],180);
	do {
		rotate(@Eight[1],-45);
		rotate(@Eight[6],45);
	}
	
	rotate(@Eight[0],-180);
	do {
		rotate(@Eight[1],45);
		rotate(@Eight[6],-45);
	}
}
