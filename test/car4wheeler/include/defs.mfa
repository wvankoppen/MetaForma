package FourWheeler
 
debug {
	// show [Discover,Packet,Symmetry, Consensus]
	
	visualize {
		north [
			@LeftWheel: green;
			@RightWheel: yellow;
			@Axle: magenta;
		]
		south [
			Init: white;
			Car2EightModRefs: brown;
			Strategy: red;
			Turn: gray;
		]
	} 
}

// Define identification for the Car
group Axle [Driver,Front,Back]
group LeftWheel
group RightWheel
group Eight

 
packet Gradient {
	byte pri,sec;
} 
 
module {
	byte gradPri,gradSec;	
	boolean sourcePri,sourceSec;
	
	void gradientPropagate () {		 
		if (#(connOwn: MALE&WEST)==2 && #()==2)		gradPri = 0;
		if (#(connOwn: FEMALE&EAST)==2 && #()==2) 	gradSec = 0;
		send Gradient(pri=gradPri, sec=gradSec) to $();
	}
 	
	void gradientInit() {
		gradPri = MAX_BYTE;
		gradSec = MAX_BYTE;			
	}
	
	void gradientAssignEight () {
		byte nr = (gradPri/2)*3;
		if (gradSec%2==0) nr = nr+gradSec/2 + 1;
		
		module.id = @Eight[nr];
		module.storeID();
	}

	boolean standing() {
		return module.tiltZ() < 40;
	}
	
	boolean lying() {
		return module.tiltZ() > 50;
	}
}

meta {
	parts 7;
	byte type;
		
	void steer (int degrees) {
		rotate(@Axle.Front,degrees);
		rotate(@Axle.Back,-degrees);
	}
	
	void drive (float dirLeft, float dirRight) {
		rotating(@LeftWheel,-dirLeft);
		rotating(@RightWheel,dirRight);
	}
	
	void halt () {
		stop(@LeftWheel);
		stop(@RightWheel);
	}
	
	void createCar () {
		if (module.lying()) {
			if (#(connOwn:NORTH&WEST)==1 && #()==3) 
				module.id = @Axle.Front;
			if (#(connOwn:NORTH&EAST)==1 && #()==3) 
				module.id = @Axle.Back;
		}
		if (module.standing()) {
			if (#(connNb:MALE&EAST|FEMALE&WEST)==1 && #()==1) 	
				module.group = @LeftWheel; // We need the && #()==1
			if (#(connNb:FEMALE&EAST|MALE&WEST)==1 && #()==1)
			 	module.group = @RightWheel;
			if (#(@Axle)==2) 					
				module.id = @Axle.Driver;
		}
		meta.type=CAR;
	}
			
	void createCarAfterSnake () {
		if (#()==3 && #(connOwn:SOUTH&FEMALE)==2)			module.id = @Axle.Front;
		if (#()==3 && #(connOwn:SOUTH&MALE)==2)				module.id = @Axle.Back;
		if (#()==1 && #(connNb:WEST&FEMALE|EAST&MALE)==1)	module.group = @LeftWheel;
		if (#()==1 && #(connNb:WEST&MALE|EAST&FEMALE)==1)	module.group = @RightWheel;
		if (#(@Axle)==2) 									module.id = @Axle.Driver;
		
		meta.type=CAR;
		// case #(connSource:SOUTH&EAST&FEMALE, connNb:EAST)>0:								module.group = @LeftWheel;
			// case #(connSource:SOUTH&EAST&FEMALE, connNb:WEST)>0:								module.group = @RightWheel;
			// case (#(@RightWheel)>0 || #(@LeftWheel)>0) && #(connSource: NORTH&EAST&FEMALE)==0:	module.id = @Axle.Front;
			// case (#(@RightWheel)>0 || #(@LeftWheel)>0) && #(connSource: NORTH&EAST&FEMALE)==1:	module.id = @Axle.Back;
			// case #()==2: 																		module.id = @Axle.Driver;
	}
	
}

when (receive (Gradient p)) {
	if (p.pri + 1 < module.gradPri || p.sec + 1 < module.gradSec) {
		module.gradPri = min (p.pri + 1,module.gradPri);
		module.gradSec = min (p.sec + 1,module.gradSec);
		module.gradientPropagate();
	}	
}

  


sequence GetUp {
	rotate(@Eight[0],180);
	do {
		rotate(@Eight[1],-45);
		rotate(@Eight[6],45);
	}
	
	rotate(@Eight[0],-180);
	do {
		rotate(@Eight[1],45);
		rotate(@Eight[6],-45);
	}
}
