package ObstacleavoidanceBoth

debug {
	visualize {
		north {
			@LeftWheel: green;
			@RightWheel: yellow;
			@Axle: magenta;
		}
		south {
			Main: black;
			TurnFourWheeler: white;
			TurnTwoWheeler: gray;
			Drive: red;
		}
	}
}

group Axle [Driver,Front,Back]
group LeftWheel
group RightWheel

float PROXIMITY = 0.15

byte FORWARD = 1
byte BACKWARD = -1	


meta {	
	void steer (int degrees) {
		rotate(@Axle.Front,degrees);
		rotate(@Axle.Back,-degrees);
	}
	
	void drive (byte dirLeft, byte dirRight) {
		rotating(@LeftWheel,-dirLeft);
		rotating(@RightWheel,dirRight);
	}
	
	void halt () {
		stop(@LeftWheel);
		stop(@RightWheel);
	}
}

sequence Main {
	do {
		when (#(connSource:SOUTH&EAST&FEMALE, connNb:EAST)>0) {
			module.group = @LeftWheel;
		}
		
		when (#(connSource:SOUTH&EAST&FEMALE, connNb:WEST)>0) {
			module.group = @RightWheel;
		} 
		
		when ((#(@RightWheel)>0 || #(@LeftWheel)>0) && #(connSource: NORTH&EAST&FEMALE)==0) {
			module.id = @Axle.Front;
		}
		
		when ((#(@RightWheel)>0 || #(@LeftWheel)>0) && #(connSource: NORTH&EAST&FEMALE)==1) {
			module.id = @Axle.Back;
		}
		 
		when (#(@Axle) == 2) {
			module.id = @Axle.Driver;
		}
		meta.enable();
		
	} until (config.assignTime);
	 	 
	goto Drive;
}	


sequence Drive {
	when (module.group == @Axle && module.proximity() > PROXIMITY) {
if (module.group == @Axle && #() == 2) {
meta.size = 3;
goto TurnTwoWheeler;
}

if (module.group == @Axle && #() == 3) {
meta.size = 7;
goto TurnFourWheeler;
}
} 
	meta.drive(FORWARD,FORWARD);
}




