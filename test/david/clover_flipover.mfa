module Brandt
 
group InsideLifter [Top,Bottom]
group OutsideLifter [Top,Bottom]
group Inside
group Outside



state Flipover {
	byte QUART;
	byte HALF;
	
	module.gradientInit();
	module.gradientPropagate();

	do  {
		if (region.orientation == BOTTOMLEFT) {
			QUART = 90;
			HALF = 180;
		}
		
		if (region.orientation == BOTTOMRIGHT) {
			QUART = -90;
			HALF = -180;
		}
		
	}

	do  {
		if (module.gradPri == 0 && module.gradSec < 3 || module.gradSec==0 && module.gradPri<3) { 
			module.group = @Outside;
		}
		if (module.gradPri > 0 && module.gradSec > 0) { 
			module.group = @Inside;
		}
		if (module.gradPri==3 && module.gradSec==1) { 
			module.id = Top@InsideLifter;
		}
		if (module.gradPri==1 && module.gradSec==3) { 
			module.id = Bottom@InsideLifter;
		}
		if (module.gradPri==2 && module.gradSec==0) { 
			module.id = Top@OutsideLifter;
		}
		if (module.gradPri==0 && module.gradSec==2) { 
			module.id = Bottom@OutsideLifter;
		}
	} wait (consensus());
					
	
	disconnect(@Outside, @Inside);
	disconnect(@OutsideLifter, @Inside);
	
	do {
		rotate(Top@InsideLifter,HALF);
		rotate(Bottom@InsideLifter,-HALF);
	} wait(consensus());
	
	do {
		rotate(Top@OutsideLifter,HALF);
		rotate(Bottom@OutsideLifter,-HALF);
	} wait(consensus());
	
	connect(@Outside, @Inside);
	connect(@OutsideLifter, @Inside);
	
	do {
		when (receive (PacketSymmetry p)) {
			module.fixSymmetry(p.connSource,p.connDest);
		}
		if (module.isRef) {
			broadcast PacketSymmetry ();	
		}
		
	} until(consensus());
	
	module.restoreID();
	
	region.finish();
}
