package Christensen


sequence Choose {
	when (receive (Packet p)) { 
		// During a sequence we should not add meta neighbors as the connector numbers can be swapped! So only do this at DEFAULT or INIT operation state
		meta.neighborHook (p.metaID,p.connDest);
	} 
	do {
		module.discover();
	} until(15);
		
	do {
		try region GetUp orientating TOP_LEFT from Bottom excluding Top;
	} until (false);
}

sequence GetUp {
	module.gradientInit();
	module.gradientPropagate();
	
	do {
		if (module.gradPri==0 && module.gradSec==2) {module.id = @Walker.Left;}
		if (module.gradPri==1 && module.gradSec==3) {module.id = @Walker.Top;}
		if (module.gradPri==2 && module.gradSec==2) {module.id = @Walker.Right;}
	}
	
	disconnect(@Uplifter, (NORTH&EAST&FEMALE)|(SOUTH&WEST&FEMALE));
		
	rotate(@Uplifter.Left,-QUART);
	rotate(@Walker.Right,-QUART);
	
	connect(@Walker.Left,@*);
		
	disconnect(@Walker.Right,@Uplifter);
		
	do {
		rotate(@Uplifter.Left,QUART);
		rotate(@Walker.Right,QUART);
	}		
	
	do {
		connect(@Uplifter.Left,@*);
		rotate(@Walker.Top,-EIGHT);
	}
	
	rotate(@Walker.Left,HALF);
	rotate(@Walker.Top,EIGHT);
			
	do {
		if (module.group == @Uplifter) {
			module.restoreID();	
		}
		
		if (meta.regionID == module.metaID) {
			meta.continueWalk = 1;
		}
	}
	
	do {
		if (meta.continueWalk == 1) {
			region.release();
		}
		else {
			region.finish();
		}
	}
	
	goto WalkStep;
}

sequence WalkStep {
	do {
		when (module.id == @Walker.Right && #(connSource: SOUTH)==0) {
			goto GetDown;
		}
		connect(@Walker.Right, @*,true);
	}
	
	disconnect(@Walker.Left, @*,false);
	rotate(@Walker.Top,-45);
	rotate(@Walker.Right,-180);
	rotate(@Walker.Top, 45);
	
	do {
		if (module.id == @Walker.Left) {
			module.id = @Walker.Right;
		}
		else if (module.id == @Walker.Right) {
			module.id = @Walker.Left;
		}
	}
	
	goto WalkStep;
}

sequence GetDown {
	rotate(@Walker.Left,QUART);
	
	meta.absorb();
	
	if (module.group == @Walker) {
		// try region from Bottom;
	}
	
	disconnect(@Uplifter.Left, SOUTH);
	
	connect(@Walker.Left,@Uplifter.Left);
	
	disconnect(@Walker.Left,@*);
	rotate(@Uplifter.Left,-QUART);
	connect(@Walker.Right,@Uplifter.Left);
	disconnect(@Walker.Left,@Uplifter.Left);
	
	do {
		rotate(@Uplifter.Left,-QUART);
		rotate(@Walker.Left,-QUART);
	}
	
	do {
		connect(@Walker.Left,@Uplifter.Left);
		connect(@*,@Uplifter.Left);
	}
	
	module.fixSymmetry (module.metaID != meta.regionID && region.at(top));
	
	region.finish();
}