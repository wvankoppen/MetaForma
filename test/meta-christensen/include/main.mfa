package Christensen

debug {
	show [AssignMetaID,MetaVarSync,Gradient,Packet,Discover,Absorb,Region,Symmetry]
	
	visualize {  
	 	north [
	 		@X: blue;
	 		@Walker: cyan;
	 		@Uplifter: white; 
	 	]
	 	south [ 
	 		Init: white; 
	 		Strategy: red;
	 		LiftUp: green;
	 		WalkStep: brown;
	 		LiftDown: purple; 	 
	 	]
	} 
}


int HALF = 180
int QUART = 90
int EIGHT = 45

int DELAY_GETUP = 5
byte LYING = 0
byte STANDING = 1

group Walker[Left,Middle,Right]
group Uplifter[Main,Help]


packet AssignMetaID {
	byte newID, counter;
}
 

packet Gradient {
	byte pri, sec;
} 

packet Absorb {}

when (receive (Absorb p)) {
	if (module.metaID == 0) {
		module.metaID = p.metaID;
		module.storeID();
		module.id = @Uplifter.Main; 
	}
}
 
 
when (receive (Gradient p)) {
	if (p.pri + 1 < module.gradPri || p.sec + 1 < module.gradSec) {
		module.gradPri = min (p.pri + 1,module.gradPri);
		module.gradSec = min (p.sec + 1,module.gradSec);
		module.gradientPropagate();
	}	
}

meta {
 	parts [LeftPart, MiddlePart, RightPart];	
	byte Top,Bottom, Up; 	// Meta neighbors
	byte type;				// LYING or STANDING

	void neighborHook (Packet p) {
		if (p.metaID != module.metaID && module.metaID != 0 && p.metaID != 0 && p.sourceGroup != @Walker) { // Walker not needs to be compromised
			if (meta.type==LYING || (module.id != @Walker.Left)) {
				if (module.metaPart == MiddlePart) 	Bottom = p.metaID;		
				if (module.metaPart == RightPart)	Top = p.metaID;
			}
		}
	}
	void absorb() {
		if (module.id == @Walker.Right) { // Otherwise we might capture modules intended for meta-module
			send Absorb() to $(inRegion:false);
			meta.sizeExtra = 1;
		}
	} 	 	
 }

 

module  { 
	borders [ // Each module can detect whether it is situated at the border
		LEFT: #(connOwn: EAST&MALE)>0; 
		RIGHT: #(connOwn: WEST&MALE)>0;
		TOP: #(connOwn: SOUTH&MALE)==1 && #()==1; // #(connOwn: EAST&FEMALE)>0 && #(connOwn: WEST&FEMALE)==0;
		BOTTOM: #(connOwn: EAST&FEMALE)>0 && #(connOwn: WEST&FEMALE)==0;
	];
	
	byte gradPri, gradSec;
	boolean isRef;
	
	void gradientPropagate () {		 
		if (module.atBorder(orient.primary)) gradPri = 0; 
		if (module.atBorder(orient.secondary)) gradSec = 0;
		send Gradient(pri=gradPri, sec=gradSec);
	} 		

	void gradientInit() {		
		gradPri = MAX_BYTE;
		gradSec = MAX_BYTE;			
	}
 }

  
sequence Init {
	do {  
		when (#(connOwn: EAST&MALE&NORTH,connected:true)>0 && #()>=2) { // Walker.Left might still be present
			module.metaID = module.number; 
			module.metaPart = LeftPart;
			send AssignMetaID (newID=module.metaID) to $(connOwn: EAST&MALE&SOUTH);
		}	
		when (receive (AssignMetaID p)) {
			module.metaID = p.newID;
				
			if (p.counter == 0) 
				module.metaPart = MiddlePart; 
			else if (p.counter == 1) {
				module.metaPart = RightPart;
				enable meta;
				execute Strategy;
			}
			send AssignMetaID (newID=p.newID,counter=p.counter+1) to $(connOwn: pow2(mirror(p.connOwn,true)));
		}
	} until (false); // No consensus here, as the final module will jump to Strategy when the meta-module is completed  
}