package Christensen

sequence Strategy {
	when (receive (Packet p)) {
		meta.neighborHook (p);
	}
	
	do {
		if (meta.type==LYING) {
			wait (30) { // needs to be high for parallel walker!
				try region LiftUp (TOP_LEFT) including Top excluding Bottom,Up;
			}
		}
		else {
			// we cant use Walker.Right to create the region, as it is hanging in the air! --> YES, but do more early
			if (module.id == @Walker.Right) {
				if (#(@X,inRegion:false)==2) 
					try region LiftDown including Top;
				if (#(@X,inRegion:false)==3) 
					execute WalkStep;
			}
		}
	} until (false);
}


sequence LiftUp {
	module.backupID();
	module.gradientInit();
	do {
		module.gradientPropagate();
	}until (config.propagationTime);
	
	do {
		if (gradPri==2 && gradSec==2) module.id = @Walker.Left;
		if (gradPri==3 && gradSec==1) module.id = @Walker.Middle;
		if (gradPri==2 && gradSec==0) module.id = @Walker.Right;
		if (gradPri==1 && gradSec==1) module.id = @Uplifter.Main;
		if (gradPri==0 && gradSec==0) module.id = @Uplifter.Help;
	}
	do {
		disconnect(@Uplifter.Main, @Uplifter.Help);
		disconnect(@Uplifter.Main, @Walker.Left);
	}
	rotate(@Walker.Right,QUART);
	rotate(@Uplifter.Main,QUART);
	connect(@Walker.Left,@X,true); // @X is active region
	disconnect(@Walker.Right,@Uplifter);
	do {
		rotateOrigin(@Uplifter.Main);
		rotateOrigin(@Walker.Right);
	}		
	do {
		connect(@Uplifter.Main,@Uplifter.Help);
		rotate(@Walker.Middle,-EIGHT);
	}
	rotate(@Walker.Left,HALF);
	rotate(@Walker.Middle,EIGHT);
	if(module.metaID == meta.regionID) {
		meta.type = STANDING;
		disable region; // We need to get rid of the region
	}
	else {
		module.restoreID();
		disable meta; // We need to get rid of everything
	}
}

sequence WalkStep {
	connect(@Walker.Right, @X);
	disconnect(@Walker.Left, @X,true); // Also disconnect to other regions
	rotate(@Walker.Middle,-EIGHT);
	rotate(@Walker.Right,-HALF);
	rotate(@Walker.Middle, EIGHT);
	if (module.id == @Walker.Left)		module.id = @Walker.Right;
	else if (module.id == @Walker.Right)module.id = @Walker.Left;
}

sequence LiftDown {
	do {
		meta.absorb();
	}until(consensus());
	
	retractSet(@Uplifter.Main, NORTH&FEMALE);
	connect(@Walker.Right,@Uplifter.Main);
	disconnect(@Walker.Left,@X,true);
	rotate(@Walker.Right,QUART);
	rotate(@Uplifter.Main,QUART);
	connect(@Walker.Left,@Uplifter.Main);
	disconnect(@Walker.Right,@Uplifter.Main);
	do {
		rotateOrigin(@Uplifter.Main);
		rotateOrigin(@Walker.Right);
	}
	do {
		connect(@Walker.Right,@Uplifter.Main);
		connect(@Uplifter.Main,@X);
	}
	do {
		module.fixSymmetry (module.metaID != meta.regionID && module.atBorder(BOTTOM));
	} until(consensus());
	
	disable meta;
}