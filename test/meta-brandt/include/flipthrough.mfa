package Brandt

group Lifter [Top,Bottom,Left,Right]
group Dummy [Left,Right]
 
 // CORRECT: RIGHT_BOTTOM   BOTTOM_RIGHT RIGHT_TOP TOP_RIGHT
 // INCORRECT: BOTTOM_LEFT
sequence FlipThrough { // RIGHT_TOP appears to be correct
	if (BOTTOM_RIGHT, RIGHT_TOP, LEFT_BOTTOM, TOP_LEFT) { // TOP_RIGHT incorrect?
		QUART = 90;
		HALF = 180;
	}
	else {
		QUART = -90; 
		HALF = -180;
	}
	module.gradientInit();
	
	do {
		module.gradientPropagate();
	} until (config.propagationTime);
	
	do {
		if (gradPri==1 && gradSec==1) module.id = @Lifter.Right;
		if (gradPri==2 && gradSec==0) module.id = @Lifter.Left;
		if (gradPri==1 && gradSec==0) module.id = @Dummy.Left;
		if (gradPri==0 && gradSec==0) module.id = @Lifter.Top;
		if (gradPri==2 && gradSec==1) module.id = @Dummy.Right;
		if (gradPri==3 && gradSec==1) module.id = @Lifter.Bottom;			
		isRef = gradPri==3 && gradSec==0;
	}
	do  {				 
		disconnect(@Lifter.Right,@Dummy.Left);
		disconnect(@Lifter.Left,@Dummy.Right);
	} 
	do  {				
		rotate(@Lifter.Right, QUART);
		rotate(@Lifter.Left, QUART);
	} 
	disconnect(@Lifter.Right,@Dummy.Right);
	rotate(@Lifter.Bottom, HALF); // HALF
	do  {				
		rotate(@Lifter.Right, QUART); 
		rotate(@Lifter.Left, QUART); 
	} 
	rotate(@Lifter.Top, HALF); // HALF

	 
	module.restoreID();
	connect(@X, @X);
	module.fixSymmetry(isRef);
	disable meta;
}