package Brandt
 
debug {
	show [Packet,AddNeighbor]
	
	visualize {  
	 	north {
	 		@Clover.North: white;
	 		@Clover.South: black;
	 		@Clover.West: yellow; 
	 		@Clover.East: green; 
	 		
	 		@OutsideLifter: cyan;
	 		@InsideLifter: magenta;
	 		
	 		@Outside: blue;
	 		@Inside: red;
	 		
	 		@UpLifter.Top: yellow;
	 		@UpLifter.Bottom: magenta;
	 		@UpLifter.Left: green; 
	 		@UpLifter.Right: yellow;
	 		
	 		@Dummy.Left: white;
	 		@Dummy.Right: black;
	 		 
	 		@X: blue;
	 	}
	 	
	 	south { 
	 		Main: white;  
	 		Strategy: red;
	 		FlipOver: yellow;
	 		FlipThrough: cyan;
	 		FlipAlong: magenta;
	 	} 
	} 
}

packet AssignMetaID {
	byte newID;
}
  

packet AddNeighbor {
	byte first;
	byte second;
}

packet Gradient {
	byte pri;
	byte sec;
} 

when (receive (AddNeighbor p)) {
	if (p.metaID != 0) {
		if (p.metaID == meta.Left) {
			meta.TopLeft = p.first;  
			meta.BottomLeft = p.second;
		}
		if (p.metaID == meta.Right) {
			meta.TopRight = p.first;
			meta.BottomRight = p.second;
		}
		if (p.metaID == meta.Top) {
			meta.TopLeft = p.first;
			meta.TopRight = p.second;
		}
		if (p.metaID == meta.Bottom) {
			meta.BottomLeft = p.first;
			meta.BottomRight = p.second;
		}
	}
}
 
 
when (receive (Gradient p)) {
	if (p.pri + 1 < module.gradPri || p.sec + 1 < module.gradSec) {
		module.gradPri = min (p.pri + 1,module.gradPri);
		module.gradSec = min (p.sec + 1,module.gradSec);
		module.gradientPropagate();
	}	
}




meta {
 	part [North, West, South, East];	
	// Future work: express meta.Right as Right 
	byte Top;
	byte Bottom;
	byte Left;
	byte Right;
	byte TopLeft;
	byte TopRight;
	byte BottomLeft; 
	byte BottomRight;
	

	void neighborHook (Packet p) {
		if (p.metaID != module.metaID && module.metaID != 0) {
			if (p.connDest == 5 || p.connDest == 6) {
				meta.Right = p.metaID;
			}
		 	if (p.connDest == 2 || p.connDest == 7) {
		 		meta.Top = p.metaID;
		 	}
			if (p.connDest == 0 || p.connDest == 3) {
				meta.Left = p.metaID;
			}
			if (p.connDest == 1 || p.connDest == 4) {
				meta.Bottom = p.metaID;
			}
		}
	}
 		
	void broadcastMetaNeighbors () {
		unicast AddNeighbor(first=Left, second=Right) to $(metaID: [Top, Bottom], inRegion:false);
		unicast AddNeighbor(first=Top, second=Bottom) to $(metaID: [Left, Right], inRegion:false);
	}
 }

 

module  { 
	border [
		LEFT: #(connSource: EAST&MALE) == 2 && #(connSource: WEST&NORTH&MALE) == 0 || #(connSource: WEST&FEMALE) == 2 && #(connSource: EAST&NORTH&FEMALE) == 0; 
		RIGHT: #(connSource: WEST&MALE) == 2 && #(connSource: EAST&SOUTH&MALE) == 0 || #(connSource: EAST&FEMALE) == 2 && #(connSource: WEST&SOUTH&FEMALE) == 0;
		TOP: #(connSource: WEST&MALE) == 2 && #(connSource: EAST&NORTH&MALE) == 0 || #(connSource: WEST&FEMALE) == 2 && #(connSource: EAST&SOUTH&FEMALE) == 0;
		BOTTOM: #(connSource: EAST&MALE) == 2 && #(connSource: WEST&SOUTH&MALE) == 0 || #(connSource: EAST&FEMALE) == 2 && #(connSource: WEST&NORTH&FEMALE) == 0;
	]

	byte gradPri;
	byte gradSec;
	boolean isRef;
	boolean sourcePri;
	boolean sourceSec;
	int QUART;
	int HALF;
	int EIGHT;

	
	void gradientPropagate () {		 
		if (sourcePri){
			gradPri = 0;
		} 
		
		if (sourceSec) {
			gradSec = 0;
		}
		 unicast Gradient(pri=gradPri, sec=gradSec) to $();
	}
 	

	void gradientInit() {
		sourcePri = module.atPrimaryBorder();
		sourceSec = module.atSecondaryBorder();
		
		gradPri = MAX_BYTE;
		gradSec = MAX_BYTE;		
		module.backupID();	
	}
 }

  
sequence Main {
 	// During a sequence we should not add meta neighbors as the connector numbers can be swapped! So only do this at DEFAULT or INIT operation state
	when (receive (Packet p)) {
		meta.neighborHook (p);
	}
	 
	do {	  
		when ( #(connSource: EAST&MALE, metaPart:None) == 2 && #(connSource: WEST, metaPart:None)==0) {
			module.metaID = module.number; 
			module.metaPart = West;
		}	
		// When a neighbor receives a packet, it sets its metaPart variable, and thus the above event will no longer trigger. Therefore use 2 events
		when (module.metaPart == West) {
			unicast AssignMetaID (newID = module.metaID) to $(connSource: EAST&MALE&NORTH);
		}
		
		when (receive (AssignMetaID p)) {
			if (module.metaID == 0) {
				module.metaID = p.newID;
				
				if (is(MALE,p.connDest) && module.metaPart == None) {
					module.metaPart = East; 
				}
				else if (is(WEST,p.connDest) && module.metaPart == None) {
					module.metaPart = North;
				}
				else if (is(EAST,p.connDest) && module.metaPart == None) {
					module.metaPart = South;
				}
			}
			
			if (module.metaPart == West) {
				meta.enable();
				break; 
			} 
			
			unicast AssignMetaID (newID = p.newID) to $(connSource: pow2((p.connDest + 4) % 8));
		}
	} until(consensus()); 
	
	do { 
		meta.broadcastMetaNeighbors();
	} until(config.propagationTime);
}


