package Brandt
 
debug {
	show [AddNeighbor, Discover, MetaVarSync, Consensus,Symmetry,Packet,AssignMetaID]
	
	visualize {  
	 	north [
	 		@Clover.North: white;
	 		@Clover.South: black;
	 		@Clover.West: yellow; 
	 		@Clover.East: green; 
	 		
	 		@OutsideLifter: cyan;
	 		@InsideLifter: magenta;
	 		
	 		@Outside: blue;
	 		@Inside: red;
	 		
	 		@Lifter.Top: yellow;
	 		@Lifter.Bottom: magenta;
	 		@Lifter.Left: green; 
	 		@Lifter.Right: brown;
	 		
	 		@Dummy.Left: white;
	 		@Dummy.Right: black;
	 		 
	 		@X: blue;
	 	]
	 	
	 	south [ 
	 		Init: white;  
	 		Strategy: red;
	 		FlipOver: yellow;
	 		FlipThrough: cyan;
	 		FlipAlong: magenta;
	 	]
	} 
}

packet AssignMetaID {
	byte newID,counter;
}

packet AddNeighbor {
	byte first, second;
}

packet Gradient {
	byte pri, sec;
} 

when (receive (AddNeighbor p)) {
	if (p.metaID != 0) {
		if (p.metaID == meta.Left) {
			meta.TopLeft = p.first;  
			meta.BottomLeft = p.second;
		}
		if (p.metaID == meta.Right) {
			meta.TopRight = p.first;
			meta.BottomRight = p.second;
		}
		if (p.metaID == meta.Top) {
			meta.TopLeft = p.first;
			meta.TopRight = p.second;
		}
		if (p.metaID == meta.Bottom) {
			meta.BottomLeft = p.first;
			meta.BottomRight = p.second;
		}
	}
}
 
 
when (receive (Gradient p)) {
	if (p.pri + 1 < module.gradPri || p.sec + 1 < module.gradSec) {
		module.gradPri = min (p.pri + 1,module.gradPri);
		module.gradSec = min (p.sec + 1,module.gradSec);
		module.gradientPropagate();
	}	
}

meta {
 	parts [North, West, South, East];	
	byte Top,Bottom,Left,Right, TopLeft,TopRight,BottomLeft,BottomRight;

	void neighborHook (Packet p) { // added p.connected == false
		if (#(in: p.sourceID,connected:true,inRegion:false) == 1 && p.metaID != module.metaID && module.metaID != 0 && p.metaID != 0) { // also check for p.metaID != 0, as when nb is at init state (thus metaID==0) it is better to keep old value
			if ((p.connOwn==5 || p.connOwn==6) && meta.Right != p.metaID) {meta.Right = p.metaID;broadcastNeighbors();} 
		 	if ((p.connOwn==2 || p.connOwn==7) && meta.Top != p.metaID) {meta.Top = p.metaID;broadcastNeighbors();} 
			if ((p.connOwn==0 || p.connOwn==3) && meta.Left != p.metaID) {meta.Left = p.metaID;broadcastNeighbors();} 
			if ((p.connOwn==1 || p.connOwn==4) && meta.Bottom != p.metaID) {meta.Bottom = p.metaID;broadcastNeighbors();} 
		}
	}
 		
	void broadcastNeighbors () {
		module.discover(); // we need to do this explicitly here!
		send AddNeighbor(first=Left, second=Right) to $(metaID: [Top, Bottom], inRegion:false);
		send AddNeighbor(first=Top, second=Bottom) to $(metaID: [Left, Right], inRegion:false);
	}
 }

 

module  { 
	borders [
		LEFT: #(connOwn: EAST&MALE) == 2 && #(connOwn: WEST&NORTH&MALE) == 0 || #(connOwn: WEST&FEMALE) == 2 && #(connOwn: EAST&NORTH&FEMALE) == 0; 
		RIGHT: #(connOwn: WEST&MALE) == 2 && #(connOwn: EAST&SOUTH&MALE) == 0 || #(connOwn: EAST&FEMALE) == 2 && #(connOwn: WEST&SOUTH&FEMALE) == 0;
		TOP: #(connOwn: WEST&MALE) == 2 && #(connOwn: EAST&NORTH&MALE) == 0 || #(connOwn: WEST&FEMALE) == 2 && #(connOwn: EAST&SOUTH&FEMALE) == 0;
		BOTTOM: #(connOwn: EAST&MALE) == 2 && #(connOwn: WEST&SOUTH&MALE) == 0 || #(connOwn: EAST&FEMALE) == 2 && #(connOwn: WEST&NORTH&FEMALE) == 0;
	];

	byte gradPri, gradSec;
	boolean sourcePri, sourceSec;
	boolean isRef;
	int QUART, HALF, EIGHT;
	
	void gradientPropagate () {		 
		if (sourcePri) gradPri=0; 
		if (sourceSec) gradSec=0;
		send Gradient(pri=gradPri, sec=gradSec);
	} 	

	void gradientInit() {
		sourcePri = module.atBorder(orient.primary);
		sourceSec = module.atBorder(orient.secondary);
		
		gradPri = MAX_BYTE;
		gradSec = MAX_BYTE;		
		module.storeID();	
	}
 }

  
sequence Init {
	do {	  
		when (module.metaID == 0 && #(connOwn: EAST&MALE, metaPart:None) == 2 && #(connOwn: WEST, metaPart:None)==0) {
			module.metaID = module.number; 
			module.metaPart = West;
		}	
		// When a neighbor receives a packet, it sets its metaPart variable, and thus the above event will no longer trigger. Therefore use 2 events
		when (module.metaPart == West) {
			send AssignMetaID (newID = module.metaID) to $(connOwn: EAST&MALE&NORTH);
		}
		
		when (receive (AssignMetaID p)) {
			if (module.metaID == 0) {
				module.metaID = p.newID;
				if (p.counter==0) module.metaPart = North;
				if (p.counter==1) module.metaPart = East;
				if (p.counter==2) module.metaPart = South;
			}
			if (p.counter==3) {
				enable meta;
				execute Strategy;
			} 
			send AssignMetaID (newID=p.newID, counter=p.counter+1) to $(connOwn: pow2(deflect(p.connOwn)));
		}
	} until(false); 
}
