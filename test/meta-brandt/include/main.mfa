package Brandt
 
debug {
	show [Packet,AddNeighbor]
	
	visualize {  
	 	north {
	 		@Clover.North: white;
	 		@Clover.South: black;
	 		@Clover.West: yellow; 
	 		@Clover.East: green; 
	 		
	 		@OutsideLifter: cyan;
	 		@InsideLifter: magenta;
	 		
	 		@Outside: blue;
	 		@Inside: red;
	 		
	 		@Uplifter.Top: yellow;
	 		@Uplifter.Bottom: magenta;
	 		@Uplifter.Left: green; 
	 		@Uplifter.Right: yellow;
	 		
	 		@Dummy.Left: white;
	 		@Dummy.Right: black;
	 		 
	 		@X: blue;
	 	}
	 	
	 	south { 
	 		Main: white;  
	 		Strategy: red;
	 		FlipOver: yellow;
	 		FlipThrough: cyan;
	 		FlipAlong: magenta;
	 	} 
	} 
}

packet AssignMetaID {
	byte newID;
}

packet AddNeighbor {
	byte first, second;
}

packet Gradient {
	byte pri, sec;
} 

when (receive (AddNeighbor p)) {
	if (p.metaID != 0) {
		if (p.metaID == meta.Left) {
			meta.TopLeft = p.first;  
			meta.BottomLeft = p.second;
		}
		if (p.metaID == meta.Right) {
			meta.TopRight = p.first;
			meta.BottomRight = p.second;
		}
		if (p.metaID == meta.Top) {
			meta.TopLeft = p.first;
			meta.TopRight = p.second;
		}
		if (p.metaID == meta.Bottom) {
			meta.BottomLeft = p.first;
			meta.BottomRight = p.second;
		}
	}
}
 
 
when (receive (Gradient p)) {
	if (p.pri + 1 < module.gradPri || p.sec + 1 < module.gradSec) {
		module.gradPri = min (p.pri + 1,module.gradPri);
		module.gradSec = min (p.sec + 1,module.gradSec);
		module.gradientPropagate();
	}	
}

meta {
 	parts [North, West, South, East];	
	byte Top,Bottom,Left,Right, TopLeft,TopRight,BottomLeft,BottomRight;

	void neighborHook (Packet p) {
		if (p.metaID != module.metaID && module.metaID != 0) {
			if (p.connDest == 5 || p.connDest == 6) meta.Right = p.metaID;
		 	if (p.connDest == 2 || p.connDest == 7) meta.Top = p.metaID;
			if (p.connDest == 0 || p.connDest == 3) meta.Left = p.metaID;
			if (p.connDest == 1 || p.connDest == 4) meta.Bottom = p.metaID;
		}
	}
 		
	void broadcastMetaNeighbors () {
		unicast AddNeighbor(first=Left, second=Right) to $(metaID: [Top, Bottom], inRegion:false);
		unicast AddNeighbor(first=Top, second=Bottom) to $(metaID: [Left, Right], inRegion:false);
	}
 }

 

module  { 
	border [
		LEFT: #(connSrc: EAST&MALE) == 2 && #(connSrc: WEST&NORTH&MALE) == 0 || #(connSrc: WEST&FEMALE) == 2 && #(connSrc: EAST&NORTH&FEMALE) == 0; 
		RIGHT: #(connSrc: WEST&MALE) == 2 && #(connSrc: EAST&SOUTH&MALE) == 0 || #(connSrc: EAST&FEMALE) == 2 && #(connSrc: WEST&SOUTH&FEMALE) == 0;
		TOP: #(connSrc: WEST&MALE) == 2 && #(connSrc: EAST&NORTH&MALE) == 0 || #(connSrc: WEST&FEMALE) == 2 && #(connSrc: EAST&SOUTH&FEMALE) == 0;
		BOTTOM: #(connSrc: EAST&MALE) == 2 && #(connSrc: WEST&SOUTH&MALE) == 0 || #(connSrc: EAST&FEMALE) == 2 && #(connSrc: WEST&NORTH&FEMALE) == 0;
	]

	byte gradPri, gradSec;
	boolean sourcePri, sourceSec;
	boolean isRef;
	
	int QUART, HALF, EIGHT;
	
	void gradientPropagate () {		 
		if (sourcePri) gradPri = 0; 
		if (sourceSec) gradSec = 0;
		unicast Gradient(pri=gradPri, sec=gradSec) to $();
	} 	

	void gradientInit() {
		sourcePri = module.atBorder(orient.primary);
		sourceSec = module.atBorder(orient.secondary);
		
		gradPri = MAX_BYTE;
		gradSec = MAX_BYTE;		
		module.backupID();	
	}
 }

  
sequence Main {
	when (receive (Packet p)) {
		meta.neighborHook (p);
	}
	 
	do {	  
		when ( #(connSrc: EAST&MALE, metaPart:None) == 2 && #(connSrc: WEST, metaPart:None)==0) {
			module.metaID = module.number; 
			module.metaPart = West;
		}	
		// When a neighbor receives a packet, it sets its metaPart variable, and thus the above event will no longer trigger. Therefore use 2 events
		when (module.metaPart == West) {
			unicast AssignMetaID (newID = module.metaID) to $(connSrc: EAST&MALE&NORTH);
		}
		
		when (receive (AssignMetaID p)) {
			if (module.metaID == 0) {
				module.metaID = p.newID;
				
				if (is(MALE,p.connDest) && module.metaPart == None) 
					module.metaPart = East; 
				else if (is(WEST,p.connDest) && module.metaPart == None) 
					module.metaPart = North;
				else if (is(EAST,p.connDest) && module.metaPart == None) 
					module.metaPart = South;
			}
			
			if (module.metaPart == West) {
				meta.enable();
				break; 
			} 
			unicast AssignMetaID (newID = p.newID) to $(connSrc: pow2((p.connDest + 4) % 8));
		}
	} until(consensus()); 
	
	do { 
		meta.broadcastMetaNeighbors();
	} until(config.propagationTime);
}
