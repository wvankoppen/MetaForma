program Brandt

visualize {  
 	north {
 		FlipOver: red 0;
 		FlipThrough: blue 1;
 		FlipAlong: green 2; 
 	}
 	
 	south {
 		@OutsideLifter: green 3;
 		@InsideLifter: green 3;
 		@InsideLifter.Top: green 3;
 		@InsideLifter.Top123: green 3;
 		@ikbestaniet: green 3;
 	}
 	 
} 
  
 
group InsideLifter [Top,Bottom]
group OutsideLifter [Top,Bottom]
group x

packet MetaIdSet { 
	byte newMetaID; 
}	

packet AddNeighbor {
	byte first;
	byte second;
}

packet Gradient {
	byte prim;
	byte sec;
}
// 
// when (receive (AddNeighbor p)) {
// 	if (p.metaID == Left) {
// 		meta.TopLeft = p.first;
// 		meta.BottomLeft = p.second;
// 	}
// 	if (p.metaID == Right) {
// 		meta.TopRight = p.first;
// 		meta.BottomRight = p.second;
// 	}
// 	if (p.metaID == Top) {
// 		meta.TopLeft = p.first;
// 		meta.TopRight = p.second;
// 	}
// 	if (p.metaID == Bottom) {
// 		meta.BottomLeft = p.first;
// 		meta.BottomRight = p.second;
// 	}
// }

 
when (receive (Gradient p)) {
	if (p.pri < gradPri || p.sec < gradSec) {
		// gradPri = MIN (p.pri,gradPri);
		// gradSec = MIN (p.sec,gradSec);
		// module.gradientPropagate();
	}	

	
 	if (p.metaID == Left) {
 		// meta.TopLeft = p.first;
 		// meta.BottomLeft = p.second;
 	}
}

meta {
 	part [Left, Top, Bottom, Right];	
	
	byte Top;
	byte Bottom;
	byte Left;
	byte Right;
	byte TopLeft;
	byte TopRight;
	byte BottomLeft; 
	byte BottomRight;

	void metaNeighborHook (byte metaID, byte destConn) {
		if (metaID != module.metaID && module.metaID != 0) {
			if (destConn == 5 || destConn == 6) {
				Right = metaID;
			}
		 	if (destConn == 2 || destConn == 7) {
		 		Top = metaID;
		 	}
			if (destConn == 0 || destConn == 3) {
				Left = metaID;
			}
			if (destConn == 1 || destConn == 4) {
				Bottom = metaID;
			}
		}
	}
 		
	void broadcastMetaNeighbors () {
		broadcastMetaNeighborsTo([Top, Bottom], Left, Right);
		broadcastMetaNeighborsTo([Left, Right], Top, Bottom);
	}



 	void broadcastMetaNeighborsTo (byte[] dests, byte v1, byte v2) {
		 unicast AddNeighbor(first = v1, second = v2) to $(metaID: dests);
 	}
 	
 }



module  {
	byte gradPri;
	byte gradSec;
	boolean isRef;
	boolean sourcePri;
	boolean sourceSec;
	
	// border left = $(EAST&MALE, inRegion:true) && !$(WEST&NORTH&MALE);
	// border right = $(EAST&MALE, inRegion:true) && !$(WEST&NORTH&MALE);
	// border top = $(EAST&MALE, inRegion:true) && !$(WEST&NORTH&MALE);
	// border bottom = $(EAST&MALE, inRegion:true) && !$(WEST&NORTH&MALE);
	
	void gradientPropagate () {		 
		if (sourcePri){
			gradPri = 0;
		}
		
		if (sourceSec) {
			gradSec = 0;
		}
		 unicast Gradient(pri=gradPri, sec=gradSec) to $(inRegion: true);
	}
 	

	void gradientInit() {
		// sourcePri = orientation.primaryBorder();
		// sourceSec = orientation.secondaryBorder();
		
		gradPri = MAX_BYTE;
		gradSec = MAX_BYTE;			
	}
 }

sequence Initialize {
 	// During a sequence we should not add meta neighbors as the connector numbers can be swapped! So only do this at DEFAULT or INIT operation state
	when (receive (Packet p)) {
		meta.neighborHook (p.connSource,p.connDest);
	}
	
	do {	
		
		when ( #(connSource: EAST&MALE, metaPart:None) == 2 && !#(connSource: WEST, metaPart:None)) {
			module.metaPart = Left;
			meta.id = module.id;
			unicast MetaIdSet (newMetaID = module.id) to $(connSource: EAST&MALE&NORTH);
		}
		when (receive (MetaIdSet p)) {
			if (module.metaID == 0) {
				module.metaID = p.newMetaID;
				
				if (isMALE(p.destCon) && module.metaPart == null) {
					module.metaPart = Right;
				}
				else if (isWEST(p.destCon) && module.metaPart == null) {
					module.metaPart = Top;
				}
				else if (isEAST(p.destCon) && module.metaPart == null) {
					module.metaPart = Bottom;
				}
			}
			
			if (module.metaPart == Left) {
				continue();
			}
			
			unicast MetaIdSet (newMetaID = newMetaID) to $(connSource: pow2((p.destCon + 4) % 8)) rate config.rate;
		}	
	} 

	 meta.enable();
	
	goto Choose;	
}


sequence Choose {
	when (receive (Packet p)) {
		// During a sequence we should not add meta neighbors as the connector numbers can be swapped! So only do this at DEFAULT or INIT operation state
		metaNeighborHook (p.metaID,p.destConn);
	}
	
	meta.broadcastNeighbors();
	
	do {
		// UP
		try region FLIPTHROUGH orientating BOTTOM_RIGHT from Top excluding TopLeft,Left,Bottom;
		try region FLIPALONG orientating BOTTOM_RIGHT from Right,TopRight excluding Top;
		try region FLIPTHROUGH orientating LEFT_BOTTOM from Right excluding Top, TopRight;
		
		// DIAGONAL DOWN
		try region FLIPTHROUGH orientating TOP_RIGHT from Bottom excluding Left, Top;
		try region FLIPTHOVER orientating TOP_RIGHT from Bottom,Left excluding Top;
		try region FLIPTHROUGH orientating RIGHT_TOP from Left excluding Top,Bottom;
	}
	
	
}



