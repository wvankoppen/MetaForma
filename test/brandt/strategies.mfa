program Brandt

visualize {  
 	
 	north {
 		@Clover.North: white;
 		@Clover.South: black;
 		@Clover.West: yellow;
 		@Clover.East: green;
 		
 		@OutsideLifter: cyan;
 		@InsideLifter: magenta;
 		
 		@UpLifter.Top: yellow;
 		@UpLifter.Bottom: magenta;
 		@UpLifter.Left: green; 
 		@UpLifter.Right: yellow;
 		
 		@Dummy.Left: white;
 		@Dummy.Right: black;
 		// @InsideLifter.Top123: green;
 		// @ikbestaniet: green;
 	}
 	
 	south { 
 		Main: white; 
 		FlipOver: yellow;
 		FlipThrough: cyan;
 		FlipAlong: magenta;
 		 
 	} 
} 
  

packet AssignMetaID { 
	byte newMetaID; 
}	

packet AddNeighbor {
	byte first;
	byte second;
}

packet Gradient {
	byte pri;
	byte sec;
}

when (receive (AddNeighbor p)) {
	if (p.metaID == meta.Left) {
		meta.TopLeft = p.first;  
		meta.BottomLeft = p.second;
	}
	if (p.metaID == meta.Right) {
		meta.TopRight = p.first;
		meta.BottomRight = p.second;
	}
	if (p.metaID == meta.Top) {
		meta.TopLeft = p.first;
		meta.TopRight = p.second;
	}
	if (p.metaID == meta.Bottom) {
		meta.BottomLeft = p.first;
		meta.BottomRight = p.second;
	}
}

 
when (receive (Gradient p)) {
	if (p.pri < module.gradPri || p.sec < module.gradSec) {
		module.gradPri = min (p.pri,module.gradPri);
		module.gradSec = min (p.sec,module.gradSec);
		module.gradientPropagate();
	}	
}

region {
	borders [
		left: #(connSource: EAST&MALE) == 2 && #(connSource: WEST&NORTH&MALE) == 0 || #(connSource: WEST&FEMALE) == 2 && #(connSource: EAST&NORTH&FEMALE) == 0; 
		right: #(connSource: EAST&MALE) == 2 && #(connSource: WEST&NORTH&MALE) == 0 || #(connSource: WEST&FEMALE) == 2 && #(connSource: EAST&NORTH&FEMALE) == 0;
		top: #(connSource: EAST&MALE) == 2 && #(connSource: WEST&NORTH&MALE) == 0 || #(connSource: WEST&FEMALE) == 2 && #(connSource: EAST&NORTH&FEMALE) == 0;
		bottom: #(connSource: EAST&MALE) == 2 && #(connSource: WEST&NORTH&MALE) == 0 || #(connSource: WEST&FEMALE) == 2 && #(connSource: EAST&NORTH&FEMALE) == 0;
	]
}

meta {
 	part [NE, NW, SE, SW];	
	
	byte Top;
	byte Bottom;
	byte Left;
	byte Right;
	byte TopLeft;
	byte TopRight;
	byte BottomLeft; 
	byte BottomRight;

	void neighborHook (byte metaID, byte destConn) {
		if (metaID != module.metaID && module.metaID != 0) {
			if (destConn == 5 || destConn == 6) {
				Right = metaID;
			}
		 	if (destConn == 2 || destConn == 7) {
		 		Top = metaID;
		 	}
			if (destConn == 0 || destConn == 3) {
				Left = metaID;
			}
			if (destConn == 1 || destConn == 4) {
				Bottom = metaID;
			}
		}
	}
 		
	void broadcastMetaNeighbors () {
		broadcastMetaNeighborsTo([Top, Bottom], Left, Right);
		broadcastMetaNeighborsTo([Left, Right], Top, Bottom);
	}



 	void broadcastMetaNeighborsTo (byte[] dests, byte v1, byte v2) {
		 unicast AddNeighbor(first = v1, second = v2) to $(metaID: dests, inRegion:false);
 	}
 	
 }



module  {
	byte gradPri;
	byte gradSec;
	boolean isRef;
	boolean sourcePri;
	boolean sourceSec;
	

	
	void gradientPropagate () {		 
		if (sourcePri){
			gradPri = 0;
		}
		
		if (sourceSec) {
			gradSec = 0;
		}
		 unicast Gradient(pri=gradPri, sec=gradSec) to $();
	}
 	

	void gradientInit() {
		sourcePri = region.atPrimaryBorder();
		sourceSec = region.atSecondaryBorder();
		
		gradPri = MAX_BYTE;
		gradSec = MAX_BYTE;			
	}
 }

  
sequence Main {
 	// During a sequence we should not add meta neighbors as the connector numbers can be swapped! So only do this at DEFAULT or INIT operation state
	when (receive (Packet p)) {
		meta.neighborHook (p.connSource,p.connDest);
	}
	
	do {	
		when (receive (AssignMetaID p)) {
			if (module.metaID == 0) {
				module.metaID = p.newMetaID;
				
				if (isMALE(p.connDest) && module.metaPart == null) {
					module.metaPart = Right;
				}
				else if (isWEST(p.connDest) && module.metaPart == null) {
					module.metaPart = Top;
				}
				else if (isEAST(p.connDest) && module.metaPart == null) {
					module.metaPart = Bottom;
				}
			}
			
			if (module.metaPart == Left) {
				break;
			}
			
			unicast AssignMetaID (newMetaID = newMetaID) to $(connSource: pow2((p.connDest + 4) % 8)) rate config.rate;
		}
		when ( #(connSource: EAST&MALE, metaPart:None) == 2 && !#(connSource: WEST, metaPart:None)) {
			module.metaPart = Left;
			meta.id = module.id;
			unicast AssignMetaID (newMetaID = module.id) to $(connSource: EAST&MALE&NORTH);
		}	
	} 

	 meta.enable();
	 
	goto Choose;	
}


sequence Choose {
	when (receive (Packet p)) {
		// During a sequence we should not add meta neighbors as the connector numbers can be swapped! So only do this at DEFAULT or INIT operation state
		meta.neighborHook (p.metaID,p.connDest);
	}
	
	meta.broadcastMetaNeighbors();
	
	do {
		// UP
		try region FlipThrough orientating BOTTOM_RIGHT from Top excluding TopLeft,Left,Bottom;
		try region FlipAlong orientating BOTTOM_RIGHT from Right,TopRight excluding Top;
		try region FlipThrough orientating LEFT_BOTTOM from Right excluding Top, TopRight;
		
		// DIAGONAL DOWN
		try region FlipThrough orientating TOP_RIGHT from Bottom excluding Left, Top;
		try region FlipOver orientating TOP_RIGHT from Bottom,Left excluding Top;
		try region FlipThrough orientating RIGHT_TOP from Left excluding Top,Bottom;
	}	
}



                                                                                        



