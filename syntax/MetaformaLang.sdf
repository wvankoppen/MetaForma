module MetaformaLang

imports Common
imports Exp
imports lexical/MetaformaLang-Identifiers

exports

sorts	Group

  context-free start-symbols
  
    Start
 
  context-free syntax
  
  
  
   ModuleDef Definition*  Decl* 						-> Start {"Start", scope(Include)}
    
    "module" ID 									-> ModuleDef{"Module"}
	
	"meta" "{" PartDecl* VarDecl* FuncDecl* "}" 	-> Definition{"MetaNS"}
	"module" "{" VarDecl* FuncDecl* "}" 			-> Definition{"ModuleNS"}
	
	"void" ID "(" {ListElem ","}* ")" "{" Decl* Stmt* "}"					-> FuncDecl{"FuncDecl"}
	Type ID "(" {ListElem ","}* ")" "{" Decl* Stmt* "return" Exp ";" "}"	-> FuncDecl{"FuncDecl"}
	
	Type ID 			-> ListElem{"Elem"}
	ID					-> Type{avoid}
	
	"packet" ID "{" VarDecl* "}" 					-> Decl{"Packet"}
	FuncDecl -> Decl

	
	Type {ID ","}+ ";" -> VarDecl{"VarDecl"}
	"part" "[" {ID ","}* "]" ";" -> PartDecl{"MetaPartDecl"}
	
	ID 					-> Ref{"VarRef"}
	ID "." ID 			-> Ref{"FieldRef"}
	Obj "." ID 			-> Ref{"FieldRef"}
	Ref "=" Exp			-> Assign{"Assign"}
	{Assign ","}*		-> AssignLst{"AssignList"}
	
	"state" ID "{" VarDecl* FuncDecl* Instr* "}" -> Definition{"State"}
	EvHdlr										 -> Definition
	"when" "(" Event ")" "{" VarDecl* Stmt* "}" -> EvHdlr{"EvHdlr"}
	
	EvHdlr -> Stmt
	
	"receive" "(" ID ID ")" -> Event{"Event"}
	Exp 					-> Event{"Event"}
	"rate" Ref				-> Rate{"Rate"}
	
	"unicast" ID "(" AssignLst ")" "on"  Exp  Rate? ";" -> Stmt{"Unicast"}
	"broadcast" ID "(" AssignLst ")" Rate? ";" -> Stmt{"Broadcast"}
	
	
	
	Ref "=" Exp ";" -> Stmt{"Assign"}
	
	ID  "(" {Exp "," }* ")"   			-> Exp{"FuncCall"}
	ID  "(" {Exp "," }* ")" ";"			-> Stmt{"FuncCall"}
	Obj "." ID 	"(" {Exp "," }* ")" ";"  -> Stmt{"FuncCall"}
	Obj "." ID 	"(" {Exp "," }* ")" 	 -> Exp{"FuncCall"}

	
	"{" Stmt* "}" -> Stmt{"Stmt"}
		
	"if" "(" Exp ")" Stmt "else" Stmt 		-> Stmt{"IfElse"}
	
	"if" "(" Exp ")" Stmt 					-> Stmt{"If"}
		
	Stmt -> Instr
	"goto" ID ";"							-> Stmt{"Goto"}
	"goto" ID "orientating" ID ";"			-> Stmt{"Goto"}
	
	"group" ID "[" {ID ","}* "]" ";"			-> Definition{"Group"}
	"group" ID	";"							-> Definition{"GroupMum"}
	
	"disconnect" "(" ModHolder "," ModHolder ")" ";"			-> Stmt{"Disconnect"}
	"connect" "(" ModHolder "," ModHolder ")" ";"			-> Stmt{"Connect"}
	"rotate" "(" ModHolder "," Exp ")" ";"			-> Stmt{"Rotate"}
	"rotate_continuous" "(" ModHolder "," Exp ")" ";"			-> Stmt{"RotateCont"}
	"stop" "(" ModHolder ")" ";"			-> Stmt{"Stop"}
	
	"for" "(" Type ID ":" ID")" "{" Stmt "}"				-> Stmt{"For"}
	
	"send" Type "(" {Assign ","}* ")"	"to" ID ";"			-> Stmt{"Send"}
	
	
	"wait" -> StopCondition {"Wait"}
	"until" -> StopCondition{"Until"}
	
	context-free priorities
	{
	"@" ID										-> ModHolder{"ModHolder"}
	} > {
	ID "@" ID									-> ModHolder{"ModHolder"}
	}
	
	context-free priorities
	{
		"do" "{" Decl* Stmt* "}" StopCondition "(" Exp ")" ";"  -> Instr{"Instr"}
	} > {
		"do" "{" Decl* Stmt* "}"  -> Instr{"Instr"}		
	}
	
	
	
	