module MetaformaLang

imports 
	Common
	MetaformaLang-Exp
	lexical/MetaformaLang-Identifiers

exports
  sorts MainDef Stmt Receive Sequence Package

  context-free start-symbols    Start
 
  context-free syntax
   	"package" ID Debug? MainDef*						-> Start {"Package"}    
    "debug" "{" ShowPackets? Visualize? "}" -> Debug{"Debug"}
    "show" "[" {PacketRef ","}* "]"	-> ShowPackets{"ShowPackets"}
    
    "visualize" "{" VisGroup*"}" -> Visualize {"Visualize"}
    ID "[" VisItem* "]" 		 -> VisGroup{"VisGroup"}
	ModHolderOrSeqRef ":" ColorRef ";" -> VisItem{"VisItem"}
    
    Color 					-> ColorRef{"Color"}
    ColorCust 				-> ColorRef{"ColorCust"}
    
    ModHolderRef -> ModHolderOrSeqRef
    SequenceRef -> ModHolderOrSeqRef
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Header
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	GroupDef 										-> MainDef
	"group" ID "[" {Mod ","}* "]" 			-> GroupDef{"Group"}
	"group" ID							-> GroupDef{"Group"}
	ID 									-> Mod{"Mod"}

	"meta" "{" PartDecl? FieldDecl* FuncDecl* "}" 		-> MainDef{"Meta"}
	"module" "{" BorderDecl? FieldDecl* FuncDecl* "}" 	-> MainDef{"Module"}
	 
	Type ID "=" Exp									-> MainDef{"ConstDecl"}
	"borders" "[" BorderItem* "]" ";"				-> BorderDecl{"BorderDecl"}
	Border ":" Exp ";" 								-> BorderItem{"BorderItem"}
	BorderName 										-> Border{"Border"}
	
	"orient" 						-> Orient{"Orient"}
	"meta" 							-> Meta{"Meta"}
	"module"						-> Module{"Module"}
	"region"						-> Region{"Region"}
	"config"						-> Config{"Config"}
	
	
	Type ID "(" {ParamListElem ","}* ")" "{" VarDecl* Stmt* "}"	-> FuncDecl{"FuncDecl"}
	Type ID 													-> ParamListElem{"Param"}
	
	"packet" ID "{" FieldDecl* "}" 					-> MainDef{"PacketDecl"}
	
	Type ID ";" 				-> VarDecl{"VarDecl"}
	Type ID "=" Exp ";"			-> VarDecl{"VarDecl"}
	
	Type {ID ","}+ ";" 			-> FieldDecl{"FieldDeclList",prefer}
	Type ID ";" 				-> FieldDecl{"FieldDecl"}

	PacketRef ID 				-> PacketVarDecl{"PacketVarDecl"}

	"parts" "[" {MetaPart ","}+ "]" ";" -> PartDecl{"MetaPartDecl"}
	"parts" INT ";" 					-> PartDecl{"MetaSize"}
	ID 									-> MetaPart{"MetaPart"}
	
	"None" 								-> ID{reject}
	
	MetaPartNoneRef 					-> Exp{"MetaPartNoneRef"}
	
	ID 									-> Ref{"Ref"}
	ID 									-> PayloadRef{"PayloadRef"}
	
	PayloadRef "=" Exp					-> AssignElem{"AssignElem"}
	{AssignElem ","}*					-> AssignList{"AssignList"} 
	
	"send" PacketRef "(" AssignList ")" NbsClause?  ";" -> Stmt{"Send"}
	"to" Nbs	-> NbsClause{"NbsClause"}
	"receive" "(" PacketVarDecl ")" 	-> Receive{"Receive"}
	
	%% For NBL compatibility
	"sequence" ID "{" EvHdlr* Instr* "}" -> MainDef{"Sequence"}
	
	EvHdlr								 		 -> MainDef
	
	"when" "(" Receive ")" "{" VarDecl* Stmt* "}" -> EvHdlr{"EvHdlr"}
	"when" "(" Exp ")" "{" VarDecl* Stmt* "}" 	-> EvHdlr{"If"}

	ID									-> PacketRef {"Packet"}
	PacketPrim							-> PacketRef {"PacketPrim"}
	PacketPrim	-> ID{reject}

	Ref "=" Exp ";" 				-> Stmt{"Assign"}
	"return" Exp ";"				-> Stmt{"Return"}

	Stmt							-> Block{"Block"}
	"{" Stmt* "}" 							-> Block{"Block"}
		
	"if" "(" Exp ")" Block "else" Block 		-> Stmt{"IfElse"}
	"if" "(" Exp ")" Block 						-> Stmt{"If"}
			
		
	OrientName 	-> OrientRef{"OrientRef"}	
	OrientName 	-> ID{reject}	
		
	Stmt -> Instr
	"execute" SequenceRef ";"							-> Stmt{"Execute"}
	"execute" SequenceRef OrientClause ";"				-> Stmt{"ExecuteOrient"}
	"(" OrientRef ")" 				-> OrientClause{"Orientation"}							
	
	"wait" "(" Exp ")" Block		-> Stmt{"Wait"}
	
	"try" Region SequenceRef OrientClause? "including" {MetaFieldRef ","}*  ExcludingClause?  ";" -> Stmt{"TryRegion"}
	"disable" Region ";"			-> Stmt{"RegionDisable"}
	"disable" Meta ";"			-> Stmt{"MetaDisable"}
	
	"enable" Meta ";"			-> Stmt{"MetaEnable"}
	
	"excluding" {MetaFieldRef ","}* -> ExcludingClause{"Excluding"}
	
	 {Exp ","}* 				-> ByteList {"ByteArr"}
	 ID 						-> MetaFieldRef {"MetaFieldRef"}
	 
	"break" ";"		-> Stmt{"Break"}
		
	Exp 			-> ModHolderOrExp
	ModHolderRef 	-> ModHolderOrExp
	
	ID -> FuncRef{"FuncRef"}
	
	SysObj "." ID 					-> MethodRef{"MethodRef"}
%%	Meta "." MetaMethodRef 		-> MethodRef{"MethodPrimRef"}
	Module "." ModuleMethodRef 		-> MethodRef{"MethodPrimRef"}
%%	Region "." RegionMethodRef 		-> MethodRef{"MethodPrimRef"}
	
	
	
	
	SequencePrim						-> SequenceRef{"SequencePrimRef",prefer}
	ID		 							-> SequenceRef{"SequenceRef"}
	
	Module "." AtBorder "(" BorderArg ")" 				-> Exp {"ModuleBorderCheck",prefer}
	Border 							-> BorderArg {"BorderArg"}
	Orient "." OrientPrimSec		-> BorderArg {"BorderArg"}
	
	
	Meta "." MetaFieldID 			-> Ref{"FieldPrimRef"}
	Module "." ModuleFieldID 		-> Ref{"FieldPrimRef"}
	Config "." ConfigFieldID 		-> Ref{"FieldPrimRef"}
	SysObj "." ID					-> Ref{"FieldRef"}
	
	
	PacketVarRef "." PayloadID 						-> Ref{"PayloadPrimRef"}
	PacketVarRef "." ID 						-> Ref{"PayloadRef"}
	VarRef 						-> PacketVarRef
	ID -> VarRef{"Ref"}
	 
	ModuleFieldID 	-> ID{reject}
	MetaFieldID  	-> ID{reject}
	ModuleMethodRef -> ID{reject}
	PayloadID 		-> ID{reject}
	ConfigFieldID	-> ID{reject}
	
	lexical syntax
	%% "Init" 									-> SequencePrim
	"Strategy" 								-> SequencePrim

	"LEFT_BOTTOM"	-> OrientName
	"LEFT_TOP"	-> OrientName
	"RIGHT_BOTTOM"	-> OrientName
	"RIGHT_TOP"	-> OrientName
	"BOTTOM_LEFT"	-> OrientName
	"BOTTOM_RIGHT"	-> OrientName
	"TOP_LEFT"	-> OrientName
	"TOP_RIGHT"	-> OrientName
	BorderName -> OrientName
	
	"TOP"	-> BorderName
	"BOTTOM"-> BorderName
	"LEFT"	-> BorderName
	"RIGHT"	-> BorderName
			
	"None"		-> MetaPartNoneRef
	"Packet" 	-> PacketPrim
	"Discover" 	-> PacketPrim
	"Consensus" -> PacketPrim
	"MetaVarSync"-> PacketPrim
	"Region" 	-> PacketPrim
	"Symmetry" 	-> PacketPrim	
		
	"atBorder"  -> AtBorder 		%% For coloring
	"primary"	-> OrientPrimSec
	"secondary"	-> OrientPrimSec
	"id" 		-> ModuleFieldID 
	"metaID" 	-> ModuleFieldID
	"number" 	-> ModuleFieldID
	"group" 	-> ModuleFieldID
	"metaPart" 	-> ModuleFieldID
	
	"assignTime"		-> ConfigFieldID
	"propagationTime"	-> ConfigFieldID
	
	"regionID" 	-> MetaFieldID
	"size" 		-> MetaFieldID
	"sizeExtra" -> MetaFieldID
	
	"sourceID" 		-> PayloadID 
	"sourceGroup" 	-> PayloadID
	"metaID" 		-> PayloadID
	"regionID" 		-> PayloadID 
	"connOwn"		-> PayloadID
	"connNb" 		-> PayloadID
	
	
	"restoreID"			-> ModuleMethodRef
	"restoreSymmetry"	-> ModuleMethodRef
		
	"fixSymmetry"		-> ModuleMethodRef
	"proximity"			-> ModuleMethodRef
	"tiltX"				-> ModuleMethodRef
	"tiltY"				-> ModuleMethodRef
	"tiltZ"				-> ModuleMethodRef
	"backupID"			-> ModuleMethodRef
	
	
	
	"assignTime" 		-> ConfigFieldID
	
	
	"connect" 			-> FuncActuationRef
	"disconnect" 		-> FuncActuationRef
	"extend"			-> FuncActuationRef
	"extendSet"			-> FuncActuationRef
	"retract" 			-> FuncActuationRef
	"retractSet"		-> FuncActuationRef
	
	"rotate" 			-> FuncActuationRef
	"rotateOrigin"		-> FuncActuationRef
	"rotating"			-> FuncActuationRef
	"rotateAbsolute"	-> FuncActuationRef
	"stop" 				-> FuncActuationRef
	
	
	context-free syntax

	"@X" "[" Exp "]"		-> ModHolderRef{"ModHolderPrimNumRef",prefer}
	"@" ID "[" Exp "]"		-> ModHolderRef{"ModHolderNumRef"}
	"@" ID "." ID			-> ModHolderRef{"ModHolderRef"}
	"@" ID 					-> ModHolderRef{"ModHolderRef"}
	"@X"					-> ModHolderRef{"ModHolderPrimRef",prefer}
	%% "@*"					-> ModHolderRef{"ModHolderAllRef"} FUTURE WORK?
	
	{OrientRef ","}+ -> Exp{"OrientMatch"}
	
	
	MethodRef	"(" {Exp "," }* ")" ";"  -> Stmt{"FuncCall"}
	MethodRef 	"(" {Exp "," }* ")" 	 -> Exp{"FuncCall"}
	
		FuncRef  "(" {Exp "," }* ")" ";"	-> Stmt{"FuncCall"}
		FuncRef  "(" {Exp "," }* ")"   		-> Exp{"FuncCall"}
	FuncPrimRef2 "(" {Exp "," }* ")" ";"		-> Stmt{"FuncCall"}
	FuncPrimRef2 "(" {Exp "," }* ")" 		-> Exp{"FuncCall"}
	
	FuncPrimRef -> FuncPrimRef2{"FuncPrimRef"}
	FuncActuationRef -> FuncRef{"FuncActuationRef"}
	
	FuncPrimRef 	-> FuncRef{reject}

	"do" PreCon? "{" EvHdlr* VarDecl* Stmt* "}" PostCon?  -> Instr{"Instr"}
	
	"wait" "(" Exp ")" -> PreCon {"Wait"}
	"wait" "(" StopCondition ")" ";" -> PostCon {"Wait"}
	"until" "(" StopCondition ")" ";" -> PostCon{"Until"}
	
	"consensus" "(" ")" 	-> StopCondition {"Consensus"}
	Exp						-> StopCondition	
	
		