module names

imports
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/index-library.generated


imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  desugar


signature
  constructors
    Type        : DefDataKind
    Import      : DefDataKind
    Transitive  : ImportAnno
    CurrentFile : ImportAnno

  constructors
    Mod          : Namespace
    Group        : Namespace
    Packet       : Namespace
    Var          : Namespace
    Field        : Namespace
    Class        : Namespace
    Sequence     : Namespace
    Instruction  : Namespace
    Function     : Namespace
    MetaPart     : Namespace
    Payload      : Namespace
    Program      : Namespace
    VisItem      : Namespace
    VisGroup     : Namespace
    EventHandler : Namespace
    Const        : Namespace


rules

  nam-get-definition-keys :
    VisGroup(n, g) -> [n]

  nam-get-definitions :
    VisGroup(n, g) -> [(VisGroup(), [n])]

  nam-annotate-names(|paths__, path__):
    VisGroup(n, g) -> <VisGroup(nam-annotate-def(|path__), id)>

  nam-unique :
    VisGroup(n, g) -> <id>


rules

  nam-get-definition-keys :
    VisItem(n, g, ref, color) -> [n]

  nam-get-definitions :
    VisItem(n, g, ref, color) -> [(VisItem(), [n])]

  nam-annotate-names(|paths__, path__):
    VisItem(n, g, ref, color) -> <VisItem(nam-annotate-def(|path__), id, id, id)>

  nam-unique :
    VisItem(n, g, ref, color) -> <id>


rules

  nam-get-definition-keys :
    ConstDecl(t, n, v) -> [n]

  nam-get-definitions :
    ConstDecl(t, n, v) -> [(Const(), [n])]

  nam-annotate-names(|paths__, path__):
    ConstDecl(t, n, v) -> <ConstDecl(id, nam-annotate-def(|path__), id)>

  nam-unique :
    ConstDecl(t, n, v) -> <id>


rules

  nam-get-scope-types :
    EvHdlr(x, _, _, _) -> [Var()]

  nam-get-definition-keys :
    EvHdlr(x, _, _, _) -> [x]

  nam-get-definitions :
    EvHdlr(x, _, _, _) -> [(EventHandler(), [x])]

  nam-annotate-names(|paths__, path__):
    EvHdlr(x, _, _, _) -> <EvHdlr(nam-annotate-def(|path__), id, id, id)>

  nam-unique :
    EvHdlr(x, _, _, _) -> <id>


rules

  nam-get-scope-types :
    Program(n, _, _, _) -> [ Group()
                           , Packet()
                           , Class()
                           , Sequence()
                           , MetaPart()
                           , EventHandler()
                           , VisItem()
                           , Const()
                           ]

  nam-get-definition-keys :
    Program(n, _, _, _) -> [n]

  nam-get-definitions :
    Program(n, _, _, _) -> [(Program(), [n])]

  nam-annotate-names(|paths__, path__):
    Program(n, _, _, _) -> <Program(nam-annotate-def(|path__), id, id, id)>


rules

  nam-get-scope-types :
    Group(n, _) -> [Mod()]

  nam-get-definition-keys :
    Group(n, _) -> [n]

  nam-get-definitions :
    Group(n, _) -> [(Group(), [n])]

  nam-annotate-names(|paths__, path__):
    Group(n, _) -> <Group(nam-annotate-def(|path__), id)>

  nam-unique :
    Group(n, _) -> <id>


rules

  nam-get-definition-keys :
    Mod(n) -> [n]

  nam-get-definitions :
    Mod(n) -> [(Mod(), [n])]

  nam-annotate-names(|paths__, path__):
    Mod(n) -> <Mod(nam-annotate-def(|path__))>

  nam-unique :
    Mod(n) -> <id>


rules

  nam-get-definition-keys :
    Group(n) -> [n]

  nam-get-definitions :
    Group(n) -> [(Group(), [n])]

  nam-annotate-names(|paths__, path__):
    Group(n) -> <Group(nam-annotate-def(|path__))>

  nam-unique :
    Group(n) -> <id>


rules

  nam-get-scope-types :
    Sequence(SequencePrimRef(n), _, _, _, _, _) -> [ Packet()
                                                   , Var()
                                                   , Instruction()
                                                   , EventHandler()
                                                   ]

  nam-get-definition-keys :
    Sequence(SequencePrimRef(n), _, _, _, _, _) -> [n]

  nam-get-definitions :
    Sequence(SequencePrimRef(n), _, _, _, _, _) -> [(Sequence(), [n])]

  nam-annotate-names(|paths__, path__):
    Sequence(SequencePrimRef(n), _, _, _, _, _) -> <Sequence(
                                                      SequencePrimRef(nam-annotate-def(|path__))
                                                    , id
                                                    , id
                                                    , id
                                                    , id
                                                    , id
                                                    )>

  nam-unique :
    Sequence(SequencePrimRef(n), _, _, _, _, _) -> <id>


rules

  nam-get-scope-types :
    Sequence(SequenceRef(n), _, _, _, _, _) -> [ Packet()
                                               , Var()
                                               , Instruction()
                                               , EventHandler()
                                               ]

  nam-get-definition-keys :
    Sequence(SequenceRef(n), _, _, _, _, _) -> [n]

  nam-get-definitions :
    Sequence(SequenceRef(n), _, _, _, _, _) -> [(Sequence(), [n])]

  nam-annotate-names(|paths__, path__):
    Sequence(SequenceRef(n), _, _, _, _, _) -> <Sequence(
                                                  SequenceRef(nam-annotate-def(|path__))
                                                , id
                                                , id
                                                , id
                                                , id
                                                , id
                                                )>

  nam-unique :
    Sequence(SequenceRef(n), _, _, _, _, _) -> <id>


rules

  nam-get-scope-types :
    Instr(i, _, _, _, _) -> [EventHandler(), Packet()]

  nam-get-definition-keys :
    Instr(i, _, _, _, _) -> [i]

  nam-get-definitions :
    Instr(i, _, _, _, _) -> [(Instruction(), [i])]

  nam-annotate-names(|paths__, path__):
    Instr(i, _, _, _, _) -> <Instr(nam-annotate-def(|path__), id, id, id, id)>

  nam-unique :
    Instr(i, _, _, _, _) -> <id>


rules

  nam-get-uses-keys :
    SequenceRef(n) -> [n]

  nam-get-uses :
    SequenceRef(n) -> [(Sequence(), [n])]

  nam-annotate-names(|paths__, path__):
    SequenceRef(n) -> <SequenceRef(nam-annotate-use(|paths__, Sequence()))>


rules

  nam-get-uses-keys :
    SequencePrimRef(n) -> [n]

  nam-get-uses :
    SequencePrimRef(n) -> [(Sequence(), [n])]

  nam-annotate-names(|paths__, path__):
    SequencePrimRef(n) -> <SequencePrimRef(nam-annotate-use(|paths__, Sequence()))>


rules

  nam-get-scope-types :
    Packet(n, _) -> [Payload(), Field(), Program()]

  nam-get-definition-keys :
    Packet(n, _) -> [n]

  nam-get-definitions :
    Packet(n, _) -> [(Packet(), [n])]

  nam-annotate-names(|paths__, path__):
    Packet(n, _) -> <Packet(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    Packet(n, _) -> <store__> DefData(
                                [namespace__|path__]
                              , Type()
                              , Type(n)
                              )

  type-of :
    Packet(n, _) -> Type(n)

  nam-unique :
    Packet(n, _) -> <id>


rules

  nam-get-definition-keys :
    Receive(VarDecl(PacketRef(p), n)) -> [n]

  nam-get-definitions :
    Receive(VarDecl(PacketRef(p), n)) -> [(Var(), [n])]

  nam-get-uses-keys :
    Receive(VarDecl(PacketRef(p), n)) -> [p]

  nam-get-uses :
    Receive(VarDecl(PacketRef(p), n)) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    Receive(VarDecl(PacketRef(p), n)) -> <Receive(
                                            VarDecl(
                                              PacketRef(nam-annotate-use(|paths__, Packet()))
                                            , nam-annotate-def(|path__)
                                            )
                                          )>

  nam-unique :
    Receive(VarDecl(PacketRef(p), n)) -> <id>


rules

  nam-get-scope-types :
    EvHdlr(
      n
    , Receive(VarDecl(PacketRef(p), n))
    , _
    , _
    ) -> [Payload(), Field(), Var()]

  nam-get-definition-keys :
    EvHdlr(
      n
    , Receive(VarDecl(PacketRef(p), n))
    , _
    , _
    ) -> [n]

  nam-get-definitions :
    EvHdlr(
      n
    , Receive(VarDecl(PacketRef(p), n))
    , _
    , _
    ) -> [(Var(), [n])]

  nam-get-uses-keys :
    EvHdlr(
      n
    , Receive(VarDecl(PacketRef(p), n))
    , _
    , _
    ) -> [p]

  nam-get-uses :
    EvHdlr(
      n
    , Receive(VarDecl(PacketRef(p), n))
    , _
    , _
    ) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    EvHdlr(
      n
    , Receive(VarDecl(PacketRef(p), n))
    , _
    , _
    ) -> <EvHdlr(
            nam-annotate-def(|path__)
          , Receive(
              VarDecl(
                PacketRef(nam-annotate-use(|paths__, Packet()))
              , nam-annotate-def(|path__)
              )
            )
          , id
          , id
          )>

  nam-unique :
    EvHdlr(
      n
    , Receive(VarDecl(PacketRef(p), n))
    , _
    , _
    ) -> <id>


rules

  nam-get-scope-types :
    FuncDecl(n, _, _, _) -> [Payload(), Field(), Var()]

  nam-get-definition-keys :
    FuncDecl(n, _, _, _) -> [n]

  nam-get-definitions :
    FuncDecl(n, _, _, _) -> [(Function(), [n])]

  nam-annotate-names(|paths__, path__):
    FuncDecl(n, _, _, _) -> <FuncDecl(nam-annotate-def(|path__), id, id, id)>

  nam-unique :
    FuncDecl(n, _, _, _) -> <id>


rules

  nam-get-uses-keys :
    Unicast(p, _, _, _) -> [p]

  nam-get-uses :
    Unicast(p, _, _, _) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    Unicast(p, _, _, _) -> <Unicast(
                              nam-annotate-use(|paths__, Packet())
                            , id
                            , id
                            , id
                            )>


rules

  nam-get-uses-keys :
    ModHolderRef(group) -> [group]

  nam-get-uses :
    ModHolderRef(group) -> [(Group(), [group])]

  nam-annotate-names(|paths__, path__):
    ModHolderRef(group) -> <ModHolderRef(nam-annotate-use(|paths__, Group()))>


rules

  nam-get-uses-keys :
    ModHolderRef(group, mod) -> [group, mod]

  nam-get-uses :
    ModHolderRef(group, mod) -> [ (Group(), [group])
                                , (Mod(), [mod])
                                ]

  nam-annotate-names(|paths__, path__):
    ModHolderRef(group, mod) -> <ModHolderRef(
                                   nam-annotate-use(|paths__, Group())
                                 , nam-annotate-use(|paths__, Mod())
                                 )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    ModHolderRef(group, mod) -> [ [Group()|path__]
                                , [Mod()|path__]
                                ]
    where <target__> group


rules

  nam-get-uses-keys :
    ModHolderRef("Floor") -> ["Floor"]

  nam-get-uses :
    ModHolderRef("Floor") -> [(Group(), ["Floor"])]

  nam-annotate-names(|paths__, path__):
    ModHolderRef("Floor") -> <ModHolderRef(nam-annotate-use(|paths__, Group()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    ModHolderRef("Floor") -> [Def([Group(), "Floor"])]
    where <target__> "Floor"


rules

  nam-get-definition-keys :
    VarDecl(t, n) -> [n]

  nam-get-definitions :
    VarDecl(t, n) -> [(Var(), [n])]

  nam-annotate-names(|paths__, path__):
    VarDecl(t, n) -> <VarDecl(id, nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    VarDecl(t, n) -> <store__> DefData(
                                 [namespace__|path__]
                               , Type()
                               , t
                               )

  type-of :
    VarDecl(t, n) -> t

  nam-unique :
    VarDecl(t, n) -> <id>


rules

  nam-get-definition-keys :
    PacketVarDecl(t, n) -> [n]

  nam-get-definitions :
    PacketVarDecl(t, n) -> [(Var(), [n])]

  nam-annotate-names(|paths__, path__):
    PacketVarDecl(t, n) -> <PacketVarDecl(id, nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    PacketVarDecl(t, n) -> <store__> DefData(
                                       [namespace__|path__]
                                     , Type()
                                     , t
                                     )

  type-of :
    PacketVarDecl(t, n) -> t

  nam-unique :
    PacketVarDecl(t, n) -> <id>


rules

  nam-get-definition-keys :
    Param(t, x) -> [x]

  nam-get-definitions :
    Param(t, x) -> [(Var(), [x])]

  nam-annotate-names(|paths__, path__):
    Param(t, x) -> <Param(id, nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    Param(t, x) -> <store__> DefData(
                               [namespace__|path__]
                             , Type()
                             , t
                             )

  type-of :
    Param(t, x) -> t

  nam-unique :
    Param(t, x) -> <id>


rules

  nam-get-uses-keys :
    FuncRef(n) -> [n]

  nam-get-uses :
    FuncRef(n) -> [(Function(), [n])]

  nam-annotate-names(|paths__, path__):
    FuncRef(n) -> <FuncRef(nam-annotate-use(|paths__, Function()))>


rules

  nam-get-uses-keys :
    MethodRef(Actuation(), n) -> [n, "disconnect"]

  nam-get-uses :
    MethodRef(Actuation(), n) -> [ (Function(), [n])
                                 , (Function(), ["disconnect"])
                                 ]

  nam-annotate-names(|paths__, path__):
    MethodRef(Actuation(), n) -> <MethodRef(
                                    Actuation()
                                  , nam-annotate-use(|paths__, Function())
                                  )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    MethodRef(Actuation(), n) -> <concat> [ [[Function()|path__]]
                                          , [Def([Function(), "disconnect"])]
                                          ]
    where <target__> n


rules

  nam-get-uses-keys :
    MethodRef(obj, n) -> [n]
    where Type(c) := <type-of> obj

  nam-get-uses :
    MethodRef(obj, n) -> [(Function(), [n])]
    where Type(c) := <type-of> obj

  nam-annotate-names(|paths__, path__):
    MethodRef(obj, n) -> <MethodRef(id, nam-annotate-use(|paths__, Function()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    MethodRef(obj, n) -> <index-lookup-children(|Function(), prefix__)> c
    where <target__> n
    where Type(c) := <type-of> obj


rules

  nam-get-definition-keys :
    FieldDecl(t, n) -> [n]

  nam-get-definitions :
    FieldDecl(t, n) -> [(Field(), [n])]

  nam-annotate-names(|paths__, path__):
    FieldDecl(t, n) -> <FieldDecl(id, nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    FieldDecl(t, n) -> <store__> DefData(
                                   [namespace__|path__]
                                 , Type()
                                 , t
                                 )

  type-of :
    FieldDecl(t, n) -> t

  nam-unique :
    FieldDecl(t, n) -> <id>


rules

  nam-get-definition-keys :
    PayloadDecl(_, n) -> [n]

  nam-get-definitions :
    PayloadDecl(_, n) -> [(Payload(), [n])]

  nam-annotate-names(|paths__, path__):
    PayloadDecl(_, n) -> <PayloadDecl(id, nam-annotate-def(|path__))>

  nam-unique :
    PayloadDecl(_, n) -> <id>


rules

  nam-get-uses-keys :
    PacketRef(p) -> [p]

  nam-get-uses :
    PacketRef(p) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    PacketRef(p) -> <PacketRef(nam-annotate-use(|paths__, Packet()))>


rules

  nam-get-uses-keys :
    PayloadRef(n) -> [n]

  nam-get-uses :
    PayloadRef(n) -> [(Payload(), [n])]

  nam-annotate-names(|paths__, path__):
    PayloadRef(n) -> <PayloadRef(nam-annotate-use(|paths__, Payload()))>


rules

  nam-get-uses-keys :
    VarRef(n) -> [n]

  nam-get-uses :
    VarRef(n) -> [ (Var(), [n])
                 , (Field(), [n])
                 , (MetaPart(), [n])
                 , (Const(), [n])
                 ]

  nam-annotate-names(|paths__, path__):
    VarRef(n) -> <VarRef(nam-annotate-use(|paths__, Var()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    VarRef(n) -> [ [Var()|path__]
                 , [Field()|path__]
                 , [MetaPart()|path__]
                 , [Const()|path__]
                 ]
    where <target__> n


rules

  nam-get-uses-keys :
    MethodRef(Region(), "atPrimaryBorder") -> ["atPrimaryBorder"]

  nam-get-uses :
    MethodRef(Region(), "atPrimaryBorder") -> [(Function(), ["atPrimaryBorder"])]

  nam-annotate-names(|paths__, path__):
    MethodRef(Region(), "atPrimaryBorder") -> <MethodRef(
                                                 Region()
                                               , nam-annotate-use(|paths__, Function())
                                               )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    MethodRef(Region(), "atPrimaryBorder") -> [Def([Function(), "atPrimaryBorder"])]
    where <target__> "atPrimaryBorder"


rules

  nam-get-uses-keys :
    PrimRefPacket(v, p) -> ["connSource"]

  nam-get-uses :
    PrimRefPacket(v, p) -> [(Payload(), ["connSource"])]

  nam-annotate-names(|paths__, path__):
    PrimRefPacket(v, p) -> <PrimRefPacket(id, id)>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    PrimRefPacket(v, p) -> [Def([Payload(), "connSource"])]
    where <target__> "connSource"


rules

  nam-get-uses-keys :
    FieldRef(c, n) -> [n]
    where Type(cl) := <type-of> c

  nam-get-uses :
    FieldRef(c, n) -> [ (Field(), [n])
                      , (Payload(), [n])
                      ]
    where Type(cl) := <type-of> c

  nam-annotate-names(|paths__, path__):
    FieldRef(c, n) -> <FieldRef(id, nam-annotate-use(|paths__, Field()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    FieldRef(c, n) -> <concat> [ <index-lookup-children(|Field(), prefix__)> cl
                               , <index-lookup-children(|Payload(), prefix__)> cl
                               ]
    where <target__> n
    where Type(cl) := <type-of> c


rules

  nam-get-scope-types :
    Class(n, _, _) -> [ Payload()
                      , Field()
                      , Var()
                      , Function()
                      ]

  nam-get-definition-keys :
    Class(n, _, _) -> [n]

  nam-get-definitions :
    Class(n, _, _) -> [(Class(), [n])]

  nam-annotate-names(|paths__, path__):
    Class(n, _, _) -> <Class(nam-annotate-def(|path__), id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    Class(n, _, _) -> <store__> DefData(
                                  [namespace__|path__]
                                , Type()
                                , Type(n)
                                )

  type-of :
    Class(n, _, _) -> Type(n)

  nam-unique :
    Class(n, _, _) -> <id>


rules

  nam-get-scope-types :
    Class(n, _) -> [ Payload()
                   , Field()
                   , Var()
                   , Function()
                   ]

  nam-get-definition-keys :
    Class(n, _) -> [n]

  nam-get-definitions :
    Class(n, _) -> [(Class(), [n])]

  nam-annotate-names(|paths__, path__):
    Class(n, _) -> <Class(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    Class(n, _) -> <store__> DefData(
                               [namespace__|path__]
                             , Type()
                             , Type(n)
                             )

  type-of :
    Class(n, _) -> Type(n)

  nam-unique :
    Class(n, _) -> <id>


rules

  nam-get-definition-keys :
    MetaPart(n) -> [n]

  nam-get-definitions :
    MetaPart(n) -> [(MetaPart(), [n])]

  nam-annotate-names(|paths__, path__):
    MetaPart(n) -> <MetaPart(nam-annotate-def(|path__))>

  nam-unique :
    MetaPart(n) -> <id>