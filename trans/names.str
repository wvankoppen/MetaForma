module names

imports
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/index-library.generated


imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front


signature
  constructors
    Type        : DefDataKind
    Import      : DefDataKind
    Transitive  : ImportAnno
    CurrentFile : ImportAnno

  constructors
    Mod          : Namespace
    Group        : Namespace
    GroupNum     : Namespace
    Packet       : Namespace
    Var          : Namespace
    Field        : Namespace
    Class        : Namespace
    State        : Namespace
    Instruction  : Namespace
    Function     : Namespace
    MetaPart     : Namespace
    Payload      : Namespace
    Program      : Namespace
    VisItem      : Namespace
    VisGroup     : Namespace
    EventHandler : Namespace


rules

  nam-get-definition-keys :
    VisGroup(n, g) -> [n]

  nam-get-definitions :
    VisGroup(n, g) -> [(VisGroup(), [n])]

  nam-annotate-names(|paths__, path__):
    VisGroup(n, g) -> <VisGroup(nam-annotate-def(|path__), id)>

  nam-unique :
    VisGroup(n, g) -> <id>


rules

  nam-get-scope-types :
    Program(n, _, _, _) -> [ Group()
                           , Packet()
                           , Class()
                           , State()
                           , Function()
                           , MetaPart()
                           , EventHandler()
                           ]

  nam-get-definition-keys :
    Program(n, _, _, _) -> [n]

  nam-get-definitions :
    Program(n, _, _, _) -> [(Program(), [n])]

  nam-annotate-names(|paths__, path__):
    Program(n, _, _, _) -> <Program(nam-annotate-def(|path__), id, id, id)>


rules

  nam-get-scope-types :
    Group(n, _) -> [Mod()]

  nam-get-definition-keys :
    Group(n, _) -> [n]

  nam-get-definitions :
    Group(n, _) -> [(Group(), [n])]

  nam-annotate-names(|paths__, path__):
    Group(n, _) -> <Group(nam-annotate-def(|path__), id)>

  nam-unique :
    Group(n, _) -> <id>


rules

  nam-get-definition-keys :
    Mod(g, n) -> [n]

  nam-get-definitions :
    Mod(g, n) -> [(Mod(), [n])]

  nam-annotate-names(|paths__, path__):
    Mod(g, n) -> <Mod(id, nam-annotate-def(|path__))>

  nam-unique :
    Mod(g, n) -> <id>


rules

  nam-get-definition-keys :
    GroupNum(n) -> [n]

  nam-get-definitions :
    GroupNum(n) -> [(GroupNum(), [n])]

  nam-annotate-names(|paths__, path__):
    GroupNum(n) -> <GroupNum(nam-annotate-def(|path__))>

  nam-unique :
    GroupNum(n) -> <id>


rules

  nam-get-scope-types :
    State(n, _, _, _, _) -> [Packet(), Var(), Instruction()]

  nam-get-definition-keys :
    State(n, _, _, _, _) -> [n]

  nam-get-definitions :
    State(n, _, _, _, _) -> [(State(), [n])]

  nam-annotate-names(|paths__, path__):
    State(n, _, _, _, _) -> <State(nam-annotate-def(|path__), id, id, id, id)>

  nam-unique :
    State(n, _, _, _, _) -> <id>


rules

  nam-get-scope-types :
    Instr(i, _, _, _) -> [EventHandler()]

  nam-get-definition-keys :
    Instr(i, _, _, _) -> [i]

  nam-get-definitions :
    Instr(i, _, _, _) -> [(Instruction(), [i])]

  nam-annotate-names(|paths__, path__):
    Instr(i, _, _, _) -> <Instr(nam-annotate-def(|path__), id, id, id)>

  nam-unique :
    Instr(i, _, _, _) -> <id>


rules

  nam-get-uses-keys :
    StateRef(n) -> [n]

  nam-get-uses :
    StateRef(n) -> [(State(), [n])]

  nam-annotate-names(|paths__, path__):
    StateRef(n) -> <StateRef(nam-annotate-use(|paths__, State()))>


rules

  nam-get-scope-types :
    Packet(n, _) -> [ Payload()
                    , Field()
                    , Var()
                    , Program()
                    ]

  nam-get-definition-keys :
    Packet(n, _) -> [n]

  nam-get-definitions :
    Packet(n, _) -> [(Packet(), [n])]

  nam-annotate-names(|paths__, path__):
    Packet(n, _) -> <Packet(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    Packet(n, _) -> <store__> DefData(
                                [namespace__|path__]
                              , Type()
                              , Type(n)
                              )

  type-of :
    Packet(n, _) -> Type(n)

  nam-unique :
    Packet(n, _) -> <id>


rules

  nam-get-scope-types :
    Receive(PacketRef(p), n) -> [Payload(), Field(), Var()]

  nam-get-definition-keys :
    Receive(PacketRef(p), n) -> [n]

  nam-get-definitions :
    Receive(PacketRef(p), n) -> [(Var(), [n])]

  nam-get-uses-keys :
    Receive(PacketRef(p), n) -> [p]

  nam-get-uses :
    Receive(PacketRef(p), n) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    Receive(PacketRef(p), n) -> <Receive(
                                   PacketRef(nam-annotate-use(|paths__, Packet()))
                                 , nam-annotate-def(|path__)
                                 )>

  nam-unique :
    Receive(PacketRef(p), n) -> <id>


rules

  nam-get-scope-types :
    FuncDecl(n, _, _, _) -> [Payload(), Field(), Var()]

  nam-get-definition-keys :
    FuncDecl(n, _, _, _) -> [n]

  nam-get-definitions :
    FuncDecl(n, _, _, _) -> [(Function(), [n])]

  nam-annotate-names(|paths__, path__):
    FuncDecl(n, _, _, _) -> <FuncDecl(nam-annotate-def(|path__), id, id, id)>

  nam-unique :
    FuncDecl(n, _, _, _) -> <id>


rules

  nam-get-uses-keys :
    Broadcast(p, _, _) -> [p]

  nam-get-uses :
    Broadcast(p, _, _) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    Broadcast(p, _, _) -> <Broadcast(
                             nam-annotate-use(|paths__, Packet())
                           , id
                           , id
                           )>


rules

  nam-get-uses-keys :
    ModHolderRef(m, ug) -> [m]
    where Def([Group()|g]) := <index-find-key ; index-lookup> ug

  nam-get-uses :
    ModHolderRef(m, ug) -> [(Mod(), [m])]
    where Def([Group()|g]) := <index-find-key ; index-lookup> ug

  nam-annotate-names(|paths__, path__):
    ModHolderRef(m, ug) -> <ModHolderRef(nam-annotate-use(|paths__, Mod()), id)>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    ModHolderRef(m, ug) -> <index-lookup-children(|Mod(), prefix__)> g
    where <target__> m
    where Def([Group()|g]) := <index-find-key ; index-lookup> ug


rules

  nam-get-definition-keys :
    VarDecl(_, n) -> [n]

  nam-get-definitions :
    VarDecl(_, n) -> [(Var(), [n])]

  nam-annotate-names(|paths__, path__):
    VarDecl(_, n) -> <VarDecl(id, nam-annotate-def(|path__))>

  nam-unique :
    VarDecl(_, n) -> <id>


rules

  nam-get-definition-keys :
    Param(t, x) -> [x]

  nam-get-definitions :
    Param(t, x) -> [(Var(), [x])]

  nam-annotate-names(|paths__, path__):
    Param(t, x) -> <Param(id, nam-annotate-def(|path__))>

  nam-unique :
    Param(t, x) -> <id>


rules

  nam-get-uses-keys :
    FuncCall(MethodRef(obj, n), args) -> [n]
    where Type(c) := <type-of> obj

  nam-get-uses :
    FuncCall(MethodRef(obj, n), args) -> [(Function(), [n])]
    where Type(c) := <type-of> obj

  nam-annotate-names(|paths__, path__):
    FuncCall(MethodRef(obj, n), args) -> <FuncCall(
                                            MethodRef(id, nam-annotate-use(|paths__, Function()))
                                          , id
                                          )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    FuncCall(MethodRef(obj, n), args) -> <index-lookup-children(|Function(), prefix__)> c
    where <target__> n
    where Type(c) := <type-of> obj


rules

  nam-get-definition-keys :
    FieldDecl(_, n) -> [n]

  nam-get-definitions :
    FieldDecl(_, n) -> [(Field(), [n])]

  nam-annotate-names(|paths__, path__):
    FieldDecl(_, n) -> <FieldDecl(id, nam-annotate-def(|path__))>

  nam-unique :
    FieldDecl(_, n) -> <id>


rules

  nam-get-definition-keys :
    PayloadDecl(_, n) -> [n]

  nam-get-definitions :
    PayloadDecl(_, n) -> [(Payload(), [n])]

  nam-annotate-names(|paths__, path__):
    PayloadDecl(_, n) -> <PayloadDecl(id, nam-annotate-def(|path__))>

  nam-unique :
    PayloadDecl(_, n) -> <id>


rules

  nam-get-scope-types :
    PacketRef(p) -> [Payload(), Field(), Var()]

  nam-get-uses-keys :
    PacketRef(p) -> [p]

  nam-get-uses :
    PacketRef(p) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    PacketRef(p) -> <PacketRef(nam-annotate-use(|paths__, Packet()))>


rules

  nam-get-uses-keys :
    PayloadRef(n) -> [n]

  nam-get-uses :
    PayloadRef(n) -> [(Payload(), [n])]

  nam-annotate-names(|paths__, path__):
    PayloadRef(n) -> <PayloadRef(nam-annotate-use(|paths__, Payload()))>


rules

  nam-get-uses-keys :
    VarRef(n) -> [n]

  nam-get-uses :
    VarRef(n) -> [ (Var(), [n])
                 , (Field(), [n])
                 , (MetaPart(), [n])
                 ]

  nam-annotate-names(|paths__, path__):
    VarRef(n) -> <VarRef(nam-annotate-use(|paths__, Var()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    VarRef(n) -> [ [Var()|path__]
                 , [Field()|path__]
                 , [MetaPart()|path__]
                 ]
    where <target__> n


rules

  nam-get-uses-keys :
    FieldRef(c, n) -> [n]
    where Type(p) := <type-of> c

  nam-get-uses :
    FieldRef(c, n) -> [(Field(), [n])]
    where Type(p) := <type-of> c

  nam-annotate-names(|paths__, path__):
    FieldRef(c, n) -> <FieldRef(id, nam-annotate-use(|paths__, Field()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    FieldRef(c, n) -> <index-lookup-children(|Field(), prefix__)> c
    where <target__> n
    where Type(p) := <type-of> c


rules

  nam-get-scope-types :
    Class(n, _, _) -> [ Payload()
                      , Field()
                      , Var()
                      , Function()
                      ]

  nam-get-definition-keys :
    Class(n, _, _) -> [n]

  nam-get-definitions :
    Class(n, _, _) -> [(Class(), [n])]

  nam-annotate-names(|paths__, path__):
    Class(n, _, _) -> <Class(nam-annotate-def(|path__), id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    Class(n, _, _) -> <store__> DefData(
                                  [namespace__|path__]
                                , Type()
                                , Type(n)
                                )

  type-of :
    Class(n, _, _) -> Type(n)

  nam-unique :
    Class(n, _, _) -> <id>


rules

  nam-get-scope-types :
    Instr(_, _, _, _) -> [Packet()]


rules

  nam-get-definition-keys :
    MetaPart(n) -> [n]

  nam-get-definitions :
    MetaPart(n) -> [(MetaPart(), [n])]

  nam-annotate-names(|paths__, path__):
    MetaPart(n) -> <MetaPart(nam-annotate-def(|path__))>

  nam-unique :
    MetaPart(n) -> <id>