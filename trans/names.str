module names

imports
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/index-library.generated


imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  desugar


signature
  constructors
    Type        : DefDataKind
    Import      : DefDataKind
    Transitive  : ImportAnno
    CurrentFile : ImportAnno

  constructors
    Package      : Namespace
    Group        : Namespace
    Mod          : Namespace
    Var          : Namespace
    Packet       : Namespace
    Payload      : Namespace
    Sequence     : Namespace
    Instruction  : Namespace
    Class        : Namespace
    ClassFake    : Namespace
    Field        : Namespace
    Method       : Namespace
    MetaPart     : Namespace
    DebugItem    : Namespace
    VisItem      : Namespace
    Constant     : Namespace
    EventHandler : Namespace


rules

  nam-get-scope-types :
    Package(n, _, _) -> [ Group()
                        , Packet()
                        , Class()
                        , ClassFake()
                        , Sequence()
                        , MetaPart()
                        , EventHandler()
                        , VisItem()
                        , Constant()
                        , DebugItem()
                        ]

  nam-get-definition-keys :
    Package(n, _, _) -> [n]

  nam-get-definitions :
    Package(n, _, _) -> [(Package(), [n])]

  nam-annotate-names(|paths__, path__):
    Package(n, _, _) -> <Package(nam-annotate-def(|path__), id, id)>


rules

  nam-get-definition-keys :
    DebugItem(n, packets) -> [n]

  nam-get-definitions :
    DebugItem(n, packets) -> [(DebugItem(), [n])]

  nam-annotate-names(|paths__, path__):
    DebugItem(n, packets) -> <DebugItem(nam-annotate-def(|path__), id)>

  nam-unique :
    DebugItem(n, packets) -> <id>


rules

  nam-get-definition-keys :
    VisItem(n, g, ref, color) -> [n]

  nam-get-definitions :
    VisItem(n, g, ref, color) -> [(VisItem(), [n])]

  nam-annotate-names(|paths__, path__):
    VisItem(n, g, ref, color) -> <VisItem(nam-annotate-def(|path__), id, id, id)>

  nam-unique :
    VisItem(n, g, ref, color) -> <id>


rules

  nam-get-definition-keys :
    ConstDecl(t, n, v) -> [n]

  nam-get-definitions :
    ConstDecl(t, n, v) -> [(Constant(), [n])]

  nam-annotate-names(|paths__, path__):
    ConstDecl(t, n, v) -> <ConstDecl(id, nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    ConstDecl(t, n, v) -> <store__> DefData(
                                      [namespace__|path__]
                                    , Type()
                                    , t
                                    )

  type-of :
    ConstDecl(t, n, v) -> t

  nam-unique :
    ConstDecl(t, n, v) -> <id>


rules

  nam-get-scope-types :
    Group(n, _) -> [Mod()]

  nam-get-definition-keys :
    Group(n, _) -> [n]

  nam-get-definitions :
    Group(n, _) -> [(Group(), [n])]

  nam-annotate-names(|paths__, path__):
    Group(n, _) -> <Group(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    Group(n, _) -> <store__> DefData(
                               [namespace__|path__]
                             , Type()
                             , Group()
                             )

  type-of :
    Group(n, _) -> Group()

  nam-unique :
    Group(n, _) -> <id>


rules

  nam-get-definition-keys :
    Mod(n) -> [n]

  nam-get-definitions :
    Mod(n) -> [(Mod(), [n])]

  nam-annotate-names(|paths__, path__):
    Mod(n) -> <Mod(nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    Mod(n) -> <store__> DefData(
                          [namespace__|path__]
                        , Type()
                        , Mod()
                        )

  type-of :
    Mod(n) -> Mod()

  nam-unique :
    Mod(n) -> <id>


rules

  nam-get-definition-keys :
    Group(n) -> [n]

  nam-get-definitions :
    Group(n) -> [(Group(), [n])]

  nam-annotate-names(|paths__, path__):
    Group(n) -> <Group(nam-annotate-def(|path__))>

  nam-unique :
    Group(n) -> <id>


rules

  nam-get-scope-types :
    Sequence(n, _, _, _) -> [Var(), Instruction(), EventHandler()]

  nam-get-definition-keys :
    Sequence(n, _, _, _) -> [n]

  nam-get-definitions :
    Sequence(n, _, _, _) -> [(Sequence(), [n])]

  nam-annotate-names(|paths__, path__):
    Sequence(n, _, _, _) -> <Sequence(nam-annotate-def(|path__), id, id, id)>

  nam-unique :
    Sequence(n, _, _, _) -> <id>


rules

  nam-get-scope-types :
    Instr(i, _, _, _, _) -> [EventHandler()]

  nam-get-definition-keys :
    Instr(i, _, _, _, _) -> [i]

  nam-get-definitions :
    Instr(i, _, _, _, _) -> [(Instruction(), [i])]

  nam-annotate-names(|paths__, path__):
    Instr(i, _, _, _, _) -> <Instr(nam-annotate-def(|path__), id, id, id, id)>

  nam-unique :
    Instr(i, _, _, _, _) -> <id>


rules

  nam-get-uses-keys :
    SequenceRef(n) -> [n]

  nam-get-uses :
    SequenceRef(n) -> [(Sequence(), [n])]

  nam-annotate-names(|paths__, path__):
    SequenceRef(n) -> <SequenceRef(nam-annotate-use(|paths__, Sequence()))>


rules

  nam-get-uses-keys :
    SequencePrimRef(n) -> [n]

  nam-get-uses :
    SequencePrimRef(n) -> [(Sequence(), [n])]

  nam-annotate-names(|paths__, path__):
    SequencePrimRef(n) -> <SequencePrimRef(nam-annotate-use(|paths__, Sequence()))>


rules

  nam-get-scope-types :
    PacketDecl(n, _) -> [Payload()]

  nam-get-definition-keys :
    PacketDecl(n, _) -> [n]

  nam-get-definitions :
    PacketDecl(n, _) -> [(Packet(), [n])]

  nam-annotate-names(|paths__, path__):
    PacketDecl(n, _) -> <PacketDecl(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    PacketDecl(n, _) -> <store__> DefData(
                                    [namespace__|path__]
                                  , Type()
                                  , Packet(n)
                                  )

  type-of :
    PacketDecl(n, _) -> Packet(n)

  nam-unique :
    PacketDecl(n, _) -> <id>


rules

  nam-get-definition-keys :
    Receive(VarDecl(Packet(p), n)) -> [n]

  nam-get-definitions :
    Receive(VarDecl(Packet(p), n)) -> [(Var(), [n])]

  nam-get-uses-keys :
    Receive(VarDecl(Packet(p), n)) -> [p]

  nam-get-uses :
    Receive(VarDecl(Packet(p), n)) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    Receive(VarDecl(Packet(p), n)) -> <Receive(
                                         VarDecl(
                                           Packet(nam-annotate-use(|paths__, Packet()))
                                         , nam-annotate-def(|path__)
                                         )
                                       )>

  nam-unique :
    Receive(VarDecl(Packet(p), n)) -> <id>


rules

  nam-get-scope-types :
    EvHdlr(
      n
    , Receive(VarDecl(Packet(p), n))
    , _
    , _
    ) -> [Var()]

  nam-get-definition-keys :
    EvHdlr(
      n
    , Receive(VarDecl(Packet(p), n))
    , _
    , _
    ) -> [n]

  nam-get-definitions :
    EvHdlr(
      n
    , Receive(VarDecl(Packet(p), n))
    , _
    , _
    ) -> [(Var(), [n])]

  nam-get-uses-keys :
    EvHdlr(
      n
    , Receive(VarDecl(Packet(p), n))
    , _
    , _
    ) -> [p]

  nam-get-uses :
    EvHdlr(
      n
    , Receive(VarDecl(Packet(p), n))
    , _
    , _
    ) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    EvHdlr(
      n
    , Receive(VarDecl(Packet(p), n))
    , _
    , _
    ) -> <EvHdlr(
            nam-annotate-def(|path__)
          , Receive(
              VarDecl(
                Packet(nam-annotate-use(|paths__, Packet()))
              , nam-annotate-def(|path__)
              )
            )
          , id
          , id
          )>

  nam-unique :
    EvHdlr(
      n
    , Receive(VarDecl(Packet(p), n))
    , _
    , _
    ) -> <id>


rules

  nam-get-scope-types :
    EvHdlr(x, _, _, _) -> [Var()]

  nam-get-definition-keys :
    EvHdlr(x, _, _, _) -> [x]

  nam-get-definitions :
    EvHdlr(x, _, _, _) -> [(EventHandler(), [x])]

  nam-annotate-names(|paths__, path__):
    EvHdlr(x, _, _, _) -> <EvHdlr(nam-annotate-def(|path__), id, id, id)>

  nam-unique :
    EvHdlr(x, _, _, _) -> <id>


rules

  nam-get-scope-types :
    FuncDecl(t, n, _, _, _) -> [Field(), Var()]

  nam-get-definition-keys :
    FuncDecl(t, n, _, _, _) -> [n]

  nam-get-definitions :
    FuncDecl(t, n, _, _, _) -> [(Method(), [n])]

  nam-annotate-names(|paths__, path__):
    FuncDecl(t, n, _, _, _) -> <FuncDecl(id, nam-annotate-def(|path__), id, id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    FuncDecl(t, n, _, _, _) -> <store__> DefData(
                                           [namespace__|path__]
                                         , Type()
                                         , t
                                         )

  type-of :
    FuncDecl(t, n, _, _, _) -> t

  nam-unique :
    FuncDecl(t, n, _, _, _) -> <id>


rules

  nam-get-uses-keys :
    Unicast(Packet(p), _, _) -> [p]

  nam-get-uses :
    Unicast(Packet(p), _, _) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    Unicast(Packet(p), _, _) -> <Unicast(
                                   Packet(nam-annotate-use(|paths__, Packet()))
                                 , id
                                 , id
                                 )>


rules

  nam-get-uses-keys :
    ModHolderNumRef(group, i) -> [group]

  nam-get-uses :
    ModHolderNumRef(group, i) -> [(Group(), [group])]

  nam-annotate-names(|paths__, path__):
    ModHolderNumRef(group, i) -> <ModHolderNumRef(nam-annotate-use(|paths__, Group()), id)>


rules

  nam-get-uses-keys :
    ModHolderRef(group) -> [group]

  nam-get-uses :
    ModHolderRef(group) -> [(Group(), [group])]

  nam-annotate-names(|paths__, path__):
    ModHolderRef(group) -> <ModHolderRef(nam-annotate-use(|paths__, Group()))>


rules

  nam-get-uses-keys :
    ModHolderRef(group, mod) -> [group, mod]

  nam-get-uses :
    ModHolderRef(group, mod) -> [ (Group(), [group])
                                , (Mod(), [mod])
                                ]

  nam-annotate-names(|paths__, path__):
    ModHolderRef(group, mod) -> <ModHolderRef(
                                   nam-annotate-use(|paths__, Group())
                                 , nam-annotate-use(|paths__, Mod())
                                 )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    ModHolderRef(group, mod) -> [ [Group()|path__]
                                , [Mod()|path__]
                                ]
    where <target__> group


rules

  nam-get-definition-keys :
    VarDecl(t, n, v) -> [n]

  nam-get-definitions :
    VarDecl(t, n, v) -> [(Var(), [n])]

  nam-annotate-names(|paths__, path__):
    VarDecl(t, n, v) -> <VarDecl(id, nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    VarDecl(t, n, v) -> <store__> DefData(
                                    [namespace__|path__]
                                  , Type()
                                  , t
                                  )

  type-of :
    VarDecl(t, n, v) -> t

  nam-unique :
    VarDecl(t, n, v) -> <id>


rules

  nam-get-definition-keys :
    PacketVarDecl(packetref, n) -> [n]

  nam-get-definitions :
    PacketVarDecl(packetref, n) -> [(Var(), [n])]

  nam-annotate-names(|paths__, path__):
    PacketVarDecl(packetref, n) -> <PacketVarDecl(id, nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    PacketVarDecl(packetref, n) -> <store__> DefData(
                                               [namespace__|path__]
                                             , Type()
                                             , packetref
                                             )

  type-of :
    PacketVarDecl(packetref, n) -> packetref

  nam-unique :
    PacketVarDecl(packetref, n) -> <id>


rules

  nam-get-definition-keys :
    Param(t, x) -> [x]

  nam-get-definitions :
    Param(t, x) -> [(Var(), [x])]

  nam-annotate-names(|paths__, path__):
    Param(t, x) -> <Param(id, nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    Param(t, x) -> <store__> DefData(
                               [namespace__|path__]
                             , Type()
                             , t
                             )

  type-of :
    Param(t, x) -> t

  nam-unique :
    Param(t, x) -> <id>


rules

  nam-get-uses-keys :
    FuncRef(n) -> [n]

  nam-get-uses :
    FuncRef(n) -> [(Method(), [n])]

  nam-annotate-names(|paths__, path__):
    FuncRef(n) -> <FuncRef(nam-annotate-use(|paths__, Method()))>


rules

  nam-get-uses-keys :
    MethodRef(obj, n) -> [n]

  nam-get-uses :
    MethodRef(obj, n) -> [(Method(), [n])]

  nam-annotate-names(|paths__, path__):
    MethodRef(obj, n) -> <MethodRef(id, nam-annotate-use(|paths__, Method()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    MethodRef(obj, n) -> <index-lookup-children(|Method(), prefix__)> obj
    where <target__> n


rules

  nam-get-definition-keys :
    FieldDecl(t, n) -> [n]

  nam-get-definitions :
    FieldDecl(t, n) -> [(Field(), [n])]

  nam-annotate-names(|paths__, path__):
    FieldDecl(t, n) -> <FieldDecl(id, nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    FieldDecl(t, n) -> <store__> DefData(
                                   [namespace__|path__]
                                 , Type()
                                 , t
                                 )

  type-of :
    FieldDecl(t, n) -> t

  nam-unique :
    FieldDecl(t, n) -> <id>


rules

  nam-get-definition-keys :
    PayloadDecl(t, n) -> [n]

  nam-get-definitions :
    PayloadDecl(t, n) -> [(Payload(), [n])]

  nam-annotate-names(|paths__, path__):
    PayloadDecl(t, n) -> <PayloadDecl(id, nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    PayloadDecl(t, n) -> <store__> DefData(
                                     [namespace__|path__]
                                   , Type()
                                   , t
                                   )

  type-of :
    PayloadDecl(t, n) -> t

  nam-unique :
    PayloadDecl(t, n) -> <id>


rules

  nam-get-uses-keys :
    Packet(p) -> [p]

  nam-get-uses :
    Packet(p) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    Packet(p) -> <Packet(nam-annotate-use(|paths__, Packet()))>


rules

  nam-get-uses-keys :
    PayloadRef(n) -> [n]

  nam-get-uses :
    PayloadRef(n) -> [(Payload(), [n])]

  nam-annotate-names(|paths__, path__):
    PayloadRef(n) -> <PayloadRef(nam-annotate-use(|paths__, Payload()))>


rules

  nam-get-uses-keys :
    PayloadRef(obj, n) -> [n]
    where Packet(p) := <type-of> obj

  nam-get-uses :
    PayloadRef(obj, n) -> [(Payload(), [n])]
    where Packet(p) := <type-of> obj

  nam-annotate-names(|paths__, path__):
    PayloadRef(obj, n) -> <PayloadRef(id, nam-annotate-use(|paths__, Payload()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    PayloadRef(obj, n) -> <index-lookup-children(|Payload(), prefix__)> p
    where <target__> n
    where Packet(p) := <type-of> obj


rules

  nam-get-uses-keys :
    Type(c) -> [c]

  nam-get-uses :
    Type(c) -> [(Class(), [c])]

  nam-annotate-names(|paths__, path__):
    Type(c) -> <Type(nam-annotate-use(|paths__, Class()))>


rules

  nam-get-uses-keys :
    FieldRef(c, n) -> [n]

  nam-get-uses :
    FieldRef(c, n) -> [(Field(), [n])]

  nam-annotate-names(|paths__, path__):
    FieldRef(c, n) -> <FieldRef(id, nam-annotate-use(|paths__, Field()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    FieldRef(c, n) -> <index-lookup-children(|Field(), prefix__)> c
    where <target__> n


rules

  nam-get-uses-keys :
    Meta() -> [Meta()]

  nam-get-uses :
    Meta() -> [(Class(), [Meta()])]

  nam-annotate-names(|paths__, path__):
    Meta() -> <nam-annotate-use(|paths__, Class())>


rules

  nam-get-uses-keys :
    Module() -> [Module()]

  nam-get-uses :
    Module() -> [(Class(), [Module()])]

  nam-annotate-names(|paths__, path__):
    Module() -> <nam-annotate-use(|paths__, Class())>


rules

  nam-get-scope-types :
    Class(n, _, _) -> [Field(), Method()]

  nam-get-definition-keys :
    Class(n, _, _) -> [n]

  nam-get-definitions :
    Class(n, _, _) -> [(Class(), [n])]

  nam-annotate-names(|paths__, path__):
    Class(n, _, _) -> <Class(nam-annotate-def(|path__), id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    Class(n, _, _) -> <store__> DefData(
                                  [namespace__|path__]
                                , Type()
                                , n
                                )

  type-of :
    Class(n, _, _) -> n


rules

  nam-get-definition-keys :
    FakeClass(n) -> [n]

  nam-get-definitions :
    FakeClass(n) -> [(Class(), [n])]

  nam-annotate-names(|paths__, path__):
    FakeClass(n) -> <FakeClass(nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    FakeClass(n) -> <store__> DefData(
                                [namespace__|path__]
                              , Type()
                              , n
                              )

  type-of :
    FakeClass(n) -> n


rules

  nam-get-definition-keys :
    MetaPart(n) -> [n]

  nam-get-definitions :
    MetaPart(n) -> [(MetaPart(), [n])]

  nam-annotate-names(|paths__, path__):
    MetaPart(n) -> <MetaPart(nam-annotate-def(|path__))>

  nam-unique :
    MetaPart(n) -> <id>