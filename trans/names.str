module names

imports
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/index-library.generated


imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front


signature
  constructors
    Type        : DefDataKind
    Import      : DefDataKind
    Transitive  : ImportAnno
    CurrentFile : ImportAnno

  constructors
    Mod     : Namespace
    Group   : Namespace
    Packet  : Namespace
    Var     : Namespace
    Field   : Namespace
    Class   : Namespace
    State   : Namespace
    Payload : Namespace
    Program : Namespace


rules

  nam-get-scope-types :
    Program(n, _, _) -> [ Group()
                        , Packet()
                        , Var()
                        , Class()
                        , State()
                        ]

  nam-get-definition-keys :
    Program(n, _, _) -> [n]

  nam-get-definitions :
    Program(n, _, _) -> [(Program(), [n])]

  nam-annotate-names(|paths__, path__):
    Program(n, _, _) -> <Program(nam-annotate-def(|path__), id, id)>


rules

  nam-get-scope-types :
    Group(n, _) -> [Mod()]

  nam-get-definition-keys :
    Group(n, _) -> [n]

  nam-get-definitions :
    Group(n, _) -> [(Group(), [n])]

  nam-annotate-names(|paths__, path__):
    Group(n, _) -> <Group(nam-annotate-def(|path__), id)>

  nam-unique :
    Group(n, _) -> <id>


rules

  nam-get-definition-keys :
    Mod(n) -> [n]

  nam-get-definitions :
    Mod(n) -> [(Mod(), [n])]

  nam-annotate-names(|paths__, path__):
    Mod(n) -> <Mod(nam-annotate-def(|path__))>

  nam-unique :
    Mod(n) -> <id>


rules

  nam-get-definition-keys :
    GroupNum(n) -> [n]

  nam-get-definitions :
    GroupNum(n) -> [(Group(), [n])]

  nam-annotate-names(|paths__, path__):
    GroupNum(n) -> <GroupNum(nam-annotate-def(|path__))>

  nam-unique :
    GroupNum(n) -> <id>


rules

  nam-get-definition-keys :
    State(n, _, _, _) -> [n]

  nam-get-definitions :
    State(n, _, _, _) -> [(State(), [n])]

  nam-annotate-names(|paths__, path__):
    State(n, _, _, _) -> <State(nam-annotate-def(|path__), id, id, id)>

  nam-unique :
    State(n, _, _, _) -> <id>


rules

  nam-get-definition-keys :
    Packet(n, _) -> [n]

  nam-get-definitions :
    Packet(n, _) -> [(Packet(), [n])]

  nam-annotate-names(|paths__, path__):
    Packet(n, _) -> <Packet(nam-annotate-def(|path__), id)>

  nam-unique :
    Packet(n, _) -> <id>


rules

  nam-get-definition-keys :
    Receive(PacketRef(p), n) -> [n]

  nam-get-definitions :
    Receive(PacketRef(p), n) -> [(Var(), [n])]

  nam-get-uses-keys :
    Receive(PacketRef(p), n) -> [p]

  nam-get-uses :
    Receive(PacketRef(p), n) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    Receive(PacketRef(p), n) -> <Receive(
                                   PacketRef(nam-annotate-use(|paths__, Packet()))
                                 , nam-annotate-def(|path__)
                                 )>

  nam-unique :
    Receive(PacketRef(p), n) -> <id>


rules

  nam-get-uses-keys :
    Broadcast(p, _, _) -> [p]

  nam-get-uses :
    Broadcast(p, _, _) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    Broadcast(p, _, _) -> <Broadcast(
                             nam-annotate-use(|paths__, Packet())
                           , id
                           , id
                           )>


rules

  nam-get-uses-keys :
    ModHolderRef(m, g) -> [m]

  nam-get-uses :
    ModHolderRef(m, g) -> [(Mod(), [m])]

  nam-annotate-names(|paths__, path__):
    ModHolderRef(m, g) -> <ModHolderRef(nam-annotate-use(|paths__, Mod()), id)>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    ModHolderRef(m, g) -> <index-lookup-children(|Mod(), prefix__)> g
    where <target__> m


rules

  nam-get-uses-keys :
    ModHolderRef(g) -> [g]

  nam-get-uses :
    ModHolderRef(g) -> [(Group(), [g])]

  nam-annotate-names(|paths__, path__):
    ModHolderRef(g) -> <ModHolderRef(nam-annotate-use(|paths__, Group()))>


rules

  nam-get-definition-keys :
    VarDecl(_, n) -> [n]

  nam-get-definitions :
    VarDecl(_, n) -> [(Var(), [n])]

  nam-annotate-names(|paths__, path__):
    VarDecl(_, n) -> <VarDecl(id, nam-annotate-def(|path__))>

  nam-unique :
    VarDecl(_, n) -> <id>


rules

  nam-get-definition-keys :
    Param(t, x) -> [x]

  nam-get-definitions :
    Param(t, x) -> [(Var(), [x])]

  nam-annotate-names(|paths__, path__):
    Param(t, x) -> <Param(id, nam-annotate-def(|path__))>

  nam-unique :
    Param(t, x) -> <id>


rules

  nam-get-definition-keys :
    FieldDecl(_, n) -> [n]

  nam-get-definitions :
    FieldDecl(_, n) -> [(Field(), [n])]

  nam-annotate-names(|paths__, path__):
    FieldDecl(_, n) -> <FieldDecl(id, nam-annotate-def(|path__))>

  nam-unique :
    FieldDecl(_, n) -> <id>


rules

  nam-get-definition-keys :
    PayloadDecl(_, n) -> [n]

  nam-get-definitions :
    PayloadDecl(_, n) -> [(Payload(), [n])]

  nam-annotate-names(|paths__, path__):
    PayloadDecl(_, n) -> <PayloadDecl(id, nam-annotate-def(|path__))>

  nam-unique :
    PayloadDecl(_, n) -> <id>


rules

  nam-get-uses-keys :
    PacketRef(p) -> [p]

  nam-get-uses :
    PacketRef(p) -> [(Packet(), [p])]

  nam-annotate-names(|paths__, path__):
    PacketRef(p) -> <PacketRef(nam-annotate-use(|paths__, Packet()))>


rules

  nam-get-uses-keys :
    VarRef(n) -> [n]

  nam-get-uses :
    VarRef(n) -> [ (Var(), [n])
                 , (Field(), [n])
                 ]

  nam-annotate-names(|paths__, path__):
    VarRef(n) -> <VarRef(nam-annotate-use(|paths__, Var()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    VarRef(n) -> [ [Var()|path__]
                 , [Field()|path__]
                 ]
    where <target__> n


rules

  nam-get-uses-keys :
    FieldRef(c, n) -> [n, "id"]

  nam-get-uses :
    FieldRef(c, n) -> [ (Field(), [n])
                      , (Payload(), [n])
                      , (Field(), ["id"])
                      ]

  nam-annotate-names(|paths__, path__):
    FieldRef(c, n) -> <FieldRef(id, nam-annotate-use(|paths__, Field()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    FieldRef(c, n) -> <concat> [ <index-lookup-children(|Field(), prefix__)> c
                               , <index-lookup-children(|Payload(), prefix__)> c
                               ]
    where <target__> n


rules

  nam-get-definition-keys :
    Class(n, _, _) -> [n]

  nam-get-definitions :
    Class(n, _, _) -> [(Class(), [n])]

  nam-annotate-names(|paths__, path__):
    Class(n, _, _) -> <Class(nam-annotate-def(|path__), id, id)>

  nam-unique :
    Class(n, _, _) -> <id>


rules

  nam-get-scope-types :
    Class(n, _, _, _) -> [Field()]

  nam-get-definition-keys :
    Class(n, _, _, _) -> [n]

  nam-get-definitions :
    Class(n, _, _, _) -> [(Class(), [n])]

  nam-annotate-names(|paths__, path__):
    Class(n, _, _, _) -> <Class(nam-annotate-def(|path__), id, id, id)>

  nam-unique :
    Class(n, _, _, _) -> <id>


rules

  nam-get-scope-types :
    ModuleClass() -> [Field()]

  nam-get-definition-keys :
    ModuleClass() -> ["Module"]

  nam-get-definitions :
    ModuleClass() -> [(Class(), ["Module"])]

  nam-annotate-names(|paths__, path__):
    ModuleClass() -> <ModuleClass()>

  nam-unique :
    ModuleClass() -> <id>


rules

  nam-get-scope-types :
    MetaClass() -> [Field()]

  nam-get-definition-keys :
    MetaClass() -> ["Meta"]

  nam-get-definitions :
    MetaClass() -> [(Class(), ["Meta"])]

  nam-annotate-names(|paths__, path__):
    MetaClass() -> <MetaClass()>

  nam-unique :
    MetaClass() -> <id>