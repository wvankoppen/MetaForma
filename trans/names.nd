module names

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  desugar
 
 
 // What about the scoping bug? That it has to scope multiple items?
	
namespaces
	Package Group Mod Var Packet Payload Sequence Instruction Class ClassFake Field Method MetaPart DebugItem VisItem Constant EventHandler	
rules
	
	Package(n,_,_):
		defines non-unique Package n
		scopes Group, Packet, Class,ClassFake, Sequence,MetaPart,EventHandler,VisItem,Constant,DebugItem
		
	DebugItem(n,packets):
		defines DebugItem n
		
	VisItem(n,g,ref,color):
		defines VisItem n
		
	ConstDecl(t,n,v):
		defines Constant n of type t
		
	Group(n,_) :
		defines Group n of type Group()
		scopes Mod

	Mod (n):
		defines Mod n of type Mod()
		
	Group(n) :
	 	defines Group n
	
	
	Sequence (Plain(n),_,_):
		defines Sequence n	
		scopes Var,Instruction,EventHandler
	
	Sequence (Init(n),_,_):
		defines Sequence n
		scopes Var,Instruction,EventHandler
		
	Sequence (Strategy(n),_,_):
		defines non-unique Sequence n	
		scopes Var,Instruction,EventHandler // We need to scope what we want to use, bug in NBL!
		
// Gohla>: dit is een bug in NBL, een manier hoe je die kan oplossen is door een Strategy te desugaren naar een Strategy met een unieke naam, bijvoorbeeld desugar: Strategy(…) -> Strategy(<new-name>, …) en dan een definitie ervan te maken
// <Gohla>: Strategy(x, ..) : defines Strategy x en Package(…): scopes Strategy	
		
	Instr(i,_,_,_,_):
		defines Instruction i
		scopes EventHandler,Var
		

	SequenceRef(n):
		refers to Sequence n	
	
	// Yes! ??????????????????	
	 SequencePrimRef(n):
	 	refers to Sequence n
		
	PacketDecl (n,_):
		defines Packet n of type Packet(n)
		scopes Payload
		
		
		
// EvHdlr(
//   "EvHdlr379"
// , Receive(VarDecl(PacketRef("Gradient"), "p"))
// , []
// , [
		

	Receive (VarDecl(Packet(p),n)):
		refers to Packet p
		defines Var n
		
 // NO, no refs to PacketPrim!
		
	EvHdlr(n,Receive (VarDecl(Packet(p),n)),_,_):
		refers to Packet p
		defines Var n 
		scopes Var	
	
	// TODO: Make mutually exclusive
	EvHdlr(x, _, _, _):
		defines EventHandler x
		scopes Var
	
	
	
	
	FuncDecl (t,n,_,_,_): 
		defines Method n of type t
		scopes Field,Var
		
	Send(Packet(p),_,_):
		refers to Packet p
		
	
	ModHolderNumRef(group,i):
		refers to Group group
	
	ModHolderRef(group): 
		refers to Group group
			
	ModHolderRef(group,mod):
		refers to Group group
	 	refers to Mod mod //in Group group
	 	
	 	//where group refers to Group g
	
			
	VarDecl(t,n,v): 
		defines  Var n of type t
		
	PacketVarDecl(packetref,n): 
		defines  Var n of type packetref
		// where packetref has type Type(Packet(t))
		
	Param(t, x) :
    	defines Var x of type t	
	
	FuncRef(n):
		refers to Method n
		
	
	MethodRef(obj,n):
		refers to Method n in Class obj
		// where obj has type Type(c)
	
	FieldDecl(t,n): 
		defines Field n of type t
		
	PayloadDecl(t,n): 
		defines Payload n of type  t
	
	Packet(p):
		refers to Packet p
		//scopes Payload,Field,Var
	
	PayloadRef (n):
		refers to Payload n
		
	PayloadRef (obj,n):
		refers to Payload n	in Packet p
		where obj has type Packet(p)
	
	// Ref(n): 
	// 	refers to Var n
	// 	refers to Field n			
	// 	refers to MetaPart n
	// 	refers to Constant n
		

			
	Type(c): refers to Class c
		
	FieldRef(c,n):
		refers to Field n in Class c
		// where c has type Type(cl)
		// refers to Class c
	
	
		// refers to ClassFake Meta() DOES NOT WORK??
	Meta(): refers to Class Meta() 
	Module(): refers to Class Module() 
	//refers to ClassFake Module()
	// Region(): refers to Class Region() //refers to ClassFake Region()
		
	//  non-unique because we desugar an empty module, meta and region class in the AST, this allows to omit the declaration in hello word program
	 
	Class (n,_,_): // Module and Meta
		defines non-unique Class n of type n
		scopes Field,Method

	// Class (n,_): // Region
	// 	defines non-unique Class n of type n
	// 	scopes Field,Var,Method
	
	FakeClass(n):
		defines non-unique Class n of type n
	
	
	MetaPart (n):
		defines MetaPart n
		
	
		
			