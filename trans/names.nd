module names

imports
	
	libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  desugar
 
 
 
 // What about the scoping bug? That it has to scope multiple items?
 // How to make NBL recognize basic field variables like id and group?
 // Front@Axis; is not recognized
 // send AddNeighbor(first=v1, second=v2) to dests;       first must refer to a var defined in AddNeighbor
 
 // how to store Receive event handlers in global or instruction states
 
 // How to store scattered declarations from multiple files in a single namespace, and retrieve them from it


	
namespaces
	
	Mod
	Group
	Packet
	Var
	Field
	Class
	State
	Instruction
	Function
	MetaPart
	Payload
	Program
	VisItem
	VisGroup
	EventHandler
	Const
	
rules
	
	VisGroup(n,g):
		defines VisGroup n
		
	VisItem(n,g,ref,color):
		defines VisItem n
		
	ConstDecl(t,n,v):
		defines Const n
	
	EvHdlr(x, _, _, _):
		defines EventHandler x
		scopes Var
	
	Program(n,_,_,_):
		defines non-unique Program n
		scopes Group, Packet, Class, State,/*Function,*/MetaPart,EventHandler,VisItem,Const

	Group(n,_) :
		defines Group n
		scopes Mod

	Mod (n):
		defines Mod n
		
	Group(n) :
	 	defines Group n
	 
	State (n,_,_,_,_,_):
		defines State n	
		scopes Packet,Var,Instruction,EventHandler
		
	Instr(i,_,_,_,_):
		defines Instruction i
		scopes EventHandler,Packet
		
		


		
	StateRef(n):
		refers to State n
		
	Packet (n,_):
		defines Packet n of type Type(n)
		scopes Payload,Field,Program
		

	Receive (VarDecl(PacketRef(p),n)):
		refers to Packet p
		defines Var n
		scopes Payload,Field,Var
	
	FuncDecl (n,_,_,_): 
		defines Function n
		scopes Payload,Field,Var
		
	Unicast(p,_,_,_):
		refers to Packet p
		
	
	ModHolderRef(group): 
		refers to Group group
			
	ModHolderRef(group,mod):
		refers to Group group
	 	refers to Mod mod //in Group group
	 	
	 	//where group refers to Group g
	
	ModHolderRef("Floor"):
		refers to Group "Floor"
	
			
	VarDecl(t,n): 
		defines  Var n of type t
		
	Param(t, x) :
    	defines Var x of type t	
	
	FuncRef(n):
		refers to Function n
		
	
		
	MethodRef(Actuation(), n):
		refers to Function n
		refers to Function "disconnect"
	
	MethodRef(obj,n):
		refers to Function n in Class c
		where obj has type Type(c)
	
	FieldDecl(t,n): 
		defines Field n of type t
		
	PayloadDecl(_,n): 
		defines Payload n 
	
	PacketRef(p):
		refers to Packet p
		//scopes Payload,Field,Var
	
	PayloadRef (n):
		refers to Payload n
	
	VarRef(n): 
		refers to Var n			
		refers to Field n
		refers to MetaPart n
		refers to Const n
		
		
		
		
	FieldRef(c,n):
		refers to Field n in Class cl
		// refers to Payload n in Packet cl
		where c has type Type(cl)
		// refers to Class c
	
	// Class (n,_,_):
	// 	defines Class n
	
		
	Class (n,_,_): // Module and Meta
		defines Class n of type Type(n)
		scopes Payload,Field,Var,Function

	Class (n,_): // Region
		defines Class n of type Type(n)
		scopes Payload,Field,Var,Function
	
	
	MetaPart (n):
		defines MetaPart n
		
	
		
			