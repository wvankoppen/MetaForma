module names

imports
	
	libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  desugar
 
 
 // What about the scoping bug? That it has to scope multiple items?
	
namespaces
	Program Group Mod Var Packet Payload Sequence Instruction Class Field Method MetaPart DebugItem VisItem Constant EventHandler	
rules
	
	Program(n,_,_,_):
		defines non-unique Program n
		scopes Group, Packet, Class, Sequence,MetaPart,EventHandler,VisItem,Constant,DebugItem
		
	DebugItem(n,packets):
		defines DebugItem n
		
	VisItem(n,g,ref,color):
		defines VisItem n
		
	ConstDecl(t,n,v):
		defines Constant n
		
	Group(n,_) :
		defines Group n of type Group()
		scopes Mod

	Mod (n):
		defines Mod n of type Mod()
		
	Group(n) :
	 	defines Group n
	
	
	// Yes! 
	 Sequence (SequencePrimRef(n),_,_,_,_,_):
	 	defines Sequence n	
	 	scopes Packet,Var,Instruction,EventHandler
		
	Sequence (n,_,_,_,_,_):
		defines Sequence n	
		scopes Var,Instruction,EventHandler
		
	Instr(i,_,_,_,_):
		defines Instruction i
		scopes EventHandler,Packet
		

	SequenceRef(n):
		refers to Sequence n	
	
	// Yes!	
	 SequencePrimRef(n):
	 	refers to Sequence n
		
	PacketDecl (n,_):
		defines Packet n of type Packet(n)
		scopes Payload
		
		
		
// EvHdlr(
//   "EvHdlr379"
// , Receive(VarDecl(PacketRef("Gradient"), "p"))
// , []
// , [
		

	Receive (VarDecl(Packet(p),n)):
		refers to Packet p
		defines Var n
		
 // NO, no refs to PacketPrim!
		
	EvHdlr(n,Receive (VarDecl(Packet(p),n)),_,_):
		refers to Packet p
		defines Var n 
		scopes Var	
	
	
	EvHdlr(x, _, _, _):
		defines EventHandler x
		scopes Var
	
	
	
	
	FuncDecl (n,_,_,_): 
		defines Method n
		scopes Field,Var
		
	Unicast(Packet(p),_,_):
		refers to Packet p
		
	
	ModHolderRef(group): 
		refers to Group group
			
	ModHolderRef(group,mod):
		refers to Group group
	 	refers to Mod mod //in Group group
	 	
	 	//where group refers to Group g
	
			
	VarDecl(t,n): 
		defines  Var n of type t
		
	PacketVarDecl(packetref,n): 
		defines  Var n of type packetref
		// where packetref has type Type(Packet(t))
		
	Param(t, x) :
    	defines Var x of type t	
	
	FuncRef(n):
		refers to Method n
		
	
		
	MethodRef(Actuation(), n):
		refers to Method n
		
	
	MethodRef(obj,n):
		refers to Method n in Class obj
		// where obj has type Type(c)
	
	FieldDecl(t,n): 
		defines Field n of type t
		
	PayloadDecl(t,n): 
		defines Payload n of type  t
	
	Packet(p):
		refers to Packet p
		//scopes Payload,Field,Var
	
	PayloadRef (n):
		refers to Payload n
		
	PayloadRef (obj,n):
		refers to Payload n	in Packet p
		where obj has type Packet(p)
	
	VarRef(n): 
		refers to Var n
		refers to Field n			
		// refers to Field n in Class Module()
		refers to MetaPart n
		refers to Constant n
		
		
			
		
	PrimRefPacket(v,p):
		refers to Payload "connSource"
		
	Type(c): refers to Class c
		
	FieldRef(c,n):
		refers to Field n in Class c
		// where c has type Type(cl)
		// refers to Class c
	
	
		
	Meta(): refers to Class Meta()
	Module(): refers to Class Module()
		
	Class (n,_,_): // Module and Meta
		defines Class n of type n
		scopes Field,Method

	Class (n,_): // Region
		defines Class n of type n
		scopes Field,Var,Method
	
	
	MetaPart (n):
		defines MetaPart n
		
	
		
			