module desugar

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front

  

rules // Incremental code generation of project using compilation library.
  
  
 
rules // Transformation to java strings.


desugar-all = innermost(desugar-functions);innermost(desugar);topdown(try(add-instr));innermost(desugar)


tail: [x|xs] -> xs


add-instr: State(n,e,x,instrs) -> State(n,e,x,instrs''')  
where 
	<debug>"=====START=======";
	<map(try(add-instrblock))>instrs => instrs';
	<upto><dec><length>instrs' => nrs;
	<debug>nrs;
	<zip>(nrs,instrs') => instrs'';
	<map(try(swap-counter))>instrs'' => instrs''';
	<debug>instrs''
	// <map(try(add-ix))>instrs' => instrs''


swap-counter: (c,Instr(d,instr*,postcon)) -> Instr(c,d,instr*,postcon)
swap-counter: (c,Instr(d,instr*)) -> Instr(c,d,instr*,Wait(Consensus())) 

	
add-instrblock: f -> Instr([],[f])
where
	not (<?Instr(_,_)>f);
	not (<?Instr(_,_,_)>f);
	not (<?Instr(_,_,_,_)>f)


// desugar: VarDecl(t,n*) -> decls
// 	where
// 		<?[_|_]>n*;
// 		decls := <flatten-list><map(fixvar(|t))>n*
// 
// fixvar(|t): n -> VarDecl(t,n)


desugar-functions: Instr(d,instrs) -> Instr(d,instrs,Wait(Consensus()))  	 
 
desugar-functions: ConnectPart(m1,m2) -> FuncCall("connect_part",[m1,m2])
desugar-functions: DisconnectPart(m1,m2) -> FuncCall("disconnect_part",[m1,m2])
desugar-functions: Connect(m1,m2) -> FuncCall("connect",[m1,m2])
desugar-functions: Disconnect(m1,m2) -> FuncCall("disconnect",[m1,m2])
desugar-functions: Rotate(m1,deg) -> FuncCall("rotate",[m1,deg])
desugar-functions: RotateCont(m1,v) -> FuncCall("rotate_continuous",[m1,v])





desugar: Block(stats) -> [stats]
where
	not(<?[_|_]>stats)
	
desugar: Block(stats) -> stats
where
	<?[_|_]>stats
	
desugar: Min(e1,e2) -> BinOp(Min(),e1,e2)
desugar: Plus(e1,e2) -> BinOp(Plus(),e1,e2)
desugar: And(e1,e2) -> BinOp(And(),e1,e2)
desugar: Or(e1,e2) -> BinOp(Or(),e1,e2)
desugar: Eq(e1,e2) -> BinOp(Eq(),e1,e2)
desugar: Lt(e1,e2) -> BinOp(Lt(),e1,e2)
desugar: LtEq(e1,e2) -> BinOp(LtEq(),e1,e2)
desugar: Gt(e1,e2) -> BinOp(Gt(),e1,e2)
desugar: GtEq(e1,e2) -> BinOp(GtEq(),e1,e2)
  