module desugar

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  constructors
  store
  metaformalang
  functions
rules 
 
desugar-all = topdown(try(desugar))

desugar: TryRegion(_,seq,orient,incs,excl) -> TryRegion(seq,orient,incs,excl') 
where
	excl' := <try(\None() -> Some(Excluding([]))\)>excl


desugar: Package(n,debug,decls) -> Package(n,debug,decls')
where
	// put the fakeclasses at the end of the list, so reference resolving resolves to the existing one, if any
	 decls' := [FakeClass(Module()),FakeClass(Meta()),FakeClass(Region())|decls]
// Add fake declarations because not in every package we use the declaration, only the primitives


desugar: Send(Packet(p),AssignList(assignlist),nbsop) -> Send(Packet(p),AssignList(assignlist'),nbsop')
where
	nbsop' := <(\None() -> NbsOp([])\ <+ \Some(NbsClause(c)) -> c\)>nbsop;
	assignlist' :=  <map(add-payload(|<strip-annos>p))>assignlist
 	
 	add-payload(|packet): AssignElem(PayloadRef(f),exp) -> AssignElem(PayloadRef(Packet(packet),f),exp)
 	
	

desugar: Visualize (groups) -> Visualize (items)
where
	<flatten-list><map(rem-visgroup-container)>groups => items
	
	rem-visgroup-container: VisGroup (n,g) -> g'
	where
		<map(add-visgroup(|n))>g => g'

		add-visgroup(|n): VisItem(r,c) -> VisItem(<newname>,n,r,c) 



 // if <?"Strategy">m then
	//  	instrs' := instrs
	//  else
	// 	instrs' := <conc> (instrs,[Execute(SequencePrimRef("Strategy"))]) 	
	//  end;	


// desugar: Sequence(n,evts,ins*) -> Sequence(n-cons,evts,ins'*)
// 	// Pseudocode for rewrite:
// 	n-cons := Strategy(n) -> n or Init(n@"Init") or Plain(n)
// 	ins* := <rewrite>ins where	
// 		[    Assign(..), Instr(Unicast(..)), Instr(..)]  => 
// 		[Instr(0,Assign(..)), Instr(1, Unicast(..)), Instr(2,..)]
	 

desugar: Sequence(n,evts,ins*) -> Sequence(<wrap>n,evts,ins4*)  
where
	ins2* := <conc> (ins*,[Execute(SequencePrimRef("Strategy"))]);
	ins3*  := <map(try(add-instr);try(uni-instr))>ins2*;
	nrs    := <upto><dec><length>ins3*;  // nrs = [0,1,2,..,n-1]
	ins4*  := <map(swap-counter)><zip>(nrs,ins3*) // number each instruction

	add-instr: term -> Instr(None(),[],[],[term],None())
	where not (<eq>(<aterm-name>term,"Instr"))
	
	uni-instr: Instr(pre,evt*,var*,ins*,post) -> Instr(pre',evt*,var*,ins*,post')
	where
		pre'  := <try(\Some(x)->x\)>pre;
		post' := <try(\Some(x)->x \+\ None()->Wait(Consensus()) \)>post

	swap-counter: (i,Instr(precon,evt*,var*,instr*,postcon)) -> Instr(i,precon,evt*,<conc>(var*,instr*),postcon)	 

	wrap = switch id
 			case ?n@"Init": 		!Init(n)	
 			case ?n@"Strategy": 	!Strategy(n,<newname>)// to store it unique (we have to store it)
 			otherwise: 			!Plain(<id>)
 		   end
 		 		
	
	
	// decl2assign: VarDecl(t,n,v) -> Assign(VarRef(n),v)

// If origin tracking fails:
// <origin-track-forced(FieldRef(Module(),"QUART"))> a 
	

desugar: Neq(e1,e2) -> Not(Eq(e1,e2)) // Because of .equals in Java

	



// Needs to be done prior to desugar sequences ????NOT SURE

desugar: VarDecl(t,n) -> VarDecl(t,n,<var-init>t)
	var-init: Byte() -> Int("0")
	var-init: Boolean() -> Bool("false")
	var-init: Float() -> Float("0")
	var-init: Int() -> Int("0") 

// Desugar the vardecls out of an event
desugar: If (e,vardecls,stats) -> If(e,<conc>(vardecls,stats))

desugar: EvHdlr(receive,vars,stats) -> EvHdlr (<newname>,receive,vars,stats)
desugar: ShowPackets(packets) -> DebugItem (ShowPackets(),packets)

// Desugar Meta Class
desugar: Meta(mp,var*,fun*) ->Class(Meta(),mp,<unify>(var*,fun*))
// Desugar Module Class
desugar: Module(bor*,var*,fun*) ->Class(Module(),bor*,<unify>(var*,fun*))
// Helper rules
	unify: (var*,fun*) -> <conc>(<mapconcat(try(smooth-list))>var*,fun*)
		smooth-list: FieldDeclList(t,names) -> <map(add-type-field(|t))>names
			add-type-field(|t): n -> FieldDecl(t,n)

desugar: PacketDecl(n,fields) -> PacketDecl(n,payloads) 
where
	payloads := <map(to-payload)><mapconcat(try(smooth-list))>fields
	to-payload: FieldDecl(t,n) -> PayloadDecl(t,n)


desugar: Block(stats) -> [stats]
	where not(<is-list>stats)
 	
desugar: Block(stats) -> stats
	where <is-list>stats

desugar: MetaFieldRef(n) -> FieldRef(Meta(),n)	
	 
desugar: Nbs(d@NbsOp(_)) -> d
desugar: Nbs(d@NbsCount(_)) -> d  
	
desugar: Min(e1,e2) -> BinOp(Min(),e1,e2)
desugar: Plus(e1,e2) -> BinOp(Plus(),e1,e2)
desugar: Mul(e1,e2) -> BinOp(Mul(),e1,e2)
desugar: Div(e1,e2) -> BinOp(Div(),e1,e2)
desugar: Modulo(e1,e2) -> BinOp(Modulo(),e1,e2)
desugar: And(e1,e2) -> BinOp(And(),e1,e2)
desugar: Or(e1,e2) -> BinOp(Or(),e1,e2)
desugar: AndBit(e1,e2) -> BinOp(AndBit(),e1,e2)
desugar: OrBit(e1,e2) -> BinOp(OrBit(),e1,e2)

desugar: Eq(e1,e2) -> BoolOp(Eq(),e1,e2)
desugar: Neq(e1,e2) -> BoolOp(Neq(),e1,e2)
desugar: Lt(e1,e2) -> BoolOp(Lt(),e1,e2)
desugar: LtEq(e1,e2) -> BoolOp(LtEq(),e1,e2)
desugar: Gt(e1,e2) -> BoolOp(Gt(),e1,e2)
desugar: GtEq(e1,e2) -> BoolOp(GtEq(),e1,e2)


desugar: NbsOp (filters) -> NbsOp(filters')
where
	<eq>(<length><filter(?NbsFilter("inRegion",_))>filters,0);
	filters' := [NbsFilter("inRegion",Bool("true"))|filters]

desugar: NbsFilter(d) -> NbsFilter("in",d)
where 
	<?ModHolderRef(_)>d + <?ModHolderPrimRef()>d 


desugar: MetaEnable(_) -> FuncCall(MethodPrimRef(Meta(), "enable"), [])
desugar: MetaDisable(_) -> FuncCall(MethodPrimRef(Region(), "destroy"), [])
desugar: RegionDisable(_) -> FuncCall(MethodPrimRef(Region(), "disable"), [])


desugar: MetaSize(i) -> MetaPartDecl(<map(\x -> MetaPart($[x[x]])\)><upto><dec><string-to-int>i) // If the programmer does not define meta-parts, create some dummy ones


desugar-all-nbl = bottomup(try(desugar-nbl))
 
 // desugar-nbl: FieldPrimRef(o,f) -> FieldRef(o,f) NO!
// desugar-nbl: PayloadPrimRef(o,f) -> FieldRef(o,f) ALSO NO! wrt getters and setters for prims
desugar-nbl: MethodPrimRef(o,f) -> MethodRef(o,f)
desugar-nbl: FuncPrimRef(f) -> FuncRef(f)
desugar-nbl: ModHolderPrimRef() -> ModHolderRef("X")
desugar-nbl: ModHolderPrimNumRef(i) -> ModHolderNumRef("X",i)
//   desugar-nbl: SequenceName(n) -> SequenceRef(n)
desugar-nbl: SequencePrimRef(n) -> SequenceRef(n)	// We have to distinguish manually in the generate phase anyway, as NBL does not support constructors in URI
desugar-nbl: Strategy(n,_) -> Strategy(n) 

// Because we need to match the enum with an object 
// We need to do this AFTER type checking!
desugar-nbl: BoolOp(Eq(),FieldPrimRef(Module(), "id"), e2) -> FuncCall(MethodRef(FuncCall(MethodRef(Module(),"getID"),[]), "equals"),[e2])
desugar-nbl: BoolOp(Eq(),PayloadPrimRef(p, "sourceID"), e2) -> FuncCall(MethodRef(FuncCall(MethodRef(p,"getSource"),[]), "equals"),[e2])




	