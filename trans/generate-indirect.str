module generate-indirect

imports
	
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
	names
	desugar
	generate
 metaformalang
 store
 project
 functions
 
strategies
	bracks = !"[]"

	map2str(rule) = map(rule);concat-strings 
	

	compile-packet: PacketDecl(packet,i,payloaddecls) -> $[
		class [packet'] extends PacketBase {
			
			public static byte getTypeNr() {return [i];}
			
			public [packet'](MfController c) {
				super(c);
				setType(getTypeNr());
			}
			
			@Override
			public String toStringPayload() {
				return "[java-fields-debug]";
			}
			
			@Override
			public [packet'] deserializePayload(byte[<bracks>] payload) {
				[java-fields-payloads]
				return this;
			}
		
			@Override
			public byte[<bracks>] serializePayload() {
				return new byte[<bracks>]{[<concat-glue(|",")>fieldnames]};
			}
			
			[java-fields]
		}
	]
	where
		<debug>$[Compile packet [packet]];
		packet' := <packet-name>packet;
		java-fields := <map2str(to-java-stat)>payloaddecls;
		fieldnames := <map(project-name)>payloaddecls;
		java-fields-payloads := <compile-payload-assign>fieldnames; 
		java-fields-debug := <concat-glue(|",")><map(field-debug)>fieldnames;
		<debug>"Finish compile packet"
	
	
	field-debug: fieldname -> code
	where
	code := $[[fieldname]= " + [fieldname] + "] 
	
	
	compile-payload-assign: fieldnames -> code 
	where
		indices := <upto><dec><length>fieldnames;
		fieldnames-nrs := <zip>(indices,fieldnames);
		<map2str(swap-index)>fieldnames-nrs => code
		
		
  swap-index: (index,fieldname) -> $[[fieldname] = payload$[$[index]$]$;]	
	
	
 
 
	 
 compile-packetreceive(|namespace): packet-name -> $[
  	public boolean receivePacket([<packet-name>packet-name] p) {
  		boolean handled = false;
  		[code]

  		if (handled) {
			mfVisual.print([param],"handled [packet-name] " + p);	
		} 
		else {
			mfVisual.print([param],"rejected [packet-name] " + p);
		}
		
  		return handled;
  	}
  ]
  where
  	<debug>"Compile packetreceive";
 	<index-get-evhdlr-packet(|namespace)>packet-name => eventhandlers;
  	code := <map2str(compile)>eventhandlers => code;
  	param := <name2param>packet-name
  	
  name2param = ?"Packet"; !"true"
  name2param = not(?"PacketBase"); !"p"	
  	
 
 correct-packet = ?Packet(<id>) + ?PacketPrim(<id>)
 
 	 
compile-packetbuild: p@PacketDecl(n,nr,payloads) -> $[		 if (typeNr == [name].getTypeNr()) {
			[name] p = ([name])new [name](this).deserialize(msg,connector);
			preprocessPacket(p);
			receivePacket(p);
			receivePacket((PacketBase)p);	
		}
		else 
			]
where
	name := $[Packet[n]]


to-java: Some(BorderDecl(items)) -> <map2str(to-java)>items
where <debug(!"Compile borderitems")>items

to-java: None() -> $[]

 compile:  Class(name@Module(),borders,elements) -> $[class Gen[n] extends [n]Core implements I[n]Gen {
	[elements']
	public boolean atBorder(BorderLine d) {
 			boolean ret = false;
 			[<to-java>borders]
 			return ret;
 		}
	}
	]
	where
		n := <construct2name>name;
		<debug>$[Compile class [n]];
		<map2str(to-java-stat)>elements => elements';
		<debug>$[Done with class [n]]
		
 compile:  Class(name,_,elements) -> $[class Gen[n] extends [n]Core implements I[n]Gen {
	[elements']
	}
	]
	where
		// <SRTS-EXT-eq-ignore-annos(|Meta())>name; // It seems to clash with URI?
		<debug>$[Compile class Meta];
		<debug>name;
		n := <construct2name>name;
		<map2str(to-java-stat)>elements => elements'




construct2name: Meta() -> $[Meta]
construct2name: Module() -> $[Module]
construct2name: Region() -> $[Region]
 
 
 compile: Sequence(namedec,evhdlrs,instrs) -> 
$[if (mfStateMngr.at([seq])) {
	[java-evts]
	[java-instrs]
}
]
with
	<aterm-content>namedec => n; 
	seq := <to-seq>n;
	<debug>$[## START COMPILE sequence [n]];
	<map2str(to-java-stat)>evhdlrs => java-evts;
	<map2str(to-java-instr(|seq))>instrs => java-instrs;
	<debug>$[## END COMPILE sequence [n]]
 

 
  	
  compile: e@EvHdlr(_{uri},receive,vardecls, stats) ->
  	$[if (mfStateMngr.check(p,[java-state])) {
  		[java-code]
  		handled = true;
  	}]
  	where 
  		<debug(!$[Compile EvHdlr START:])>e;
  		java-state := <to-java>uri;
  		<debug>java-state;
  		java-code := <map2str(to-java-stat)><flatten-list>[vardecls|stats];
  		<debug>$[Compile EvHdlr END]
  	
  	
  	
  	
  to-java: [_,name,p] -> $[true]
  to-java: [_,name,seq,p] -> $[[<to-seq>seq]]
  to-java: [_,name,i,seq,p] -> $[new State([<to-seq>seq],[i])]
  
  // OOPS: Constructors not supported in URI!!!!
  is-prim-seq = ?"Init" + ?"Strategy"
  
  
  to-seq: seq -> $[SequenceGeneric.[seq]] where is-prim-seq
  to-seq: seq -> $[Sequence.[seq]]  where not(is-prim-seq)
  
  
  