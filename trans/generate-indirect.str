module generate-indirect

imports
	
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
	names
	desugar
	generate
 metaformalang
 store
 
strategies

	map2str(rule) = map(rule);concat-strings 

	 
 compile(|n): Packet(packet,payloaddecls) -> $[
  	protected void receivePacket([packet] p) {
  		[code]
  	}
  ]
  where
 	 <index-get-evhdlr(|n)> <strip-annos>packet => eventhandlers;
 	 <debug(!"EVH:")>eventhandlers;
 	 <map(simplify)>eventhandlers => result;
 	 <debug(!"nu hier")>result;
  	code := <concat-strings><map(compile)>result => code
  	
 	 
 simplify: EvHdlr(_{[_,name,p]},receive,vardecls, stats) -> <debug(!"DEB1:")>EvHdlr (State(),<conc>(vardecls,stats)) 	 
 simplify: EvHdlr(_{[_,name,seq,p]},receive,vardecls, stats) -> <debug(!"DEB2:")>EvHdlr (State(seq),<conc>(vardecls,stats)) 	 
 simplify: EvHdlr(_{[_,name,instr, seq,p]},receive,vardecls, stats) -> <debug(!"DEB3:")>EvHdlr (State(seq, instr),<conc>(vardecls,stats))	
 // simplify: x -> <debug(!"xxx")>x

// to-java-global(|what) = 
//  	<concat-strings><map(compile-class)><debug(!"classes:")><get-classes>
 	
 	
 // to-java-decls: Visualize (vis) -> $[[<concat-strings><map(to-java)>vis]]

 compile:  Class(id',_,decls,funcs) -> $[class Bag[n] extends Core[n] implements I[n]Bag {
	[decls']
	[funcs']
	}
	]
	where
		n := <cons2name>id';
		<debug>$[Compile class [n]];
		<concat-strings><map(to-java)>decls => decls';
		<concat-strings><map(to-java)>funcs => funcs'


cons2name: Meta() -> $[Meta]
cons2name: Module() -> $[Module]
 
 compile: State(n,evhdlrs,vars,funcs,instrs) -> 
$[if (mfStateMngr.at(StateOperation.[n])) {  [code]
}
]
where 
	<debug>$[COMPILE sequence [n]];
	<concat-strings><map(to-java-instrs)>instrs => code
 
 
 // to-java-packetreceive = 
 // 	<concat-strings><map(compile)><get-packets>
 
 
 
  	
  compile: e@EvHdlr (state,stats) ->
  	$[if (mfStateMngr.check(p,[<to-java>state])) {
  		[<concat-strings><map(to-java-stat)>stats]
  	}]
  	where <debug>$[Compile EvHdlr];<debug>e
  	
  	
  to-java: State() -> $[true]
  to-java: State(n) -> $[new State(Sequence.[n])]
  to-java: State(n,i) -> $[new State(Sequence.[n],[i])]
  
  