module store

imports
   libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
	names
	desugar
	project
	
	signature constructors
		Type: X * X -> Type
	
rules
	
	
	// 
	// remove-indirect-constructs: Instr(i,evts,evsemi,d,instr*,postcon) -> Instr(i,evsemi,instr'*,postcon)
	// where
	// 	instr'* := <conc>(evts,instr*)
	// 	
	// 	
	// remove-indirect-constructs: Class(Meta(),parts,fields) -> Class(Meta(),fields)
	
	
	adjust-index-def-data(store-results|namespace, path): 
		term@EvHdlr(_{uri}, Receive(PacketVarDecl(packet,_)), _, _) -> <store-results> DefData([EventHandler(), packet-name,program], EventHandler(), term)
		where
			program := <project-program>uri;
			packet-name := <project-name>packet

	project-program: [EventHandler(), _, p] -> p
	project-program: [EventHandler(), _,_, p] -> p
	project-program: [EventHandler(), _,_,_, p] -> p
		
	
	adjust-index-def-data(store-results|namespace, path): 
		term@DebugItem(ShowPackets(){[DebugItem(), _, program]}, packets) -> <store-results> DefData([DebugItem(), program], DebugItem(), packets)	
		
		
	adjust-index-def-data(store-results|namespace, path): 
		term@VisItem(_{[VisItem(), _, program]}, _, _, _) -> <store-results> DefData([VisItem(), program], VisItem(), term)
		
	
	adjust-index-def-data(store-results|namespace, path): 
		term@Group(_{[Group(), name, program]}, _) -> <store-results> DefData([Group(), program], Group(), term)
	
	adjust-index-def-data(store-results|namespace, path): 
		term@Group(_{[Group(), name, program]}) -> <store-results> DefData([Group(), program], Group(), term)
	
	
	adjust-index-def-data(store-results|namespace, path): 
		term@PacketDecl(_{[Packet(), name, program]},_) -> <store-results> DefData([Packet(), program], Packet(), term)
		
	

	// For Module & Meta class
	adjust-index-def-data(store-results|namespace, path): 
		term@Class(_{[Class(), name, program]},_,_) -> <store-results> DefData([Class(), program], Class(), term)
	
	// For Region class
	adjust-index-def-data(store-results|namespace, path): 
		term@Class(_{[Class(), name, program]},_) -> <store-results> DefData([Class(), program], Class(), term)
	
		
	adjust-index-def-data(store-results|namespace, path): 
		term@Sequence(SequencePrimRef(_){[Sequence(), name, program]},_,_,_,_,_) -> <store-results> DefData([Sequence(), program], Sequence(), term)
	
	adjust-index-def-data(store-results|namespace, path): 
		term@Sequence(_{[Sequence(), name, program]},_,_,_,_,_) -> <store-results> DefData([Sequence(), program], Sequence(), term)
			
		
	adjust-index-def-data(store-results|namespace, path): 
		term@MetaPart(_{[MetaPart(), name, program]}) -> <store-results> DefData([MetaPart(), program], MetaPart(), term)
		
		
	adjust-index-def-data(store-results|namespace, path): 
		term@ConstDecl(_,_{[Constant(), name, program]},_) -> <store-results> DefData([Constant(), program], Constant(), term)
			
			
			
			
			
	
		
	adjust-index-def-data(store-results|namespace, path):
       decl -> <store-results> DefData([namespace|path], Type(), type)
        where
          type := <type-of> decl	
		
		
	
	
        
    packet-add-numbers: packets -> packets'
    where
       	<map(inc;inc;inc;inc;inc)><upto><dec><length>packets => nrs;
       	<zip>(nrs,packets) => comb;
       	 <map(try(swap-counter))>comb => packets'
       	 
       	 
     swap-counter: (i,PacketDecl(n,decls)) -> PacketDecl(n,i,decls)
        
    index-get-packets(|prog) = !<packet-add-numbers><index-getcons(|prog)>Packet()
   
   index-get-packets-names(|prog) = !["Packet"|<map(project-name)><index-get-packets(|prog)>]
   
   
   index-getcons(|prog): cons -> values
   where   
     <desugar-all-nbl><index-get-all-values> DefData([cons, <strip-annos> prog], cons, ()) => values
  
   
   index-get-evhdlrs(|prog) = !<flatten-list><map(index-get-evhdlr-packet(|prog))><index-get-packets-names(|prog)>
   
  
  
  index-get-evhdlr-packet(|prog): packet-name -> values
   where   
     <map(desugar-all-nbl)><index-get-all-values> DefData([EventHandler(), <strip-annos> packet-name,prog], EventHandler(), () ) => values
      
        
    
    
    
        
    