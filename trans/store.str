module store

imports
   libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
	names
	desugar
	
	
	signature constructors
		Type: X * X -> Type
	
rules
	
	store-all = id// topdown(try(store));topdown(try(remove-indirect-constructs))//;store-statics
	
	
	
	
	remove-indirect-constructs: Instr(i,evts,d,instr*,postcon) -> Instr(i,instr'*,postcon)
	where
		instr'* := <conc>(evts,instr*)
		
		
	remove-indirect-constructs: Class(Meta(),parts,fields) -> Class(Meta(),fields)
	
	
	adjust-index-def-data(store-results|namespace, path): 
		term@EvHdlr(_{[EventHandler(), _, program]}, _, _, _, _) -> <store-results> DefData([EventHandler(), program], EventHandler(), term)
		
		
	adjust-index-def-data(store-results|namespace, path):
       decl -> <store-results> Type([namespace|path], type)
        where
          type := <type-of> decl	
		
		
	
	store: term@Packet (n,payloaddec) -> term
	where
		<debug>$[Store packet [n]];
		<index-add-global(|"Packets")> term
	
	
	store: term@State(n,evhdlrs,funcs,vars,instrs) -> term
	where
		<debug>$[Store state [n]: instrs];
		<debug>instrs;
		<index-add-global(|"States")> term
		
	
	store: term@Class(n,_,_) -> term
	where
		<debug>$[Store class:];
		<debug>n;
		<index-add-global(|"Classes")> term
		
	store: term@Group(n,mods) -> <index-add-global(|"Groups")> term
	where
		<debug>$[Store group [n]:]
	
	store: term@GroupNum(n) -> <index-add-global(|"Groups")> term
	where
		<debug>$[Store num group [n]:]
		
	store: term@MetaPart(n) -> <index-add-global(|"MetaParts")> term
	where
		<debug>$[Store metaPart [n]:]	
	
	 // adjust-index-def-data(store-results|namespace, path):
  //       decl@MetaPart(n) -> <store-results> decl
  //       where
  //       <debug>$[STORE MetaPart [n]]
        
		
	// store: d@Wait(Consensus()) -> d
	// where <debug>d
	
	// adjust-index-def-data(store-results|namespace, path):
 //        deff -> <store-results> EvHdlr([namespace|path],"123","345", "test456")
        
	 // adjust-index-def-data(store-results|namespace, path):
  //        s@StateRef(x) -> <store-results> EventHandler([namespace|path],s)
  //        where
  //        	<debug>("TESTJE!!")
         	        
      // adjust-index-def-data(store-results|namespace, path):
      //    Packet(n,payloads) -> <store-results> PacketStore(n,payloads)
 
       
    // adjust-index-def-data(store-results|namespace, path):
    //     e -> <store-results> EventHandler([namespace|path],e)
        // where
        //   type := <type-of> deff
        
        // adjust-index-def-data(store-results|namespace, path):
        // deff -> <store-results> EvHdlr([namespace|path], "test123")
        
        
        
        
        
        
    
    
    
        
    