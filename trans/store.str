module store

imports
   libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
	names
	desugar
	project
	
	signature constructors
		Type: X * X -> Type
	
rules
	
	
	
	remove-indirect-constructs: Instr(i,evts,d,instr*,postcon) -> Instr(i,instr'*,postcon)
	where
		instr'* := <conc>(evts,instr*)
		
		
	remove-indirect-constructs: Class(Meta(),parts,fields) -> Class(Meta(),fields)
	
	
	adjust-index-def-data(store-results|namespace, path): 
		term@EvHdlr(_{[EventHandler(), _, program]}, Receive(VarDecl(p@PacketRef(_),_)), _, _) -> <store-results> DefData([EventHandler(), <strip-annos>p, program], EventHandler(), term)
		
	adjust-index-def-data(store-results|namespace, path): 
		term@EvHdlr(_{[EventHandler(), _, _,  program]}, Receive(VarDecl(p@PacketRef(_),_)), _, _) -> <store-results> DefData([EventHandler(), <strip-annos>p, program], EventHandler(), term)
		
	adjust-index-def-data(store-results|namespace, path): 
		term@EvHdlr(_{[EventHandler(), _, _, _,  program]},Receive(VarDecl(p@PacketRef(_),_)), _, _) -> <store-results> DefData([EventHandler(), <strip-annos>p, program], EventHandler(), term)	
	
	
	
		
	adjust-index-def-data(store-results|namespace, path): 
		term@VisItem(_{[VisItem(), _, program]}, _, _, _, _) -> <store-results> DefData([VisItem(), program], VisItem(), term)
		
	
	adjust-index-def-data(store-results|namespace, path): 
		term@Group(_{[Group(), name, program]}, _) -> <store-results> DefData([Group(), program], Group(), term)
	
	adjust-index-def-data(store-results|namespace, path): 
		term@Group(_{[Group(), name, program]}) -> <store-results> DefData([Group(), program], Group(), term)
	
	
	adjust-index-def-data(store-results|namespace, path): 
		term@Packet(_{[Packet(), name, program]},_) -> <store-results> DefData([Packet(), program], Packet(), term)
		
	

	// For Module & Meta class
	adjust-index-def-data(store-results|namespace, path): 
		term@Class(_{[Class(), name, program]},_,_) -> <store-results> DefData([Class(), program], Class(), term)
	
	// For Region class
	adjust-index-def-data(store-results|namespace, path): 
		term@Class(_{[Class(), name, program]},_) -> <store-results> DefData([Class(), program], Class(), term)
	
		
	adjust-index-def-data(store-results|namespace, path): 
		term@State(_{[State(), name, program]},_,_,_,_) -> <store-results> DefData([State(), program], State(), term)
			
		
	adjust-index-def-data(store-results|namespace, path): 
		term@MetaPart(_{[MetaPart(), name, program]}) -> <store-results> DefData([MetaPart(), program], MetaPart(), term)
			
	
		
	adjust-index-def-data(store-results|namespace, path):
       decl -> <store-results> Type([namespace|path], type)
        where
          type := <type-of> decl	
		
		
	
	// store: term@Packet (n,payloaddec) -> term
	// where
	// 	<debug>$[Store packet [n]];
	// 	<index-add-global(|"Packets")> term
	// 
	// 
	// store: term@State(n,evhdlrs,funcs,vars,instrs) -> term
	// where
	// 	<debug>$[Store state [n]: instrs];
	// 	<debug>instrs;
	// 	<index-add-global(|"States")> term
	// 	
	// 
	// store: term@Class(n,_,_) -> term
	// where
	// 	<debug>$[Store class:];
	// 	<debug>n;
	// 	<index-add-global(|"Classes")> term
	// 	
	// store: term@Group(n,mods) -> <index-add-global(|"Groups")> term
	// where
	// 	<debug>$[Store group [n]:]
	// 
	// store: term@Group(n) -> <index-add-global(|"Groups")> term
	// where
	// 	<debug>$[Store num group [n]:]
	// 	
	// store: term@MetaPart(n) -> <index-add-global(|"MetaParts")> term
	// where
	// 	<debug>$[Store metaPart [n]:]	
	
	 // adjust-index-def-data(store-results|namespace, path):
  //       decl@MetaPart(n) -> <store-results> decl
  //       where
  //       <debug>$[STORE MetaPart [n]]
        
		
	// store: d@Wait(Consensus()) -> d
	// where <debug>d
	
	// adjust-index-def-data(store-results|namespace, path):
 //        deff -> <store-results> EvHdlr([namespace|path],"123","345", "test456")
        
	 // adjust-index-def-data(store-results|namespace, path):
  //        s@StateRef(x) -> <store-results> EventHandler([namespace|path],s)
  //        where
  //        	<debug>("TESTJE!!")
         	        
      // adjust-index-def-data(store-results|namespace, path):
      //    Packet(n,payloads) -> <store-results> PacketStore(n,payloads)
 
       
    // adjust-index-def-data(store-results|namespace, path):
    //     e -> <store-results> EventHandler([namespace|path],e)
        // where
        //   type := <type-of> deff
        
        // adjust-index-def-data(store-results|namespace, path):
        // deff -> <store-results> EvHdlr([namespace|path], "test123")
        
        
        
    packet-add-numbers: packets -> packets'
    where
       	<map(inc;inc;inc;inc;inc)><upto><dec><length>packets => nrs;
       	<zip>(nrs,packets) => comb;
       	 <map(try(swap-counter))>comb => packets'
       	 
       	 
     swap-counter: (i,Packet(n,decls)) -> Packet(n,i,decls)
        
    index-get-packets: name-> <packet-add-numbers><index-getcons(|name)>Packet()
   
   index-getcons(|name): type -> values
   where   
     <index-get-all-values> DefData([type, <strip-annos> name], type, ()) => values
  
  index-get-evhdlrs: name -> values
  where            
  	<flatten-list><map(project-name;index-get-evhdlr(|name))><index-get-packets>name => values
  
  
  
  index-get-evhdlr(|name): packet -> values
   where   
     <index-get-all-values> DefData([EventHandler(), PacketRef(<strip-annos>packet), <strip-annos> name], EventHandler(), () ) => values
      
        
    
    
    
        
    