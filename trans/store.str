module store

imports
   libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
	names
	desugar
	project
	
	signature constructors
		Type: X * X -> Type
	
rules
	

	adjust-index-def-data(store-results|namespace, path): 
		term@EvHdlr(_{uri}, Receive(PacketVarDecl(packet,_)), _, _) -> <store-results> DefData([EventHandler(), packet-name,package], EventHandler(), term)
		where
			package := <project-package>uri;
			packet-name := <project-name>packet

	project-package: [EventHandler(), _, p] -> p
	project-package: [EventHandler(), _,_, p] -> p
	project-package: [EventHandler(), _,_,_, p] -> p
		
	
	adjust-index-def-data(store-results|namespace, path): 
		term@DebugItem(ShowPackets(){[DebugItem(), _, package]}, packets) -> <store-results> DefData([DebugItem(), package], DebugItem(), packets)	
		
		
	adjust-index-def-data(store-results|namespace, path): 
		term@VisItem(_{[VisItem(), _, package]}, _, _, _) -> <store-results> DefData([VisItem(), package], VisItem(), term)
		
	
	adjust-index-def-data(store-results|namespace, path): 
		term@Group(_{[Group(), name, package]}, _) -> <store-results> DefData([Group(), package], Group(), term)
	
	adjust-index-def-data(store-results|namespace, path): 
		term@Group(_{[Group(), name, package]}) -> <store-results> DefData([Group(), package], Group(), term)
	
	
	adjust-index-def-data(store-results|namespace, path): 
		term@PacketDecl(_{[Packet(), name, package]},_) -> <store-results> DefData([Packet(), package], Packet(), term)
		
	

	// For Module & Meta class
	adjust-index-def-data(store-results|namespace, path): 
		term@Class(_{[Class(), name, package]},_,_) -> <store-results> DefData([Class(), package], Class(), term)
	
	
		
	adjust-index-def-data(store-results|namespace, path): 
		term@Sequence(Main(_{[Sequence(), name, package]}),_,_) -> <store-results> DefData([Sequence(), package], Sequence(), term)
	
	adjust-index-def-data(store-results|namespace, path): 
		term@Sequence(Plain(_{[Sequence(), name, package]}),_,_) -> <store-results> DefData([Sequence(), package], Sequence(), term)
			
		
	adjust-index-def-data(store-results|namespace, path): 
		term@MetaPart(_{[MetaPart(), name, package]}) -> <store-results> DefData([MetaPart(), package], MetaPart(), term)
		
		
	adjust-index-def-data(store-results|namespace, path): 
		term@ConstDecl(_,_{[Constant(), name, package]},_) -> <store-results> DefData([Constant(), package], Constant(), term)
			
		
	adjust-index-def-data(store-results|namespace, path):
       decl -> <store-results> DefData([namespace|path], Type(), type)
        where
          type := <type-of> decl	
		
        
    packet-add-numbers: packets -> packets'
    where
       	<map(inc;inc;inc;inc;inc;inc)><upto><dec><length>packets => nrs;
       	<zip>(nrs,packets) => comb;
       	 <map(try(swap-counter))>comb => packets'
       	 
       	 
     swap-counter: (i,PacketDecl(n,decls)) -> PacketDecl(n,i,decls)
        
    index-get-packets(|package) = !<packet-add-numbers><index-getcons(|package)>Packet()
   
   index-get-packets-names(|package) = !["Packet"|<map(project-name)><index-get-packets(|package)>]
   
   
   index-getcons(|package): cons -> values
   where   
     <desugar-all-nbl><index-get-all-values> DefData([cons, <strip-annos> package], cons, ()) => values
  
   
   index-get-evhdlrs(|package) = !<flatten-list><map(index-get-evhdlr-packet(|package))><index-get-packets-names(|package)>
   
  
  
  index-get-evhdlr-packet(|package): packet-name -> values
   where   
     <map(desugar-all-nbl)><index-get-all-values> DefData([EventHandler(), <strip-annos> packet-name,package], EventHandler(), () ) => values
      
 
     
    index-getclasses(|package) = !Class();index-getcons(|package);assure-class(|Meta()); assure-class(|Module())
    
    index-getsequences(|package,strategy)=  !Sequence();index-getcons(|package);![strategy|<id>]
     
    
    external SRTS-EXT-eq-ignore-annos(|t)	// Make term-based comparison and ignore annotations
         
    assure-class(|c): classes -> cls'
    where 
    	if <fetch-elem(?Class(<SRTS-EXT-eq-ignore-annos(|c)>,_,_))> classes then
    		cls' := classes
    	else
    		cls' := [Class(c,[],[])|classes]
    	end
    
    
    uri-to-cast: uri -> type-string
    where
    	switch <type-of>Def(uri)
	    	case ?Byte(): !"(byte)"
	    	case ?Int(): !"(int)"
	    	otherwise: !""
    	end;
    	type-string := <id>
    

	get-strategy: path -> strategy
	where
		strat := <collect-one(?Sequence(Strategy(_),_,_))><index-get-all-in-file>path;
		strategy := <desugar-all-nbl>strat

	index-getdebugitems(|package) = <try(list-breakout)><index-getcons(|package)>DebugItem()

 //    testdata=![
 //    	Class(
	// 	     Meta(){[Class(), Meta(), "ObstacleavoidanceTwoWheeler"]}
	// 	   , None()
	// 	   , []
 //   )
 //   
 //   
 // ]   
    
    