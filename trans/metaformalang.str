// How to efficiently dispatch between packet calls in Java?
	// How to number classes?

// Filtering index content - straightforward approach?
// Event handlers are sensitive to context - but index is only global? So maybe need manual store taking context into account? How to do that?
//  


module metaformalang

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
  names
  check
  desugar
  project
  generate
  refactor
  libjava-front

rules // Analysis
  
	// Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
	// files that should be re-analyzed.
  analyze:
    (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
    with
      ast'                    := <desugar-all> ast; // Optional AST desugaring
      (ast'', filesToAnalyze) := <analyze-top(|<language>)> (ast', path, project-path);
      index-transaction(
	      errors                := <collect-all(constraint-error, conc)> ast'';
	      warnings              := <collect-all(constraint-warning, conc)> ast'';
	      notes                 := <collect-all(constraint-note, conc)> ast''
      );
      filesToAnalyze'         := <index-filepairs-to-files> filesToAnalyze

  // Main entry point for analyzes, called when a single file is opened in the editor.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      (ast', errors, warnings, notes, filesToAnalyze) := <analyze> (ast, path, project-path);
      <try(editor-queue-analysis)> <remove-all(?path)> filesToAnalyze
      
  // Main entry point for analyzes, called when multiple files have changed. 
  editor-analyze:
    files -> None()
    where
      not(is-tuple)
    with
    	index-setup(|<language>, [<project-path>], ".");
      disable-commit-and-compile // Disable compilation during analysis.
    with
      editor-queue-analysis
    with
      // Enable and trigger compilation after all files have been analysed.
      <enable-commit-and-compile> <language>;
      <trigger-commit-and-compile> <language>
      
  // Called when current file is saved.
  editor-save:
    (_, _, _, _, _) -> None()
    with
      index-setup(|<language>, [<project-path>], ".");
      <trigger-commit-and-compile> <language>

rules // Editor services
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-transaction(
        target := <index-lookup> node
      )

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[[uriString]]
    where
      uriString := <index-uri-to-string> <index-uri> <index-find-key> target

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals'
    where
      editor-init;
      (ast', _) := <analyze-top(|<language>)> (ast, path, project-path);
      item@COMPLETION(name) := <collect-one(?COMPLETION(_))> ast';
      index-transaction(
        (<index-lookup-all(|name)> item <+ ![]) => proposals
      );
      proposals' := <map(index-uri; index-uri-name)> proposals

rules // Debugging
  
 
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected
  
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := <analyze> (selected, path, project-path)   
      
  // Prints the definition annotated abstract syntax ATerm of a selection.
  generate-deffed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"aterm")> path;
      result   := <analyze-defs(|[], <new-iset>, Anon(), Anon())> selected
      
  // Prints the entries in the index of the current file.
  index-currentfile:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
      result   := <index-get-all-in-file> path
      
  // Prints the entries in the index of all files.
  index-allfiles:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.allfiles.aterm")> path;
      result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
      
  // Cleans all data from the index.
  index-cleanall:
    (selected, position, ast, path, project-path)  -> None()
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-clear
    
rules // Utility
  
  // Queue parallel analysis for given list of files.
  editor-queue-analysis = 
    not(?[]); queue-strategy(|"editor-parallel-analyze", "Analyzing files")
      
  // Executes parallel analysis using the index library.
  editor-parallel-analyze:
    files -> None()
    with
      index-parallel-analyze-files(analyze)
      
      
  desugar-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		where
			<guarantee-extension(|"desugered.aterm")> path => filename ;
			<desugar-all> selected => result
    
      
  generate-java-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		where
			<guarantee-extension(|"java.aterm")> path => filename ;
			<base-filename> path => javafile;
			<to-java-all> selected => result  
      
   generate-java:
		(selected, position, ast, path, project-path) -> (filename, controller)
		where
			<guarantee-extension(|"java")> path => filename ;
			<base-filename> path => javafile;
			// <to-java-all><desugar-all> selected => java-main;
			<project-name>ast => name;
			index-setup(|<language>, [project-path], $[[project-path]/[path]]);
			<map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files> => index-entries;
			<index-get-data(|Type())> Def([Instruction(), 0, "Choose", "Brandt"]) => x;
			controller := "d"
			
// 			java-indexentries := <concat-strings><map(try(to-java-mods))>index-entries; 
// 			java-states	:= 
// 			<get-sequences>(name,index-entries) => names-sequence;
// 			controller := $<
// package ussr.samples.atron.simulations.metaforma.gen;
// 
// import java.awt.Color;
// import java.util.ArrayList;
// import java.util.HashSet;
// import java.util.Set;
// 
// import ussr.description.Robot;
// import ussr.description.setup.ModulePosition;
// import ussr.model.Controller;
// import ussr.model.debugging.ControllerInformationProvider;
// import ussr.samples.atron.ATRON;
// import ussr.samples.atron.simulations.metaforma.lib.*;
// import ussr.samples.atron.simulations.metaforma.lib.Packet.*;
// 
// class <name>Simulation extends MfSimulation {
// 
// 	public static void main(String[] args) {
// 		MfSimulation.initSimulator();		
// 		new <name>Simulation().main();
// 	
// 	}
// 
// 	protected Robot getRobot() {
// 		ATRON a = new ATRON() {
// 			public Controller createController() {
// 				return new [name]Controller();
// 			}
// 		};
// 		return a;
// 	}
// 
// 	protected ArrayList$<$ModulePosition$>$ buildRobot() {
// 		return new MfBuilder().buildGrid([name]Controller.Mod.Sc);
// 	}
// }
// 				
// public class <name>Controller extends MfController implements ControllerInformationProvider {
// 	
// 	public enum Sequence implements ISequence {
// 		NONE <names-sequence>;
// 		public byte ord() {return (byte) (ordinal() - 1 + SequenceGeneric.values().length);	}
// 		public ISequence fromByte(byte b) {return values()[b+1 - SequenceGeneric.values().length];}
// 	}
// 
// 	public enum Mod  implements IModule,IModEnum{
// 		 <names-mod>
// 		 private Mod (boolean isNumGroup) {
// 		if (isNumGroup) {
// 			count = 48;
// 		}
// 	}
// 	
// 		public IModule module () {
// 			return new Module (this.getMod());
// 		}
// 		
// 		public byte getCount() {
// 			return count;
// 		}
// 		
// 		public Set$<$IModule$>$ modules() {
// 			Set$<$IModule$>$ m = new HashSet$<$IModule$>$();
// 			m.add(this);
// 			return m;
// 		}
// 
// 		public boolean equals(IModule m) {
// 			return this.ordinal() == m.getMod().ordinal();
// 		}
// 
// 		@Override
// 		public IModEnum getMod() {
// 			return this;
// 		}
// 
// 		@Override
// 		public byte getNr() {
// 			return 0;
// 		}
// 
// 		@Override
// 		public Coll getGroup () {
// 			return Coll.valueOf(name().split("_")[0]);
// 		}
// 
// 		@Override
// 		public int ord() {
// 			int ret = 0;
// 			for (Mod m:values()) {
// 				if (m.ordinal() != ordinal()) {
// 					ret+=m.count;
// 				}
// 				else {
// 					if (ret $>$ 255) {
// 						throw new Error("Enum overflow: 255 bigger than " + ret + "  " + this);
// 					}
// 					return (byte)ret;
// 				}
// 			}
// 			throw new Error ("Enum value not found!");
// 		}
// 		
// 		@Override
// 		public boolean contains(IModule m) {
// 			return equals(m);
// 		}
// 
// 		@Override
// 		public IModEnum getNone() {
// 			return NONE;
// 		}
// 		
// 		@Override
// 		public IModEnum valueFrom(String string) {
// 			return valueOf(string);
// 		}
// 
// 		@Override
// 		public IModEnum getValues() {
// 			return values();
// 		}
// 
// 	}
// 	public void handleStates() {
// 		<java-states>	
// 	}	
// 	
// 	<java-packet-classes>
// >