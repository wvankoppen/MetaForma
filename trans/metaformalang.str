module metaformalang




imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
  names
  check
  desugar
  project
  store
  generate
  generate-indirect
  refactor
  libjava-front
  types
  nblhacks

rules // Analysis
  
  destination-path = !$[/home/wouter/git/ussr/src/ussr/samples/atron/simulations/metaforma/gen/];makedir
  destination-path(|p) = !$[[<destination-path>][p]/];makedir
  destination-path(|p,f) = !$[[<destination-path(|p)>][f]/];makedir  
  
	// Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
	// files that should be re-analyzed.
  analyze:
    (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
    with
      ast'                    := <desugar-all> ast; // Optional AST desugaring
      (ast'', filesToAnalyze) := <analyze-top(|<language>)> (ast', path, project-path);
      index-transaction(
	      errors                := <collect-all(constraint-error, conc)> ast'';
	      warnings              := <collect-all(constraint-warning, conc)> ast'';
	      notes                 := <collect-all(constraint-note, conc)> ast''
      );
      filesToAnalyze'         := <index-filepairs-to-files> filesToAnalyze

  // Main entry point for analyzes, called when a single file is opened in the editor.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      (ast', errors, warnings, notes, filesToAnalyze) := <analyze> (ast, path, project-path);
      <try(editor-queue-analysis)> <remove-all(?path)> filesToAnalyze
      
  // Main entry point for analyzes, called when multiple files have changed. 
  editor-analyze:
    files -> None()
    where
      not(is-tuple)
    with
    	index-setup(|<language>, [<project-path>], ".");
      disable-commit-and-compile // Disable compilation during analysis.
    with
      editor-queue-analysis
    with
      // Enable and trigger compilation after all files have been analysed.
      <enable-commit-and-compile> <language>;
      <trigger-commit-and-compile> <language>
      
  // Called when current file is saved.
  editor-save:
    (_, _, _, _, _) -> None()
    with
      index-setup(|<language>, [<project-path>], ".");
      <trigger-commit-and-compile> <language>

rules // Editor services
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-transaction(
        target := <index-lookup> node
      )

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> uriString
    where
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      // <debug(!$[target:])>target;
      uriString := $[([<project-name><type-of>target])    [<concat-glue(|".")><debug(!"Success!")><map(is-string <+ aterm-name)><reverse><tail><debug(!$[URI:])><index-uri>target]]
      


  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals'
    where
      editor-init;
      (ast', _) := <analyze-top(|<language>)> (ast, path, project-path);
      item@COMPLETION(name) := <collect-one(?COMPLETION(_))> ast';
      index-transaction(
        (<index-lookup-all(|name)> item <+ ![]) => proposals
      );
      proposals' := <map(index-uri; index-uri-name)> proposals

rules // Debugging
  
 
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected
  
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := <analyze> (selected, path, project-path)   
      
  // Prints the definition annotated abstract syntax ATerm of a selection.
  generate-deffed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"aterm")> path;
      result   := <analyze-defs(|[], <new-iset>, Anon(), Anon())> <desugar-all>selected
      
  // Prints the entries in the index of the current file.
  index-currentfile:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
      result   := <index-get-all-in-file> path
      
  // Prints the entries in the index of all files.
  index-allfiles:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.allfiles.aterm")> path;
      result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
      
  
  
  index-types:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
   		// <project-name>ast => name;
    	filename := <guarantee-extension(|"index.types.aterm")> path;
        // data   := <flatten-list><map(\filename -> <index-get-all-in-file> filename\)> <index-get-all-files>;
        data   := <index-get-all-in-file> path;
  		result := <filter(?DefData(_,Type(),_))>data
  
  
  index-manual:
    (selected, position, ast, path, project-path) -> (filename, data)
    with
      filename := <guarantee-extension(|"index.global.aterm")> path;
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      
      <project-name>ast => package;
      evhdlrs := <index-get-evhdlrs(|package)>;
      packets := <index-get-packets(|package)>;
      
      cons := [VisItem(),Group(),Class(),Sequence(),MetaPart(),Constant(),DebugItem()];
      
      data := [packets,evhdlrs|<map(index-getcons(|package))>cons]
      
      
  // Cleans all data from the index.
  index-cleanall:
    (selected, position, ast, path, project-path)  -> None()
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-clear
    
rules // Utility
  
  // Queue parallel analysis for given list of files.
  editor-queue-analysis = 
    not(?[]); queue-strategy(|"editor-parallel-analyze", "Analyzing files")
      
  // Executes parallel analysis using the index library.
  editor-parallel-analyze:
    files -> None()
    with
      index-parallel-analyze-files(analyze)
      
     
      
  desugar-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		where
			<guarantee-extension(|"desugered.aterm")> path => filename ;
			<desugar-all> selected => result
    
       
   generate-java:
		(selected, position, ast, path, project-path) -> (filename, controller)
		with
			<debug>"Generate direct Java code......";
			index-setup(|<language>, [project-path], $[[project-path]/[path]]);
			name-program := <remove-extension><base-filename>path;
			time-before := <times>;
			name-program-l := <lower-case>name-program;
			
			classname := $[[name-program]ControllerGen];
			
			<guarantee-extension(|"java")>classname => filename ;
			<base-filename> path => javafile;
			package := <project-name>ast;
			
			 
			
			packets := <index-get-packets(|package)>;
			packets-all :=  <index-get-packets-names(|package)>;
			
			<debug>"##############################";
			<debug>"COMPILE PACKETRECEIVES";
			java-packetreceives := <map2str(compile-packetreceive(|package))>packets-all;
			
			<debug>"##############################";
			<debug>"COMPILE PACKETS";
			java-packets := <map2str(compile-packet)><debug(!"Packets:")>packets;
			java-packetbuilds := <map2str(compile-packetbuild)>packets;
			
			<debug>"##############################";
			<debug>"COMPILE SEQUENCES";
			
			seqs := <debug><index-getsequences(|package)>path;
			java-seqs := <map2str(compile)>seqs;
			
			<debug>"##############################";
			<debug>"COMPILE CLASSES";
			java-classes := <map2str(compile)><debug(!"Classes:")><index-getclasses(|package)>;
			
			<debug>"##############################";
			debug(!"COMPILE VISUALS");
			java-visuals := <map2str(to-java)><debug(!"Visuals:")><index-getcons(|package)>VisItem();
			java-messagefilter := <concat-glue(|" | ")><filter(?"PacketBase")><map(project-name;packet-name;to-debug)><debug(!"DebugItems:")><index-getdebugitems(|package)>;
			if <elem>(PacketPrim("Packet"),<index-getdebugitems(|package)>) then java-packetbase := "true" else java-packetbase := "false" end;
			
			
			<debug>"##############################";
			debug(!"COMPILE CONSTS");
			java-consts := <map2str(to-java-stat)><debug(!"Consts:")><index-getcons(|package)>Constant();
			
			<debug>"##############################";
			debug(!"COMPILE NAMES");
			names-metapart := <concat-glue(|",")><map(project-name)><index-getcons(|package)>MetaPart();
			names-sequence := <concat-glue(|",")><filter(not(is-prim-seq))><map(project-name)>seqs;
			names-group := <concat-glue(|",")><map(project-name)><index-getcons(|package)>Group();
			names-mod :=  <map2str(to-java)><index-getcons(|package)>Group();
			
			
			time-after := <times>;
			duration := $[[<Fst> <times-to-seconds> <diff-times> (time-after, time-before)] secs];
			
			controller := $<
package ussr.samples.atron.simulations.metaforma.gen.<package>.<name-program-l>;

/* File compiled in <duration> */

import java.awt.Color;
import java.util.HashSet;
import java.util.Set; 


import ussr.model.debugging.ControllerInformationProvider;
import ussr.samples.atron.simulations.metaforma.lib.*;
import ussr.samples.atron.simulations.metaforma.lib.Packet.*;
import ussr.samples.atron.simulations.metaforma.lib.constant.*;
import ussr.samples.atron.simulations.metaforma.lib.iface.*;


		
<java-packets>
				
public class <classname> extends MfController implements ControllerInformationProvider {
	
	<java-consts>
	
	@Override
	public IMetaPart getMetaPart() {
		return MetaPart.NONE;
	}

	@Override
	public ISequence getStateInst() {
		return Sequence.NONE;
	}

	@Override
	public BagModule module() {
		return module;

	}
	
	@Override
	public BagMeta meta() {
		return meta;
	}
	
	@Override
	public BagRegion region() {
		return region;
	}
	
	private BagModule module;
	private BagMeta meta; 
	private BagRegion region;
	
	private <classname> ctrl;
	

	public void init() {		
		ctrl = this;
		module = new BagModule();
		meta = new BagMeta();
		region = new BagRegion();
		
		module.setController(this);
		meta.setController(this);
		region.setController(this);
		
		Module.Mod = Mod.NONE;
		Module.Group = Group.NONE;
		
		module().part = MetaPart.NONE;
		
		mfVisual.print("File compiled in <duration>");
		
		<java-visuals>
		
		mfVisual.setMessageFilter(<java-messagefilter>);
		mfVisual.setMessageFilterPacketBase(<java-packetbase>);
	}

	
	public void handleStates() {
		<java-seqs>	
	}
	
	public void makePacket(byte[] msg, byte connector) {
		byte typeNr = PacketBase.getType(msg);
		<java-packetbuilds>
		{
			super.makePacket(msg, connector);
		}	
	}	
			
	
	<java-packetreceives>
	
	<java-classes>
}

	enum Mod  implements IModule,IModEnum{
		 NONE,X(true),<names-mod>;
		 
		 byte count;
		
		private Mod () {
			count = 1;
		}
		 
		 private Mod (boolean isNumGroup) {
		if (isNumGroup) {
			count = 48;
		}
	}
	
		public IModule module () {
			return new Module (this.getMod());
		}
		
		public byte getCount() {
			return count;
		}
		
		public Set$<$IModule$>$ modules() {
			Set$<$IModule$>$ m = new HashSet$<$IModule$>$();
			m.add(this);
			return m;
		}

		public boolean equals(IModule m) {
			return this.ordinal() == m.getMod().ordinal();
		}

		@Override
		public IModEnum getMod() {
			return this;
		}

		@Override
		public byte getNr() {
			return 0;
		}

		@Override
		public Group getGroup () {
			return Group.valueOf(name().split("_")[0]);
		}

		@Override
		public int ord() {
			int ret = 0;
			for (Mod m:values()) {
				if (m.ordinal() != ordinal()) {
					ret+=m.count;
				}
				else {
					if (ret $>$ 255) {
						throw new Error("Enum overflow: 255 bigger than " + ret + "  " + this);
					}
					return (byte)ret;
				}
			}
			throw new Error ("Enum value not found!");
		}
		
		@Override
		public boolean contains(IModule m) {
			return equals(m);
		}

		@Override
		public IModEnum getNone() {
			return NONE;
		}
		
		@Override
		public IModEnum valueFrom(String string) {
			return valueOf(string);
		}

		@Override
		public IModEnum[] getValues() {
			return values();
		}
	}
		
		
	
	enum Group implements IGroupEnum,IModuleRef{
		ALL, NONE, X,<names-group>;
		
		public boolean contains(IModule m) {
			return equals(m.getGroup());
		}

		public Set$<$IModule$>$ modules() {
			Set$<$IModule$>$ mods = new HashSet$<$IModule$>$();
			for (IModule m: Mod.values()) {
				if (m.toString().startsWith(toString() + "_")) {
					mods.add(m);
				}
			}
			return mods;
		}

		@Override
		public IGroupEnum valueFrom(String string) {
			return valueOf(string);
		}
	}	
	
	enum Sequence implements ISequence {
		NONE, <names-sequence>;
		public byte ord() {return (byte) (ordinal() - 1 + SequenceGeneric.values().length);	}
		public ISequence fromByte(byte b) {return values()[b+1 - SequenceGeneric.values().length];}
	}
	
	enum MetaPart implements IMetaPart {
		NONE, <names-metapart>;
		public IMetaPart fromByte(byte b) {
			return values()[b];
		}
		public byte index() {return (byte) ordinal();}
		public byte size() {
			// None is no part
			return (byte) (values().length - 1);
		}
	} 
>;

	
	destination-file := $[[<destination-path(|package,name-program-l)>][filename]];
	<debug>$[Opening file..  : [destination-file]];
	handle := <fopen> (destination-file, "w");
	<debug>$[Filling file..];
	<fputs> (controller, handle);
	fclose;
	<debug>$[Refreshing file: [filename]];
	<refresh-workspace-file> destination-file


head: [x|xs] -> x
tail: [x|xs] -> xs

makedir = <debug(!"Trying to make dir: ")><id>;
		if not(<isdir><id>) then
			<debug(!"Making dir: ")><id>;
			<mkdir>(<id>) 
			else
				<debug(!"Dir exists: ")><id>
		   end


	
aterm-name: aterm -> name
	where  
	?<id>#(_) => name