module metaformalang




imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
  names
  check
  desugar
  project
  store
  generate
  generate-indirect
  refactor
  libjava-front
  types
  nblhacks

rules // Analysis
  
	// Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
	// files that should be re-analyzed.
  analyze:
    (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
    with
      ast'                    := <desugar-all> ast; // Optional AST desugaring
      (ast'', filesToAnalyze) := <analyze-top(|<language>)> (ast', path, project-path);
      index-transaction(
	      errors                := <collect-all(constraint-error, conc)> ast'';
	      warnings              := <collect-all(constraint-warning, conc)> ast'';
	      notes                 := <collect-all(constraint-note, conc)> ast''
      );
      filesToAnalyze'         := <index-filepairs-to-files> filesToAnalyze

  // Main entry point for analyzes, called when a single file is opened in the editor.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      (ast', errors, warnings, notes, filesToAnalyze) := <analyze> (ast, path, project-path);
      <try(editor-queue-analysis)> <remove-all(?path)> filesToAnalyze
      
  // Main entry point for analyzes, called when multiple files have changed. 
  editor-analyze:
    files -> None()
    where
      not(is-tuple)
    with
    	index-setup(|<language>, [<project-path>], ".");
      disable-commit-and-compile // Disable compilation during analysis.
    with
      editor-queue-analysis
    with
      // Enable and trigger compilation after all files have been analysed.
      <enable-commit-and-compile> <language>;
      <trigger-commit-and-compile> <language>
      
  // Called when current file is saved.
  editor-save:
    (_, _, _, _, _) -> None()
    with
      index-setup(|<language>, [<project-path>], ".");
      <trigger-commit-and-compile> <language>

rules // Editor services
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-transaction(
        target := <index-lookup> node
      )

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[[uriString]]
    where
      uriString := <index-uri-to-string> <index-uri> <index-find-key> target

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals'
    where
      editor-init;
      (ast', _) := <analyze-top(|<language>)> (ast, path, project-path);
      item@COMPLETION(name) := <collect-one(?COMPLETION(_))> ast';
      index-transaction(
        (<index-lookup-all(|name)> item <+ ![]) => proposals
      );
      proposals' := <map(index-uri; index-uri-name)> proposals

rules // Debugging
  
 
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected
  
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := <analyze> (selected, path, project-path)   
      
  // Prints the definition annotated abstract syntax ATerm of a selection.
  generate-deffed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"aterm")> path;
      result   := <analyze-defs(|[], <new-iset>, Anon(), Anon())> <desugar-all>selected
      
  // Prints the entries in the index of the current file.
  index-currentfile:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
      result   := <index-get-all-in-file> path
      
  // Prints the entries in the index of all files.
  index-allfiles:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.allfiles.aterm")> path;
      result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
      
  
  
  index-types:
    (selected, position, ast, path, project-path) -> (filename, data)
    with
    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
    	filename := <guarantee-extension(|"index.types.aterm")> path;
   		<project-name>ast => name;
      	data := <index-get-all-values>Type((), ())
  
  
  index-manual:
    (selected, position, ast, path, project-path) -> (filename, data)
    with
      filename := <guarantee-extension(|"index.global.aterm")> path;
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      
      <strip-annos><project-name>ast => name;
      evhdlrs := <index-get-evhdlrs>name;
      
      cons := [VisItem(),Group(),Class(),State(),MetaPart(),Const()];
      
      data := [<index-get-packets>name|<map(index-getcons(|name))>cons]
      
      
            
      
     
     
  
      
  // Cleans all data from the index.
  index-cleanall:
    (selected, position, ast, path, project-path)  -> None()
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-clear
    
rules // Utility
  
  // Queue parallel analysis for given list of files.
  editor-queue-analysis = 
    not(?[]); queue-strategy(|"editor-parallel-analyze", "Analyzing files")
      
  // Executes parallel analysis using the index library.
  editor-parallel-analyze:
    files -> None()
    with
      index-parallel-analyze-files(analyze)
      
      
      to-java-all: x -> x where fail
      
  desugar-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		where
			<guarantee-extension(|"desugered.aterm")> path => filename ;
			<desugar-all> selected => result
    
      
  generate-java-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		where
			<guarantee-extension(|"java.aterm")> path => filename ;
			<base-filename> path => javafile;
			<to-java-all> selected => result  
      

      
   generate-java:
		(selected, position, ast, path, project-path) -> (filename, controller)
		where
			<debug>"Generate direct Java code";
			<project-name>ast => name;
			<guarantee-extension(|"java")> $[[name]Controller] => filename ;
			<base-filename> path => javafile;
			index-setup(|<language>, [project-path], $[[project-path]/[path]]);
			
			
			packets := <index-get-packets>name;
			packets-all :=  [Packet("Packet",0,[])|<index-get-packets>name];
			
			<debug>"##############################";
			<debug>"COMPILE PACKETRECEIVES";
			java-packetreceives := <map2str(compile-packetreceive(|name))>packets-all;
			
			<debug>"##############################";
			<debug>"COMPILE PACKETS";
			java-packets := <map2str(compile-packet)><debug(!"Packets:")>packets;
			
			<debug>"##############################";
			<debug>"COMPILE SEQUENCES";
			states := <index-getcons(|name)>State();
			java-states := <map2str(compile)>states;
			
			<debug>"##############################";
			<debug>"COMPILE CLASSES";
			java-classes := <map2str(compile)><debug(!"Classes:")><index-getcons(|name)>Class();
			
			<debug>"##############################";
			debug(!"COMPILE VISUALS");
			java-visuals := <map2str(to-java)><debug(!"Visuals:")><index-getcons(|name)>VisItem();
			
			
			<debug>"##############################";
			debug(!"COMPILE CONSTS");
			java-consts := <map2str(to-java)><debug(!"Consts:")><index-getcons(|name)>Const();
			
			<debug>"##############################";
			debug(!"COMPILE NAMES");
			names-metapart := <concat-glue(|",")><map(project-name)><index-getcons(|name)>MetaPart();
			names-sequence := <concat-glue(|",")><map(project-name)>states;
			names-group := <concat-glue(|",")><map(project-name)><index-getcons(|name)>Group();
			names-mod :=  <map2str(to-java)><index-getcons(|name)>Group();
			
			name-l := <lower-case>name;
			controller := $<
package ussr.samples.atron.simulations.metaforma.gen.<name-l>;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set; 

import ussr.description.Robot;
import ussr.description.setup.ModulePosition;
import ussr.description.setup.WorldDescription;
import ussr.samples.ObstacleGenerator;
import ussr.model.Controller;
import ussr.model.debugging.ControllerInformationProvider;
import ussr.samples.atron.ATRON;
import ussr.samples.atron.simulations.metaforma.lib.*;
import ussr.samples.atron.simulations.metaforma.lib.Packet.*;



class <name>Simulation extends MfSimulation {

	public static void main(String[] args) {
		MfSimulation.initSimulator();		
		new <name>Simulation().main();
	
	}

	protected Robot getRobot() {
		ATRON a = new ATRON() {
			public Controller createController() {
				return new <name>Controller();
			}
		};
		return a;
	}

	protected ArrayList$<$ModulePosition$>$ buildRobot() {
		return new MfBuilder().buildCar(2,Mod.Main);
	}
	
	protected void changeWorldHook(WorldDescription world) {
        ObstacleGenerator generator = new ObstacleGenerator();
        generator.obstacalize(ObstacleGenerator.ObstacleType.LINE, world);
        world.setPlaneTexture(WorldDescription.GREY_GRID_TEXTURE);
    }
}
		
<java-packets>
				
public class <name>Controller extends MfController implements ControllerInformationProvider {
	
	<java-consts>
	
	
	
	@Override
	public IMetaPart getMetaPart() {
		return MetaPart.NONE;
	}

	@Override
	public ISequence getStateInst() {
		return Sequence.NONE;
	}

	@Override
	public BagModule module() {
		return module;

	}
	
	@Override
	public BagMeta meta() {
		return meta;
	}
	
	@Override
	public BagRegion region() {
		return region;
	}
	
	private BagModule module;
	private BagMeta meta; 
	private BagRegion region;
	
	private <name>Controller ctrl;
	

	public void init() {		
		ctrl = this;
		module = new BagModule();
		meta = new BagMeta();
		region = new BagRegion();
		
		module.setController(this);
		meta.setController(this);
		region.setController(this);
		
		Module.Mod = Mod.NONE;
		Module.Group = Group.NONE;
		
		module().part = MetaPart.NONE;
		
		
		<java-visuals>
		
		
	
		
		visual.setMessageFilter(255);//^ pow2(PacketDiscover.getTypeNr()));		
	}

	
	public void handleStates() {
		<java-states>	
	}
			
	
	<java-packetreceives>
	
	<java-classes>
}

enum Mod  implements IModule,IModEnum{
		 NONE,Main,<names-mod>;
		 
		 byte count;
		
		private Mod () {
			count = 1;
		}
		 
		 private Mod (boolean isNumGroup) {
		if (isNumGroup) {
			count = 48;
		}
	}
	
		public IModule module () {
			return new Module (this.getMod());
		}
		
		public byte getCount() {
			return count;
		}
		
		public Set$<$IModule$>$ modules() {
			Set$<$IModule$>$ m = new HashSet$<$IModule$>$();
			m.add(this);
			return m;
		}

		public boolean equals(IModule m) {
			return this.ordinal() == m.getMod().ordinal();
		}

		@Override
		public IModEnum getMod() {
			return this;
		}

		@Override
		public byte getNr() {
			return 0;
		}

		@Override
		public Group getGroup () {
			return Group.valueOf(name().split("_")[0]);
		}

		@Override
		public int ord() {
			int ret = 0;
			for (Mod m:values()) {
				if (m.ordinal() != ordinal()) {
					ret+=m.count;
				}
				else {
					if (ret $>$ 255) {
						throw new Error("Enum overflow: 255 bigger than " + ret + "  " + this);
					}
					return (byte)ret;
				}
			}
			throw new Error ("Enum value not found!");
		}
		
		@Override
		public boolean contains(IModule m) {
			return equals(m);
		}

		@Override
		public IModEnum getNone() {
			return NONE;
		}
		
		@Override
		public IModEnum valueFrom(String string) {
			return valueOf(string);
		}

		@Override
		public IModEnum[] getValues() {
			return values();
		}
	}
		
		
	
	enum Group implements ICollectionEnum,IModuleRef{
		ALL, NONE, Main,<names-group>;
		
		public boolean contains(IModule m) {
			return equals(m.getGroup());
		}

		public Set$<$IModule$>$ modules() {
			Set$<$IModule$>$ mods = new HashSet$<$IModule$>$();
			for (IModule m: Mod.values()) {
				if (m.toString().startsWith(toString() + "_")) {
					mods.add(m);
				}
			}
			return mods;
		}

		@Override
		public ICollectionEnum valueFrom(String string) {
			return valueOf(string);
		}
	}	
	
	enum Sequence implements ISequence {
		NONE, <names-sequence>;
		public byte ord() {return (byte) (ordinal() - 1 + SequenceGeneric.values().length);	}
		public ISequence fromByte(byte b) {return values()[b+1 - SequenceGeneric.values().length];}
	}
	
	enum MetaPart implements IMetaPart {
		NONE, <names-metapart>;
		public IMetaPart fromByte(byte b) {
			return values()[b];
		}
		public byte index() {return (byte) ordinal();}
		public byte size() {
			// None is no part
			return (byte) (values().length - 1);
		}
	} 


>;
destination-path := $[/home/wouter/git/ussr/src/ussr/samples/atron/simulations/metaforma/gen/[name-l]/];
<makedir>destination-path;
				destination-file := $[[destination-path][filename]];
				//<debug>$[Opening file..];
				handle := <fopen> (destination-file, "w");
				//<debug>$[Filling file..];
				<fputs> (controller, handle);
				fclose;
				//<debug>$[Refreshing file: [filename]];
				<refresh-workspace-file> destination-file




makedir: path -> 1
	where not(<isdir>path);<mkdir>(path)

makedir: path -> 1
	where <isdir>path