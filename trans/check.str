module check

imports
    libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
  names
  desugar
  types
  project
  generate
  functions
  store
rules 
  
  
  constraint-note = fail


  // constraint-warning: FuncCall(f,d@args) -> (d,$[Parameters do not match])
//TODO: make type checking for function calls, by adding types of primitives to the index.

 	
 	constraint-warning: decl@Package(p,d,decls) -> (decl,$[No Init sequence defined])
 	where
 		not (<collect-one(?Init(_))><index-getsequences(|p,None())>)	
 		
 	constraint-warning: decl@Package(p,d,decls) -> (decl,$[Missing parts declaration in meta class])
 	where
 		not (<collect-one(?MetaPart(_))><index-getclasses(|p)>)
 		
 	check-type: (t1,t2) -> $[Type [<print-type>t1] expected, but type [<print-type>t2] given]
 		where
 		not (<eq-type>(t1,t2))
 		
 	check-type-e: (e1,e2) -> <check-type>(<type-of>e1,<type-of>e2)	
 	
 	eq-type: (t1,t2) -> <id> 
 	where
 		<eq>(t1,t2) + <eq>(Int(),t1);<eq>(Byte(),t2) + <eq>(Int(),t2);<eq>(Byte(),t1)
 		  
 	
 	constraint-warning:
 	d@FuncCall( 
	  FuncActuationRef(func)
	, args
	) -> (d,$[[func] expects ModuleRef,Integer but [<concat-glue(|",")><map(type-of;print-type)>args] given])
	 where
	 	<elem>(func,["retract","retractSet","extend","extendSet","rotate"]);
	 	not(
	 	 <elem>(<type-of><first>args,[Group(),Mod()]);
	 	 <elem>(<type-of><second>args,[Int(),Byte()])
	 	 )
	 	
	constraint-warning:
 	d@FuncCall(
	  FuncActuationRef(func)
	, args
	) -> (d,$[[func] expects ModuleRef,ModuleRef(,Boolean) but [<concat-glue(|",")><map(type-of;print-type)>args] given])
	 where
	 	<elem>(func,["connect","disconnect"]);
	 	not(
	 	 <elem>(<type-of><first>args,[Group(),Mod()]);
	 	 <elem>(<type-of><second>args,[Group(),Mod()]);
	 	 <eq>(<length>args,2)
	 	 )
	 	 
	 	 
	 	 constraint-warning:
 	Assign(v,d@v2) -> (d,msg)
 	where
 		<check-type-e>(v,v2) => msg 
 
 constraint-warning:		
 	d@BoolOp(op,e1,e2) -> (d,msg)
 	where
 		<check-type-e>(e1,e2) => msg 
	 	 
  constraint-warning: d@ConstDecl (t,n,v) -> (d,msg)
  where
  	type-value := <type-of>v;
  	<check-type>(t,type-value) => msg
  
  constraint-warning: d@FuncDecl (t,n,params,vars,stats) -> (e,msg)
  where
  	<collect-one(?Return(e))>stats => ret;
  	<check-type-e>(d,e) => msg
	
	