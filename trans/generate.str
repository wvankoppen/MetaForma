module generate

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front

  

rules // Incremental code generation of project using compilation library.
  
  
 
rules // Transformation to java strings.


to-java: VarDecl (t,n) -> FieldDec([Public()],t,[VarDec(Id(n))])

	// to-java-all: x-> CompilationUnit(None(),[],[ClassDec(ClassDecHead([],Id("BrandtSimulation"),None(),Some(SuperDec(ClassType(TypeName(Id("MfSimulation")),None()))),None()),ClassBody([ClassDec(ClassDecHead([],Id("Settings"),None(),Some(SuperDec(ClassType(TypeName(Id("SettingsBase")),None()))),None()),ClassBody([])),FieldDec([Public()],ClassOrInterfaceType(TypeName(Id("SettingsBase")),None()),[VarDec(Id("set"),NewInstance(None(),ClassOrInterfaceType(TypeName(Id("Settings")),None()),[],None()))]),MethodDec(MethodDecHead([Public(),Static()],None(),Void(),Id("main"),[Param([],ArrayType(ClassOrInterfaceType(TypeName(Id("String")),None())),Id("args"))],None()),Block([ExprStm(Invoke(Method(MethodName(AmbName(Id("MfSimulation")),Id("initSimulator"))),[])),ExprStm(Invoke(Method(NewInstance(None(),ClassOrInterfaceType(TypeName(Id("BrandtSimulation")),None()),[],None()),None(),Id("main")),[]))])),MethodDec(MethodDecHead([Protected()],None(),ClassOrInterfaceType(TypeName(Id("Robot")),None()),Id("getRobot"),[],None()),Block([LocalVarDecStm(LocalVarDec([],ClassOrInterfaceType(TypeName(Id("ATRON")),None()),[VarDec(Id("a"),NewInstance(None(),ClassOrInterfaceType(TypeName(Id("ATRON")),None()),[],Some(ClassBody([MethodDec(MethodDecHead([Public()],None(),ClassOrInterfaceType(TypeName(Id("Controller")),None()),Id("createController"),[],None()),Block([Return(Some(NewInstance(None(),ClassOrInterfaceType(TypeName(Id("BrandtController")),None()),[ExprName(Id("set"))],None())))]))]))))])),Return(Some(ExprName(Id("a"))))])),MethodDec(MethodDecHead([Protected()],None(),ClassOrInterfaceType(TypeName(Id("ArrayList")),Some(TypeArgs([ClassOrInterfaceType(TypeName(Id("ModulePosition")),None())]))),Id("buildRobot"),[],None()),Block([Return(Some(Invoke(Method(NewInstance(None(),ClassOrInterfaceType(TypeName(Id("MfBuilder")),None()),[],None()),None(),Id("buildGrid")),[ExprName(Id("set")),ExprName(AmbName(AmbName(Id("BrandtController")),Id("Mod")),Id("F"))])))]))])),ClassDec(ClassDecHead([],Id("PacketAddNeighbor"),None(),Some(SuperDec(ClassType(TypeName(Id("Packet")),None()))),None()),ClassBody([MethodDec(MethodDecHead([Public(),Static()],None(),Byte(),Id("getTypeNr"),[],None()),Block([Return(Some(Lit(Deci("6"))))])),ConstrDec(ConstrDecHead([Public()],None(),Id("PacketAddNeighbor"),[],None()),ConstrBody(None(),[ExprStm(Invoke(Method(MethodName(Id("setType"))),[Invoke(Method(MethodName(Id("getTypeNr"))),[])]))])),FieldDec([Public()],Byte(),[VarDec(Id("first"))]),FieldDec([Public()],Byte(),[VarDec(Id("second"))])]))])




to-java: Meta(vars, funcs) -> 
ClassDec(ClassDecHead([],Id("BagMeta"),None(),Some(SuperDec(ClassType(TypeName(Id("BagMetaCore")),None()))),None()),ClassBody(body))
where
	<map(to-java)>vars => body


to-java: FunDecl(t,n,)

// 
// 	
// 	class PacketAddNeighbor extends Packet {
//         public static byte getTypeNr() {return 6;}
// 
//         public PacketAddNeighbor() {
//                 setType(getTypeNr());
//         }
// 
//         public byte first;
//         public byte second;
// }




