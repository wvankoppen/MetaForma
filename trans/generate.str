module generate

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front

  

rules // Incremental code generation of project using compilation library.
  
  
 
rules // Transformation to java strings.







add-comma: e -> (e,",") 
concat-comma: l ->  <rtrim-chars(?',')><concat-strings><map(conc-strings)><map(add-comma)>l

to-java: FuncCall(n,args) -> $[[n]([<concat-comma><map(to-java)>args]);]
to-java: ModHolderRef(m,g) -> $[Mod.[g]_[m]]
to-java: ModHolderRef(g) -> $[Group.[g]]  

to-java-instrs: Instr(c,d,stat*,postcon) -> $[ 
	[instr] 
	] 
where
	<debug>c;
	<concat-strings><map(to-java)>stat* => block;
	<to-java-stop(|c,block)>postcon => instr

// to-java-all: Start(Module(m),defs,decls) -> $[public class [m]Controller extends MfController implements ControllerInformationProvider {
// 	[<concat><map(to-java-def)>defs]
// 	}]

to-java-stop(|c,s): Wait(w) -> $[
	if (stateMngr.doWait([c]))  {
		[s]
		[mngr]
	}]
where
	<to-java-stop>w => mngr

to-java-stop(|c,s): Until(w) -> $[
	if (stateMngr.doUntil([c]))  {
		[s]
		[mngr]
	}]
where
	<to-java-stop>w => mngr

to-java-stop: Consensus() -> $[stateMngr.autoCommit();]

to-java-stop: e -> $[stateMngr.spend([e']);] 
	where
		not (<?Consensus()>e);
		<to-java>e => e'



to-java-all : Program(_,_,State(n,_,_,instrs)) -> $[sdds[<concat-strings><map(to-java-instrs)>instrs]]


to-java-def: Group(n,mod*) -> $[enum Mod {[mods]}]
where
	<concat-comma>mod* => mods 

to-java-def: State(n,d1,d2,instrs) -> $[[<concat-strings><map(to-java-instrs)>instrs]]


to-java: BinOp (op,e1,e2) -> $[([<to-java>e1] [<to-java>op] [<to-java>e2])]

to-java: And() -> $[ && ]
to-java: Or() -> $[ || ]
to-java: Eq() -> $[ == ]
to-java: Plus() -> $[ + ]
to-java: Min() -> $[ - ]
to-java: Lt() -> $[ < ]
to-java: LtEq() -> $[ <= ]
to-java: Gt() -> $[ > ]
to-java: GtEq() -> $[ >= ]

to-java: Block(stats) -> $[[<concat-strings><map(to-java)>stats]]

to-java: If(c,stats) -> $[ if ([<to-java>c]) {
		[<concat-strings><map(to-java)>stats]
}
]

to-java: FieldRef(obj,f) -> $[[<to-java>obj].getVar("[f]")]

to-java: Assign(FieldRef(obj,field),val) -> $[[<to-java>obj].setVar("[field]",[val']);]
where
	<to-java>val => val'
	
to-java: Config() -> $[config()]
to-java: Module() -> $[module()]
to-java: Meta() -> $[meta()]
to-java: VarRef(n) -> n
to-java: Par(e) -> $[ ([<to-java>e]) ]

to-java: Int(i) -> i
to-java: Bool(b) -> b




to-java: Receive(p,var) -> $[
	public boolean receivePacket ([p] p) {
	
]
