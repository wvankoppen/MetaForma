module generate

imports
	
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
	names
	desugar
	generate-indirect
	nblhacks
 store
strategies

 
 
 to-java: Group (g,mods) -> <map2str(to-java(|g))>mods
 
 to-java(|g): Mod(n) -> $[[g]_[n],]
 to-java: Group(n) -> $[[n](true),]  
 
 
 
rules // Transformation to java strings.





add-glue(|glue): e -> (glue,e) 
concat-glue(|glue): [head|tail] ->  $[[head][<map(conc-strings)><map(add-glue(|glue))>tail]]
concat-glue(|glue): [] -> $[]

to-java-stat: exp -> $[[<to-java>exp];
]
where
	<debug(!"Compile stat: ")>exp

to-java: FuncCall(n,args) -> $[[<to-java>n]([<concat-glue(|",")><map(to-java)>args])] where <debug(!"FuncCall: ")>n
to-java: ModHolderNumRef(g,i) -> $[new Module(Mod.[g],[<to-java>i])]
to-java: ModHolderRef(g,m) -> $[Mod.[g]_[m]]
to-java: ModHolderRef(g) -> $[Group.[g]]  
to-java: FuncRef(n) -> n

to-java: OrientRef(o) -> $[Orientation.[o]]


to-java: FuncCall(FuncActuationRef(f), args) -> $[ctrl.getActuation().[f]([<concat-glue(|",")><map(to-java)>args])]

to-java: MethodRef(obj,n) -> $[[<to-java>obj].[n]]
where <debug>$[Compile methodref [n]]

to-java: Break() -> $[mfStateMngr.nextInstruction()]

to-java-instr: Instr(i,evhdlrs,evsemi,stat*,postcon) -> $[ 
	[instr] 
	] 
where
	<debug(!$[Instruction start [i]: ])>evsemi;
	<map2str(to-java-stat)>evsemi => java-evsemi;
	<debug(!$[Instruction stats [i]:])>stat*;
	<map2str(to-java-stat)>stat* => block;
	<debug(!$[Instruction stopcondition [i]:])>postcon;
	<to-java-stopcon(|i,java-evsemi,block)>postcon => instr;
	<debug>$[Instruction end [i]]

// to-java-all: Start(Module(m),defs,decls) -> $[public class [m]Controller extends MfController implements ControllerInformationProvider {
// 	[<concat><map(to-java-def)>defs]
// 	}]


// A doWait has no event habndlers because it is only evaluated once
to-java-stopcon(|i,java-evsemi,java-stats): Wait(wait) -> 
$[
	if (mfStateMngr.doWait([i]))  {
		[java-evsemi]
		[java-stats]
		[java-statemngr-call]
	}]
where
	<to-java-stop>wait => java-statemngr-call

to-java-stopcon(|i,java-evsemi,java-stats): Until(wait) -> $[
	if (mfStateMngr.doUntil([i]))  {
		[java-evsemi]
		[java-stats]
		[java-statemngr-call]
	}]
where
	<to-java-stop>wait => java-statemngr-call

to-java-stop: Consensus() -> $[mfStateMngr.commitEnd();]

to-java-stop: e -> $[mfStateMngr.spend([e']);] 
	where
		not (<?Consensus()>e);
		<to-java>e => e'




mod-enum: Mod(groupname,name) -> $[[groupname]_[name]]
mod-enum: Group(groupname) -> $[[groupname](true)]




to-java: TryRegion(n,Some(Orientation(o)),incs,Some(Excluding(excls))) -> $[region().tryRegion(new byte[<bracks>]{[<concat-glue(|",")><map(to-java)>incs]},new byte[<bracks>]{[<concat-glue(|",")><map(to-java)>excls]},[<to-java>n],[<to-java>o])]
to-java: TryRegion(n,None(),incs,Some(Excluding(excls))) -> $[region().tryRegion(new byte[<bracks>]{[<concat-glue(|",")><map(to-java)>incs]},new byte[<bracks>]{[<concat-glue(|",")><map(to-java)>excls]},[<to-java>n])]

to-java: OrientMatch(orients) -> $[[<concat-glue(|" || ")><map(orientref)>orients]
] 

orientref: OrientRef(r) -> $[mfStateMngr.getState().getOrientation().equals(Orientation.[r])]


to-java: GotoOrient(s,orient) -> $[mfStateMngr.nextSequence([<to-java>s],[<to-java>orient])]
to-java: Goto(s) -> $[mfStateMngr.nextSequence([<to-java>s])]

to-java-stat: Strategy(strats) -> <map2str(to-java-stat)>strats

to-java: SequenceRef(n) -> $[Sequence.[n]] 
to-java: SequencePrimRef(n) -> $[SequenceGeneric.[n]]  


to-java: BinOp (op,e1,e2) -> $[([<to-java>e1] [<to-java>op] [<to-java>e2])]
to-java: BoolOp (op,e1,e2) -> $[([<to-java>e1] [<to-java>op] [<to-java>e2])]
// where <debug>"Compile BinOp"

to-java: AndBit() -> $[ & ]
to-java: OrBit() -> $[ | ]

to-java: And() -> $[ && ]
to-java: Or() -> $[ || ]
to-java: Eq() -> $[ == ]
to-java: Neq() -> $[ != ]
to-java: Modulo() -> $[ % ]
to-java: Plus() -> $[ + ]
to-java: Mul() -> $[ * ]
to-java: Div() -> $[ / ]
to-java: Min() -> $[ - ]
to-java: Lt() -> $[ < ]
to-java: LtEq() -> $[ <= ]
to-java: Gt() -> $[ > ]
to-java: GtEq() -> $[ >= ]

to-java: Not(exp) -> $[ ![<to-java>exp] ]

to-java: Min(i) -> $[-[<to-java>i]]

// to-java: Block(stats) -> $[[<map2str(to-java-stat)>stats]] blocks are out-desugared 


to-java-stat: Ifs(ifs) -> <map2str(to-java-stat)>ifs

to-java-stat: If(c,stats) -> $[ if ([<to-java>c]) {
		[<map2str(to-java-stat)>stats]
}]
where <debug>$[Compile IF start]

to-java-stat: IfElse(c,stats1,stats2) -> $[ if ([<to-java>c]) {
		[<map2str(to-java-stat)>stats1]
}
else {
		[<map2str(to-java-stat)>stats2]
}]
where <debug>$[Compile IFELSE start]

// to-java: FieldRef(obj,f) -> $[[<to-java>obj].getVar("[f]")]
to-java: d@FieldRef(obj,f) -> $[[<to-java>obj].[f]]
// where 
// 	f' := <strip-annos>f;
// 	 not (<eq>(f',"id"));
// 	 not (<eq>(f',"group"))

to-java: ConstDecl(t,n,v) -> $[public final [<to-java>t] [n] = [<to-java>v]]

to-java: FieldPrimRef(obj,f) -> $[[<to-java>obj].get[<to-let-func>f]()]




to-java: VarDecl(t,n,v) -> $[[<to-java>t] [n]; [<to-java>Assign(VarRef(n),v)]]


// Fieldrefs can be parsed as VarRefs, then we need to extract from URI
to-java: Assign(v@VarRef(_{[Field(),name,obj,package]}), e) -> <to-java>Assign(FieldRef(obj,name),e)
to-java: Assign(v@VarRef(_{uri@[Var()|_]}), e) -> $[[<to-java>v] = [<uri-to-cast>uri][<to-java>e]]


to-let-func = switch id
		case ?"id":  !"ID"
		otherwise: <to-upper-first><id>
	end
	


to-java: Assign(FieldPrimRef(obj,f),val) -> $[[<to-java>obj].set[<to-let-func>f]([<to-java>val])]

to-java: Assign(FieldRef(obj,field),val) -> $[[<to-java>obj].setVar("[field]",[val'])]
 where
// 	not(<eq>(field,"id"));
// 	not(<eq>(field,"group"));
 	<to-java>val => val'

 

to-java-stat: FuncDecl (n,params,vars,stats) -> $[ void [n] ([<concat-glue(|",")><map(to-java)>params]) {
	[<map2str(to-java-stat)><conc>(vars,stats)]	
}
]


to-java: Param(t,n) -> $[[<to-java>t] [n]]

	
to-java: Config() -> $[ctrl.config()]
to-java: Module() -> $[ctrl.module()]
to-java: Region() -> $[ctrl.region()]
to-java: Meta() -> $[ctrl.meta()]



to-java: VarRef(n{[Unresolved(_)|_]}) -> <debug>"UNRESOLVED VAR!"
to-java: VarRef(n{[Var()|_]}) -> <strip-annos>n
to-java: VarRef(n{[Field()|_]}) -> <strip-annos>n
to-java: VarRef(n{[Constant()|_]}) -> <strip-annos>n
to-java: VarRef(n{[MetaPart()|_]}) -> $[MetaPart.[<strip-annos>n]]

to-java: PayloadRef(var,n) ->$[[<to-java>var].[n]]
to-java: Par(e) -> $[ ([<to-java>e]) ]

to-java: Const(n) -> $[MfController.[n]]
to-java: Null() -> $[null]
to-java: Int(i) -> i
to-java: Float(v) -> $[[v]f]
to-java: Bool(b) -> b

to-java: Int() -> $[int]
to-java: Byte() -> $[byte]
to-java: Float() -> $[float]
to-java: Boolean() -> $[boolean]

to-java: ByteArr() -> $[byte[<bracks>]] 

to-java: ByteArr(bytes) -> $[new byte [<bracks>]{[<concat-glue(|",")><map(to-java)>bytes]}]


to-java: NbsCount(exp) -> $[[<to-java>exp].size()]

to-java: NbsOp(constraints) -> $[ctrl.nbs()[<concat-strings><map(to-java)>constraints]]

to-java: NbsFilter(name,val) -> $[.nbsFilter[<to-upper-first>name]([<to-java>val])]

	 
to-java: Packet(p) -> $[Packet[p]]


to-java-stat: Unicast(p@Packet(packet),AssignList(assigns),dests) -> $[
	if (ctrl.freqLimit("[packet]",mfConfig.getPropagationRate())) {
		ctrl.unicast(([p'])new [p'](ctrl)[assigns'],[<to-java>dests]);
	}]
where
	p' := <to-java>p;
	assigns' := <map2str(to-java)>assigns


// to-java: AssignElem(var,val) -> $[.setVar("[<to-java>var]",[<to-java>val])]
to-java: AssignElem(PayloadRef(Packet(_),var),val) -> $[.setVar("[var]",[<to-java>val])]




to-java: VisItem (_,hemisphere,ref,c) -> $[mfVisual.setColor("[<strip-annos>hemisphere]",[<to-java>ref],[<to-java>c]);
]

to-java: Color(c) -> $[Color.[c]]



	
to-java: MetaPart(n) -> $[[n],]
to-java: MetaPartNoneRef(_) -> $[MetaPart.NONE]

to-java: FieldDecl(t,n) -> $[public [<to-java>t] [n]]

to-java: PayloadDecl(t,n) -> $[public [<to-java>t] [n]]




to-java:  BorderItem(dir,exp) -> $[if (d.equals([<to-java>dir])) {
	ret = [<to-java>exp];
}
]
where <debug>"Compile BorderItem"

// to-java: BorderLeft() -> $[BorderLine.LEFT]
// to-java: BorderRight() -> $[BorderLine.RIGHT]
// to-java: BorderTop() -> $[BorderLine.TOP]
// to-java: BorderBottom() -> $[BorderLine.BOTTOM] 	 


to-java: Border(b) -> $[BorderLine.[<to-upper-first>b]] where <debug>$[Border [b]]

// +1 because PacketDiscover has 0, and we can't do bitwise or on that
to-debug: n -> $[pow2([n].getTypeNr() + 1)]
