module types

imports
   libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/MetaformaLang
  trans/constructors
  lib/editor-common.generated
  lib/compilation-library.generated
  libjava-front
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  lib/nbl-library.generated
	names
	desugar
	project
rules
	
	
 	type-of: PacketDecl(n,_,_) -> Packet(n)

	type-of: FieldPrimRef(Module(), "metaPart") -> MetaPart()
	type-of: FieldPrimRef(Module(), "id") -> Mod()
	type-of: FieldPrimRef(Module(), "group") -> Group()
	type-of: FieldPrimRef(Module(), "metaID") -> Byte()
	type-of: FieldPrimRef(Meta(), "regionID") -> Byte()
	
	type-of: PayloadPrimRef(_, "sourceID") -> Mod()
	type-of: PayloadPrimRef(_, "sourceGroup") -> Group()
	type-of: PayloadPrimRef(_, <not(<elem>(<id>,["id","group"]))>) -> Byte()
	
	type-of: ModHolderRef(_) -> Group()
	type-of: ModHolderRef(_,_) -> Mod()
	type-of: ModHolderNumRef(_,_) -> Mod()
	
	type-of: Packet(n) -> Packet(n)

	type-of: FuncDecl(t,n,_,_,stats) -> t
	type-of: FuncCall (r,args) -> <type-of>r 
	type-of: MethodRef(o,m) -> <type-of><index-lookup>m
	type-of: FieldRef(o,f) -> <type-of><index-lookup>f
	type-of: PayloadRef(f) -> <type-of><index-lookup>f
	
	
	type-of: VarDecl(t,n) -> t
	type-of: Param(t,n) -> t
	type-of: VarRef(n) ->  <type-of><index-lookup> n
	
		 
	type-of: Meta() -> Class("meta")
	type-of: Module() -> Class("module")
	type-of: Region() -> Class("region")
	
	
	type-of: PayloadDecl (t,n) -> t
	
	type-of: Def(uri) ->  <index-get-data(|Type())> Def(uri)
	
	type-of: NbsCount(_) -> Byte()
	type-of: Int(i) -> Int()
	
	type-of: Not(_) -> Boolean()
	type-of: Bool(_) -> Boolean()
	type-of: MetaPartNoneRef(_) -> MetaPart()
	
	type-of: BoolOp(_,e1,e2) -> Boolean()
	
	type-of: BinOp(_,e1,e2) -> t1 
	where 
		t1 := <type-of>e1;
		t2 := <type-of>e2;
		<eq>(t1,t2)
	
	print-type = 
    switch id
      case ?Void() : !"void"
      case ?Int() : !"Integer"
      case ?Float() : !"Float"
      case ?MetaPart() : !"MetaPart"
      case ?Byte() : !"Byte"
      case ?Class(n) : !$[Class[<to-upper>n] ]
      case ?name#(_) : !$[[name]]
      otherwise : id
    end
    
    signature constructors
    	Packet: X -> Pacet